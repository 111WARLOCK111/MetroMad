//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class steamworks {
        
        // <realm>Menu</realm>
        // <summary>Refreshes clients addons.</summary>
        public static void ApplyAddons() {
        }
        
        // <realm>Client</realm>
        // <summary>Downloads preview image of supplied addon and saves it as a .cache file in garrysmod/cache folder.</summary>
        // <param name="workshopPreviewID">The Preview ID of workshop item.</param>
        // <param name="resultCallback">The function to process retrieved data. The first and only argument is a string, containing path to the saved file.</param>
        public static void Download(string workshopPreviewID, function resultCallback) {
        }
        
        // <realm>Client</realm>
        // <summary>Retrieves info about supplied Steam Workshop addon.</summary>
        // <param name="workshopItemID">The ID of Steam Workshop item.</param>
        // <param name="resultCallback">The function to process retrieved data. The first and only argument is a table, containing all the info.</param>
        public static void FileInfo(string workshopItemID, function resultCallback) {
        }
        
        // <realm>Client</realm>
        // <summary>Retrieves a customized list of Steam Workshop addons.</summary>
        // <param name="type">The type of items to retrieve.</param>
        // <param name="tags">A table of tags to match.</param>
        // <param name="offset">How much of results to skip from first one. Mainly used for pages.</param>
        // <param name="numRetrieve">How much addons to retrieve.</param>
        // <param name="userID">"0" to retrieve all addons, "1" to retrieve addons only published by you.</param>
        // <param name="resultCallback">The function to process retrieved data. The first and only argument is a table, containing all the info.</param>
        public static void GetList(string type, table tags, float offset, float numRetrieve, string userID, function resultCallback) {
        }
        
        // <realm>Client</realm>
        // <summary>Retrieves players name by his 64bit SteamID.</summary>
        // <param name="steamID64">The 64bit Steam ID ( aka Community ID ) of the player.</param>
        public static void GetPlayerName(string steamID64) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the client is subscribed to the specified Steam Workshop item.</summary>
        // <param name="workshopItemID">The ID of the Steam Workshop item.</param>
        public static void IsSubscribed(string workshopItemID) {
        }
        
        // <realm>Client</realm>
        // <summary>Opens the workshop website in the steam overlay browser.</summary>
        public static void OpenWorkshop() {
        }
        
        // <realm>Menu</realm>
        // <summary>{{Internal}}</summary>
        // <param name="tags">The workshop tags to apply.</param>
        // <param name="filename">Path to the file to upload.</param>
        // <param name="image">Path to the image to use as icon.</param>
        // <param name="name">Name of the Workshop submission.</param>
        // <param name="desc">Description of the Workshop submission.</param>
        public static void Publish(table tags, string filename, string image, string name, string desc) {
        }
        
        // <realm>Client</realm>
        // <summary>Requests information of the player with SteamID64 for later use with {{LibraryFunction|steamworks|GetPlayerName}}.</summary>
        // <param name="steamID64">The 64bit Steam ID of player.</param>
        public static void RequestPlayerInfo(string steamID64) {
        }
        
        // <realm>Menu</realm>
        // <param name="workshopid">The Steam Workshop item id.</param>
        public static void SetFileCompleted(string workshopid) {
        }
        
        // <realm>Menu</realm>
        // <summary>Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:</summary>
        // <param name="workshopid">The Steam Workshop item ID.</param>
        public static void SetFilePlayed(string workshopid) {
        }
        
        // <realm>Menu</realm>
        // <summary>Sets if an addon should be enabled or disabled. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update.</summary>
        // <param name="workshopItemID">The ID of the Steam Workshop item we should enable/disable.</param>
        // <param name="shouldMount">true to enable the item, false to disable.</param>
        public static void SetShouldMountAddon(string workshopItemID, boolean shouldMount) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the specified Steam Workshop addon will be mounted or not.</summary>
        // <param name="workshopItemID">The ID of the Steam Workshop.</param>
        public static void ShouldMountAddon(string workshopItemID) {
        }
        
        // <realm>Menu</realm>
        // <summary>{{Internal}}</summary>
        // <param name="workshopItemID">The ID of the Steam Workshop item we should subscribe to.</param>
        public static void Subscribe(string workshopItemID) {
        }
        
        // <realm>Menu</realm>
        // <summary>Unsubscribes to the specified workshop addon. Call [[steamworks/ApplyAddons|steamworks.ApplyAddons]] afterwards to update.</summary>
        // <param name="workshopItemID">The ID of the Steam Workshop item we should unsubscribe from.</param>
        public static void Unsubscribe(string workshopItemID) {
        }
        
        // <realm>Client</realm>
        // <summary>Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.</summary>
        // <param name="workshopItemID">The ID of workshop item.</param>
        public static void ViewFile(string workshopItemID) {
        }
        
        // <realm>Menu</realm>
        // <summary>Makes the user vote for the specified addon</summary>
        // <param name="workshopItemID">The ID of workshop item.</param>
        // <param name="upOrDown">Sets if the user should vote up/down. True makes them upvote, false down.</param>
        public static void Vote(string workshopItemID, boolean upOrDown) {
        }
        
        // <realm>Client</realm>
        // <summary>Retrieves vote info of supplied addon.</summary>
        // <param name="workshopItemID">The ID of workshop item.</param>
        // <param name="resultCallback">The function to process retrieved data. The first and only argument is a table, containing all the info.</param>
        public static void VoteInfo(string workshopItemID, function resultCallback) {
        }
    }
}
