//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class NextBot {
        
        // <realm>Server</realm>
        // <summary>Become a ragdoll and remove the entity.</summary>
        // <param name="info">Damage info passed from an onkilled event.</param>
        public virtual void BecomeRagdoll(CTakeDamageInfo info) {
        }
        
        // <realm>Server</realm>
        // <summary>Should only be called in BodyUpdate. This sets the move_x and move_y pose parameters of the bot to fit how they're currently moving, sets the animation speed to suit the ground speed and calls FrameAdvance.</summary>
        public virtual void BodyMoveXY() {
        }
        
        // <realm>Server</realm>
        // <summary>Like FindSpots but only returns a vector</summary>
        // <param name="type">Either "random", "near", "far".</param>
        // <param name="options">A table containing a bunch of tweakable options. See the function definition for more details.</param>
        // <return>Vector|If it finds a spot it will return a vector. If not it will return nil.</return>
        public virtual Vector FindSpot(string type, table options) {
            return new Vector();
        }
        
        // <realm>Server</realm>
        // <summary>Returns a table of hiding spots.</summary>
        // <param name="specs">This table should contain the search info.<br/><br/>.</param>
        // <return>table|An unsorted table of tables containing:<br/><br/></return>
        public virtual table FindSpots(table specs) {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the currently running activity</summary>
        // <return>number|The current activity</return>
        public virtual int GetActivity() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the distance to an entity or position. It is supposed to return a squared distance, however.</summary>
        // <param name="to">Position to measure distance to. Can be an entity.</param>
        // <return>number|Distance</return>
        public virtual int GetRangeSquaredTo(Vector to) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the distance to an entity or position</summary>
        // <param name="to">Either an entity or a Vector position.</param>
        // <return>number|distance</return>
        public virtual int GetRangeTo(Vector to) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.</summary>
        public virtual void HandleStuck() {
        }
        
        // <realm>Server</realm>
        // <summary>To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck</summary>
        // <param name="pos">The position we want to get to.</param>
        // <param name="options">A table containing a bunch of tweakable options. See the function definition for more details.</param>
        // <return>string|Either "failed", "stuck", "timeout" or "ok" - depending on how the NPC got on</return>
        public virtual string MoveToPos(Vector pos, table options) {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.</summary>
        // <param name="name">The sequence name.</param>
        // <param name="speed">Playback Rate of that sequence.</param>
        public virtual void PlaySequenceAndWait(string name, float speed) {
        }
        
        // <realm>Server</realm>
        // <summary>Start doing an activity (animation)</summary>
        // <param name="activity">One of the {{Enum|ACT}}.</param>
        public virtual void StartActivity(float activity) {
        }
    }
}
