//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class VMatrix {
        
        // <realm>Shared</realm>
        // <summary>Returns the absolute rotation of the matrix.</summary>
        // <return>Angle|Absolute rotation of the matrix</return>
        public virtual Angle GetAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a specific field in the matrix.</summary>
        // <param name="row">Row of the field whose value is to be retrieved, from 1 to 4.</param>
        // <param name="column">Column of the field whose value is to be retrieved, from 1 to 4.</param>
        // <return>number|The value of the specified field</return>
        public virtual int GetField(float row, float column) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the forward direction of the matrix.</summary>
        // <return>Vector|The forward direction of the matrix.</return>
        public virtual Vector GetForward() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an inverted matrix without modifying the original matrix.</summary>
        // <return>VMatrix|The inverted matrix if possible, nil otherwise</return>
        public virtual VMatrix GetInverse() {
            return new VMatrix();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.</summary>
        // <return>VMatrix|The inverted matrix.</return>
        public virtual VMatrix GetInverseTR() {
            return new VMatrix();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the right direction of the matrix.</summary>
        // <return>Vector|The right direction of the matrix.</return>
        public virtual Vector GetRight() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the absolute scale of the matrix.</summary>
        // <return>Vector|Absolute scale of the matrix</return>
        public virtual Vector GetScale() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the absolute translation of the matrix.</summary>
        // <return>Vector|Absolute translation of the matrix</return>
        public virtual Vector GetTranslation() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the up direction of the matrix.</summary>
        // <return>Vector|The up direction of the matrix.</return>
        public virtual Vector GetUp() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Initializes the matrix as Identity matrix.</summary>
        public virtual void Identity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Inverts the matrix.</summary>
        // <return>boolean|Whether the matrix was inverted or not</return>
        public virtual bool Invert() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.</summary>
        public virtual void InvertTR() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the matrix is equal to Identity matrix or not.</summary>
        // <return>boolean|Is the matrix an Identity matrix or not</return>
        public virtual bool IsIdentity() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the matrix is a rotation matrix or not.</summary>
        // <return>boolean|Is the matrix a rotation matrix or not</return>
        public virtual bool IsRotationMatrix() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Rotates the matrix by the given angle.</summary>
        // <param name="rotation">Rotation.</param>
        public virtual void Rotate(Angle rotation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Scales the matrix by the given vector.</summary>
        // <param name="scale">Vector to scale with matrix with.</param>
        public virtual void Scale(Vector scale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Scales the absolute translation with the given value.</summary>
        // <param name="scale">Value to scale the translation with.</param>
        public virtual void ScaleTranslation(float scale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Copies values from the given matrix object.</summary>
        // <param name="src">The matrix to copy values from.</param>
        public virtual void Set(VMatrix src) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the absolute rotation of the matrix.</summary>
        // <param name="angle">New angles.</param>
        public virtual void SetAngles(Angle angle) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a specific field in the matrix.</summary>
        // <param name="row">Row of the field to be set, from 1 to 4.</param>
        // <param name="column">Column of the field to be set, from 1 to 4.</param>
        // <param name="value">The value to set in that field.</param>
        public virtual void SetField(float row, float column, float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the forward direction of the matrix.</summary>
        // <param name="forward">The forward direction of the matrix.</param>
        public virtual void SetForward(Vector forward) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the right direction of the matrix.</summary>
        // <param name="forward">The right direction of the matrix.</param>
        public virtual void SetRight(Vector forward) {
        }
        
        // <realm>Shared</realm>
        // <summary>Modifies the scale of the matrix while preserving the rotation and translation.</summary>
        // <param name="scale">The scale to set.</param>
        public virtual void SetScale(Vector scale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the absolute translation of the matrix.</summary>
        // <param name="translation">New translation.</param>
        public virtual void SetTranslation(Vector translation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the up direction of the matrix.</summary>
        // <param name="forward">The up direction of the matrix.</param>
        public virtual void SetUp(Vector forward) {
        }
        
        // <realm>Shared</realm>
        // <summary>Converts the matrix to a 4x4 table. See {{GlobalFunction|Matrix}} function.</summary>
        // <return>table|The 4x4 table.</return>
        public virtual table ToTable() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Translates the matrix by the given vector aka. adds the vector to the translation.</summary>
        // <param name="translation">Vector to translate the matrix by.</param>
        public virtual void Translate(Vector translation) {
        }
    }
}
