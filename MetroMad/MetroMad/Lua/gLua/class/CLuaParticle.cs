//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CLuaParticle {
        
        // <realm>Client</realm>
        // <summary>Returns the air resistance of the particle.</summary>
        // <return>number|The air resistance of the particle</return>
        public virtual int GetAirResistance() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the current orientation of the particle.</summary>
        // <return>Angle|The angles of the particle</return>
        public virtual Angle GetAngles() {
            return new Angle();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the angular velocity of the particle</summary>
        // <return>Angle|The angular velocity of the particle</return>
        public virtual Angle GetAngleVelocity() {
            return new Angle();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the 'bounciness' of the particle.</summary>
        // <return>number|The 'bounciness' of the particle</return>
        public virtual int GetBounce() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the color of the particle.</summary>
        // <return>number|Red part of the color</return>
        public virtual int GetColor() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the amount of time in seconds after which the particle will be destroyed.</summary>
        // <return>number|The amount of time in seconds after which the particle will be destroyed</return>
        public virtual int GetDieTime() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the alpha value that the particle will reach on its death.</summary>
        // <return>number|The alpha value the particle will fade to</return>
        public virtual int GetEndAlpha() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the length that the particle will reach on its death.</summary>
        // <return>number|The length the particle will reach</return>
        public virtual int GetEndLength() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the size that the particle will reach on its death.</summary>
        // <return>number|The size the particle will reach</return>
        public virtual int GetEndSize() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the gravity of the particle.</summary>
        // <return>Vector|The gravity of the particle.</return>
        public virtual Vector GetGravity() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the 'life time' of the particle, how long the particle existed since its creation.</summary>
        // <return>number|How long the particle existed, in seconds.</return>
        public virtual int GetLifeTime() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the absolute position of the particle.</summary>
        // <return>Vector|The absolute position of the particle.</return>
        public virtual Vector GetPos() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the current rotation of the particle in radians, this should only be used for 2D particles.</summary>
        // <return>number|The current rotation of the particle in radians</return>
        public virtual int GetRoll() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.</summary>
        // <return>number|The current rotation speed of the particle in radians</return>
        public virtual int GetRollDelta() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the alpha value which the particle has when it's created.</summary>
        // <return>number|The alpha value which the particle has when it's created.</return>
        public virtual int GetStartAlpha() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the length which the particle has when it's created.</summary>
        // <return>number|The length which the particle has when it's created.</return>
        public virtual int GetStartLength() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the size which the particle has when it's created.</summary>
        // <return>number|The size which the particle has when it's created.</return>
        public virtual int GetStartSize() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the current velocity of the particle.</summary>
        // <return>Vector|The current velocity of the particle.</return>
        public virtual Vector GetVelocity() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Sets the air resistance of the the particle.</summary>
        // <param name="airResistance">New air resistance.</param>
        public virtual void SetAirResistance(float airResistance) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the angles of the the particle.</summary>
        // <param name="ang">New angle.</param>
        public virtual void SetAngles(Angle ang) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the angular velocity of the the particle.</summary>
        // <param name="angVel">New angular velocity.</param>
        public virtual void SetAngleVelocity(Angle angVel) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the 'bounciness' of the the particle.</summary>
        // <param name="bounce">New 'bounciness' of the particle.</param>
        public virtual void SetBounce(float bounce) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the whether the particle should collide with the world or not.</summary>
        // <param name="shouldCollide">Whether the particle should collide with the world or not.</param>
        public virtual void SetCollide(boolean shouldCollide) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the function that gets called whenever the particle collides with the world.</summary>
        // <param name="collideFunc">Collide callback, the arguments are:<br/><br/>.</param>
        public virtual void SetCollideCallback(function collideFunc) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the color of the particle.</summary>
        // <param name="r">The red component.</param>
        // <param name="g">The green component.</param>
        // <param name="b">The blue component.</param>
        public virtual void SetColor(float r, float g, float b) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the time where the particle will be removed.</summary>
        // <param name="dieTime">The new die time.</param>
        public virtual void SetDieTime(float dieTime) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the alpha value of the particle that it will reach when it dies.</summary>
        // <param name="endAlpha">The new alpha value of the particle that it will reach when it dies.</param>
        public virtual void SetEndAlpha(float endAlpha) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the length of the particle that it will reach when it dies.</summary>
        // <param name="endLength">The new length of the particle that it will reach when it dies.</param>
        public virtual void SetEndLength(float endLength) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the size of the particle that it will reach when it dies.</summary>
        // <param name="endSize">The new size of the particle that it will reach when it dies.</param>
        public virtual void SetEndSize(float endSize) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the directional gravity aka. acceleration of the particle.</summary>
        // <param name="gravity">The directional gravity.</param>
        public virtual void SetGravity(Vector gravity) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the 'life time' of the particle, how long the particle existed since its creation.</summary>
        // <param name="lifeTime">The new life time of the particle.</param>
        public virtual void SetLifeTime(float lifeTime) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whether the particle should be lighted.</summary>
        // <param name="useLighting">Whether the particle should be lighted.</param>
        public virtual void SetLighting(boolean useLighting) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets when the particles think function should be called next, this uses the synchronized server time returned by {{GlobalFunction|CurTime}}.</summary>
        // <param name="nextThink">Next think time.</param>
        public virtual void SetNextThink(float nextThink) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the absolute position of the particle.</summary>
        // <param name="pos">The new particle position.</param>
        public virtual void SetPos(Vector pos) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the roll of the particle in radians. This should only be used for 2D particles.</summary>
        // <param name="roll">The new rotation of the particle in radians.</param>
        public virtual void SetRoll(float roll) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the rotation speed of the particle in radians. This should only be used for 2D particles.</summary>
        // <param name="rollDelta">The new rotation speed of the particle in radians.</param>
        public virtual void SetRollDelta(float rollDelta) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the initial alpha value of the particle.</summary>
        // <param name="startAlpha">Initial alpha.</param>
        public virtual void SetStartAlpha(float startAlpha) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the initial length value of the particle.</summary>
        // <param name="startLength">Initial length.</param>
        public virtual void SetStartLength(float startLength) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the initial size value of the particle.</summary>
        // <param name="startSize">Initial size.</param>
        public virtual void SetStartSize(float startSize) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the think function of the particle.</summary>
        // <param name="thinkFunc">Think function. It has only one argument:<br/>.</param>
        public virtual void SetThinkFunction(function thinkFunc) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the velocity of the particle.</summary>
        // <param name="vel">The new velocity of the particle.</param>
        public virtual void SetVelocity(Vector vel) {
        }
        
        // <realm>Client</realm>
        // <summary>Scales the velocity based on the particle speed.</summary>
        // <param name="doScale">Use velocity scaling.</param>
        public virtual void SetVelocityScale(boolean doScale) {
        }
        
        // <realm>Client</realm>
        public virtual void VelocityDecay() {
        }
    }
}
