//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class Vector {
        
        // <realm>Shared</realm>
        // <summary>Adds the values of the second vector to the orignal vector, this function can be used to avoid garbage collection.</summary>
        // <param name="vector">The other vector.</param>
        public virtual void Add(Vector vector) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an angle representing the normal of the vector.</summary>
        // <return>Angle|The angle/direction of the vector.</return>
        public virtual Angle Angle() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the angle between two vectors.</summary>
        // <param name="vector">The second vector.</param>
        // <return>Angle|The angle</return>
        public virtual Angle AngleEx(Vector vector) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Calculates the cross product of the 2 vectors (The vectors that defined the normal created by the 2 vectors).</summary>
        // <param name="otherVector">Vector to calculate the cross product with.</param>
        // <return>Vector|The cross product of the two vectors.</return>
        public virtual Vector Cross(Vector otherVector) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the pythagorean distance between the vector and the other vector.</summary>
        // <param name="otherVector">The vector to get the distance to.</param>
        // <return>number|distance between the vectors.</return>
        public virtual int Distance(Vector otherVector) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the squared distance of 2 vectors, this is faster than {{ClassFunction|Vector|Distance}} as calculating the square root is an expensive process.</summary>
        // <param name="otherVec">The vector to calculate the distance to.</param>
        // <return>number|Squared distance to the vector</return>
        public virtual int DistToSqr(Vector otherVec) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>The dot product of two vectors is the product of the entries of the two vectors. A dot product returns the cosine of the angle between the two vectors multiplied by the length of both vectors.</summary>
        // <param name="rhs">The vector to calculate the dot product of.</param>
        // <return>number|The dot product between the two vectors</return>
        public virtual int Dot(Vector rhs) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the dot product of the two vectors. This is a duplicate/alias of {{ClassFunction|Vector|Dot}}, you should use that function instead.</summary>
        // <param name="Vector">The other vector.</param>
        // <return>number|Dot Product</return>
        public virtual int DotProduct(Vector Vector) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a normalized version of the vector. This is a duplicate/alias of {{ClassFunction|Vector|GetNormalized}}, you should use that function instead.</summary>
        // <return>Vector|Normalized version of the vector.</return>
        public virtual Vector GetNormal() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a normalized version of the vector.</summary>
        // <return>Vector|Normalized version of the vector.</return>
        public virtual Vector GetNormalized() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the vector is equal to another vector with the given tolerance.</summary>
        // <param name="compare">The vector to compare to.</param>
        // <param name="tolerance">The tolerance range.</param>
        // <return>boolean|Are the vectors equal or not.</return>
        public virtual bool IsEqualTol(Vector compare, float tolerance) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks whenever all fields of the vector are 0.</summary>
        // <return>boolean|Do all fields of the vector equal 0 or not</return>
        public virtual bool IsZero() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the pythagorean length of the vector.</summary>
        // <return>number|Length of the vector.</return>
        public virtual int Length() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the length of the vector in two dimensions, without the Z axis.</summary>
        // <return>number|Length of the vector in two dimensions</return>
        public virtual int Length2D() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the squared length of the vectors x and y value, this is faster than {{ClassFunction|Vector|Length2D}} as calculating the square root is an expensive process.</summary>
        // <return>number|Squared length of the vector in two dimensions</return>
        public virtual int Length2DSqr() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the squared length of the vector, this is faster than {{ClassFunction|Vector|Length}} as calculating the square root is an expensive process.</summary>
        // <return>number|Squared length of the vector</return>
        public virtual int LengthSqr() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Scales the vector by the given number, that means x, y and z are multiplied by that value.</summary>
        // <param name="multiplier">The value to scale the vector with.</param>
        public virtual void Mul(float multiplier) {
        }
        
        // <realm>Shared</realm>
        // <summary>Normalizes the given vector.</summary>
        public virtual void Normalize() {
        }
        
        // <realm>Shared</realm>
        // <summary>Rotates a vector by the given angle.</summary>
        // <param name="rotation">The angle to rotate the vector by.</param>
        public virtual void Rotate(Angle rotation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Copies the values from the second vector to the first vector.</summary>
        // <param name="vector">The vector to copy from.</param>
        public virtual void Set(Vector vector) {
        }
        
        // <realm>Shared</realm>
        // <summary>Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.</summary>
        // <param name="vector">The other vector.</param>
        public virtual void Sub(Vector vector) {
        }
        
        // <realm>Client</realm>
        // <summary>Translates the vectors position into 2D user screen coordinates.</summary>
        // <return>table|The created {{Struct|ToScreenData}}.</return>
        public virtual table ToScreen() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the given vector is in a box created by the 2 other vectors.</summary>
        // <param name="boxStart">The first vector.</param>
        // <param name="boxEnd">The second vector.</param>
        // <return>boolean|Is the vector in the box or not</return>
        public virtual bool WithinAABox(Vector boxStart, Vector boxEnd) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Sets x, y and z to 0.</summary>
        public virtual void Zero() {
        }
    }
}
