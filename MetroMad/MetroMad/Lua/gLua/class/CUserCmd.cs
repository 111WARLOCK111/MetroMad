//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CUserCmd {
        
        // <realm>Shared</realm>
        // <summary>Removes all keys from the command. Doesn't prevent movement, see {{ClassFunction|CUserCmd|ClearMovement}} for this.</summary>
        public virtual void ClearButtons() {
        }
        
        // <realm>Shared</realm>
        // <summary>Clears the movement from the command.</summary>
        public virtual void ClearMovement() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an increasing number representing the index of the user cmd. The value returned is occasionally 0 inside {{HookFunction|GM|CreateMove}}, so it's advised to check for a non-zero value if you wish to get the correct number.</summary>
        // <return>number|The command number</return>
        public virtual int CommandNumber() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a bitflag indicating which buttons are pressed.</summary>
        // <return>number|Pressed buttons, see {{Enum|IN}}</return>
        public virtual int GetButtons() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>The speed the client wishes to move forward with, negative if the clients wants to move backwards.</summary>
        // <return>number|The desired speed</return>
        public virtual int GetForwardMove() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the current impulse from the client, usually 0.</summary>
        // <return>number|The impulse</return>
        public virtual int GetImpulse() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the scroll delta as whole number.</summary>
        // <return>number|Scroll delta</return>
        public virtual int GetMouseWheel() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the delta of the angular horizontal mouse movement of the player.</summary>
        // <return>number|xDelta</return>
        public virtual int GetMouseX() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the delta of the angular vertical mouse movement of the player.</summary>
        // <return>number|yDelta</return>
        public virtual int GetMouseY() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.</summary>
        // <return>number|requestSpeed</return>
        public virtual int GetSideMove() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>The speed the client wishes to move up with, negative if the clients wants to move down.</summary>
        // <return>number|requestSpeed</return>
        public virtual int GetUpMove() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the direction the client wants to move in.</summary>
        // <return>Angle|requestDir</return>
        public virtual Angle GetViewAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the specified button(s) is pressed.</summary>
        // <param name="key">Bitflag representing which button to check, see {{Enum|IN}}.</param>
        // <return>boolean|Is key down or not</return>
        public virtual bool KeyDown(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Removed a key bit from the current key bitflag.</summary>
        // <param name="button">Bitflag to be removed from the key bitflag, see {{Enum|IN}}.</param>
        public virtual void RemoveKey(float button) {
        }
        
        // <realm>Shared</realm>
        // <summary>Forces the associated player to select a weapon.</summary>
        // <param name="weapon">The weapon entity to select.</param>
        public virtual void SelectWeapon(Weapon weapon) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the buttons bitflag</summary>
        // <param name="buttons">Bitflag representing which buttons are "down", see {{Enum|IN}}.</param>
        public virtual void SetButtons(float buttons) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.</summary>
        // <param name="speed">The new speed to request.</param>
        public virtual void SetForwardMove(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the impulse to be send together with the command.</summary>
        // <param name="speed">The impulse to send.</param>
        public virtual void SetImpulse(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the scroll delta.</summary>
        // <param name="speed">The scroll delta.</param>
        public virtual void SetMouseWheel(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the delta of the angular horizontal mouse movement of the player.</summary>
        // <param name="speed">Angular horizontal move delta.</param>
        public virtual void SetMouseX(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the delta of the angular vertical mouse movement of the player.</summary>
        // <param name="speed">Angular vertical move delta.</param>
        public virtual void SetMouseY(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.</summary>
        // <param name="speed">The new speed to request.</param>
        public virtual void SetSideMove(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets speed the client wishes to move upwards with, negative to move down.</summary>
        // <param name="speed">The new speed to request.</param>
        public virtual void SetUpMove(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the direction the client wants to move in.</summary>
        // <param name="viewAngle">New view angles.</param>
        public virtual void SetViewAngles(Angle viewAngle) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns tick count since joining the server. Sometimes returns 0.</summary>
        // <return>number|The amount of ticks passed since joining the server</return>
        public virtual int TickCount() {
            return 1;
        }
    }
}
