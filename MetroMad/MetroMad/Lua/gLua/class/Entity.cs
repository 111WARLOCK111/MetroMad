//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class Entity {
        
        // <realm>Shared</realm>
        // <summary>Activates the entity. This needs to be used on some entities (like constraints) after being spawned.</summary>
        public virtual void Activate() {
        }
        
        // <realm>Shared</realm>
        // <summary>Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.</summary>
        // <param name="HookType">One of the following:.</param>
        // <param name="func">The function to call.</param>
        public virtual void AddCallback(string HookType, function func) {
        }
        
        // <realm>Shared</realm>
        // <summary>Applies an engine effect to an entity.</summary>
        // <param name="effect">The effect to apply, see {{Enum|EF}}.</param>
        public virtual void AddEffects(float effect) {
        }
        
        // <realm>Shared</realm>
        // <summary>Adds engine flags.</summary>
        // <param name="flag">Engine flag to add, see {{Enum|EFL}}.</param>
        public virtual void AddEFlags(float flag) {
        }
        
        // <realm>Shared</realm>
        // <summary>Adds flags to the entity.</summary>
        // <param name="flag">Flag to add, see {{Enum|FL}}.</param>
        public virtual void AddFlags(float flag) {
        }
        
        // <realm>Shared</realm>
        // <summary>Rotates an object so that it's angles are aligned to the ones inputed.</summary>
        // <param name="from">Unknown.</param>
        // <param name="to">Unknown.</param>
        // <return>Angle|unknown</return>
        public virtual Angle AlignAngles(Angle from, Angle to) {
            return new Angle();
        }
        
        // <realm>Client</realm>
        // <summary>Spawns a clientside ragdoll for the entity, and makes the entity invisible.</summary>
        public virtual void BecomeRagdollOnClient() {
        }
        
        // <realm>Server</realm>
        // <summary>Dispatches blocked events to this entity's blocked handler. This is an internal function and only useful when interacting with entities like func_movelinear.</summary>
        // <param name="entity">The entity that is blocking us.</param>
        public virtual void Blocked(Entity entity) {
        }
        
        // <realm>Server</realm>
        // <summary>Returns a centered vector of this entity, NPCs use this internally to aim at their targets.</summary>
        // <param name="origin">The vector of where the the attack comes from.</param>
        // <param name="noisy">Decides if it should return the centered vector with a random offset to it.</param>
        // <return>Vector|The centered vector.</return>
        public virtual Vector BodyTarget(Vector origin, boolean noisy) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the entity's bone has the flag or not.</summary>
        // <param name="boneID">Bone ID to test flag of.</param>
        // <param name="flag">The flag to test, see {{Enum|BONE}}.</param>
        // <return>boolean|Whether the bone has that flag or not</return>
        public virtual bool BoneHasFlag(float boneID, float flag) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>This function takes the boneID and returns the length of it in an unrounded decimal</summary>
        // <param name="boneID">The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results.</param>
        // <return>number|The length of the bone</return>
        public virtual int BoneLength(float boneID) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the distance between the center of the bounding box and the furthest bounding box corner.</summary>
        // <return>number|The radius of the bounding box.</return>
        public virtual int BoundingRadius() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Causes a specified function to be run if the entity is removed by any means.</summary>
        // <param name="identifier">Identifier of the function within CallOnRemove.</param>
        // <param name="removeFunc">Function to be called on remove.</param>
        // <param name="argnparams object[]">Optional arguments to pass to removeFunc.</param>
        public virtual void CallOnRemove(string identifier, function removeFunc, any argnparams object[]) {
        }
        
        // <realm>Shared</realm>
        // <summary>Resets all pose parameters such as aim_yaw, aim_pitch and rotation.</summary>
        public virtual void ClearPoseParameters() {
        }
        
        // <realm>Server</realm>
        // <summary>Returns whether the entity was created by map or not.</summary>
        // <return>boolean|Is created by map?</return>
        public virtual bool CreatedByMap() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Creates a clientside particle system attached to the entity.</summary>
        // <param name="particle">The particle name to create.</param>
        // <param name="attachment">Attachment ID to attach the particle to.</param>
        public virtual void CreateParticleEffect(string particle, float attachment) {
        }
        
        // <realm>Shared</realm>
        // <summary>Draws the shadow of an entity.</summary>
        public virtual void CreateShadow() {
        }
        
        // <realm>Server</realm>
        // <summary>Whenever the entity is removed, entityToRemove will be removed also.</summary>
        // <param name="entityToRemove">The entity to be removed.</param>
        public virtual void DeleteOnRemove(Entity entityToRemove) {
        }
        
        // <realm>Client</realm>
        // <summary>Removes the shadow for the entity.</summary>
        public virtual void DestroyShadow() {
        }
        
        // <realm>Client</realm>
        // <summary>Disables an active matrix.</summary>
        // <param name="matrixType">The name of the matrix type to disable.<br/><br/>.</param>
        public virtual void DisableMatrix(string matrixType) {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a trace attack.</summary>
        // <param name="damageInfo">The damage to apply.</param>
        // <param name="traceRes">Trace result to use to deal damage. See {{Struct|TraceResult}}.</param>
        // <param name="dir">Direction of the attack.</param>
        public virtual void DispatchTraceAttack(CTakeDamageInfo damageInfo, table traceRes, Vector dir) {
        }
        
        // <realm>Server</realm>
        // <summary>This removes the argument entity from an ent's list of entities to 'delete on remove'</summary>
        // <param name="entityToUnremove">The entity to be removed from the list of entities to delete.</param>
        public virtual void DontDeleteOnRemove(Entity entityToUnremove) {
        }
        
        // <realm>Client</realm>
        // <summary>Running this function will draw the model of the attached entity. This can only be used in 3D rendering hooks, such as {{HookFunction|ENTITY|Draw}}</summary>
        public virtual void DrawModel() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever an entities shadow should be drawn.</summary>
        // <param name="shouldDraw">True to enable, false to disable shadow drawing.</param>
        public virtual void DrawShadow(boolean shouldDraw) {
        }
        
        // <realm>Server</realm>
        // <summary>Move an entity down until it collides with something.</summary>
        public virtual void DropToFloor() {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|Use {{ClassFunction|Entity|NetworkVar}} instead. It offers the same functionality with more features.}}</summary>
        // <param name="Type">The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String'.</param>
        // <param name="ID">The ID of the DTVar. Can be between 0 and 3.</param>
        // <param name="Name">Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!).</param>
        public virtual void DTVar(string Type, float ID, string Name) {
        }
        
        // <realm>Shared</realm>
        // <summary>Plays a sound on an entity. If run clientside, the sound will only be heard locally.</summary>
        // <param name="soundName">The name of the sound to be played.</param>
        // <param name="soundLevel">A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level.</param>
        // <param name="pitchPercent">The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.</param>
        public virtual void EmitSound(string soundName, float soundLevel, float pitchPercent) {
        }
        
        // <realm>Server</realm>
        // <summary>Toggles the constraints of this ragdoll entity on and off.</summary>
        // <param name="toggleConstraints">Set to true to enable the constraints and false to disable them.</param>
        public virtual void EnableConstraints(boolean toggleConstraints) {
        }
        
        // <realm>Shared</realm>
        // <summary>Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after {{ClassFunction|Entity|PhysicsFromMesh}}</summary>
        // <param name="useCustom">True to flag this entity.</param>
        public virtual void EnableCustomCollisions(boolean useCustom) {
        }
        
        // <realm>Client</realm>
        // <summary>Can be used to scale a model by a vector</summary>
        // <param name="matrixType">The name of the matrix type.<br/>.</param>
        // <param name="matrix">The matrix to apply before drawing the entity.</param>
        public virtual void EnableMatrix(string matrixType, VMatrix matrix) {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the unique entity index of an entity.</summary>
        // <return>number|The index of the entity.<br /></return>
        public virtual int EntIndex() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Extinguishes the entity if it is on fire.</summary>
        public virtual void Extinguish() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.</summary>
        // <return>Angle|eyeAng</return>
        public virtual Angle EyeAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the position of an Player/NPC's view, or two vectors for ragdolls (one for each eye)</summary>
        // <return>Vector|viewPos</return>
        public virtual Vector EyePos() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Searches for bodygroup with given name.</summary>
        // <param name="name">The bodygroup name to search for.</param>
        // <return>number|Bodygroup ID, -1 if not found</return>
        public virtual int FindBodygroupByName(string name) {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void FindTransitionSequence() {
        }
        
        // <realm>Server</realm>
        // <summary>Fires an entity's input</summary>
        // <param name="input">The name of the input to fire.</param>
        // <param name="param">The value to give to the input.</param>
        // <param name="delay">Delay in seconds before firing.</param>
        public virtual void Fire(string input, string param, float delay) {
        }
        
        // <realm>Shared</realm>
        // <summary>Fires a bullet.</summary>
        // <param name="bulletInfo">The bullet data to be used. See the {{Struct|Bullet}}.</param>
        // <param name="suppressHostEvents">Has the effect of encasing the FireBullets call in {{GlobalFunction|SuppressHostEvents}}, only works in multiplayer.</param>
        public virtual void FireBullets(table bulletInfo, boolean suppressHostEvents) {
        }
        
        // <realm>Shared</realm>
        // <summary>Makes entity follow another entitys bone.</summary>
        // <param name="parent">The entity to follow bone of.</param>
        // <param name="boneid">The bone to follow.</param>
        public virtual void FollowBone(Entity parent, float boneid) {
        }
        
        // <realm>Shared</realm>
        // <summary>Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun.</summary>
        public virtual void ForcePlayerDrop() {
        }
        
        // <realm>Shared</realm>
        // <summary>Advances the cycle of an animated entity by the given delta. Since cycle is a value between 0 and 1, delta should be as well.</summary>
        // <param name="delta">Amount to advance frame by.</param>
        public virtual void FrameAdvance(float delta) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the velocity of the entity, in coordinates relative to the world.</summary>
        // <return>Vector|The absolute velocity</return>
        public virtual Vector GetAbsVelocity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the angles of given entity.</summary>
        // <return>Angle|The angles of the entity.</return>
        public virtual Angle GetAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        public virtual void GetAnimInfo() {
        }
        
        // <realm>Client</realm>
        public virtual void GetAnimTime() {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the orientation and position of the attachment by its ID.</summary>
        // <param name="attachmentId">The internal ID of the attachment.</param>
        // <return>table|The angle and position of the attachment. See the {{Struct|AngPos}}.</return>
        public virtual table GetAttachment(float attachmentId) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table containing all attachments of the given entitys model.<br></summary>
        // <return>table|Attachment data. See {{Struct|AttachmentData}}.</return>
        public virtual table GetAttachments() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the blood color this entity</summary>
        // <return>number|bloodColor</return>
        public virtual int GetBloodColor() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the exact value for specific bodygroup of given entity.</summary>
        // <param name="id">The id of bodygroup to get value of.</param>
        public virtual void GetBodygroup(float id) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the count of possible values for this bodygroup.</summary>
        // <param name="bodygroup">The ID of bodygroup to retrieve count of.</param>
        // <return>number|Count of values of passed bodygroup.</return>
        public virtual int GetBodygroupCount(float bodygroup) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the name of specific bodygroup for given entity.</summary>
        // <param name="id">The id of bodygroup to get the name of.</param>
        // <return>string|The name of the bodygroup</return>
        public virtual string GetBodygroupName(float id) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a list of all attachments of the entity.</summary>
        // <return>table|List of bodygroups as a table of tables. See {{Struct|BodyGroupData}}</return>
        public virtual table GetBodyGroups() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the value of the bone controller with the specified ID.</summary>
        // <param name="boneID">ID of the bone controller. Goes from 0 to 3.</param>
        // <return>number|The value set on the bone controller.</return>
        public virtual int GetBoneController(float boneID) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of bones in the entity.<br></summary>
        // <return>number|The amount of bones in given entity</return>
        public virtual int GetBoneCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the matrix ( position / rotation transform ) of a given bone entity.</summary>
        // <param name="boneID">The bone to retrieve matrix of.</param>
        // <return>VMatrix|The matrix</return>
        public virtual VMatrix GetBoneMatrix(float boneID) {
            return new VMatrix();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns name of given bone id.</summary>
        // <param name="index">ID of bone to lookup name of.</param>
        // <return>string|The name of given bone</return>
        public virtual string GetBoneName(float index) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns parent bone of given bone.</summary>
        // <param name="bone">The bode ID of the bone to get parent of.</param>
        // <return>number|Parent bone ID</return>
        public virtual int GetBoneParent(float bone) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the position and angle of the given attachment, relative to the world.</summary>
        // <param name="boneIndex">The bone index of the given attachment. See {{ClassFunction|Entity|LookupBone}}.</param>
        // <return>Vector|The bone's position relative to the world.</return>
        public virtual Vector GetBonePosition(float boneIndex) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        public virtual void GetBrushPlane() {
        }
        
        // <realm>Shared</realm>
        public virtual void GetBrushPlaneCount() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns ids of child bones of given bone.</summary>
        // <param name="boneid">Bone id to lookup children of.</param>
        // <return>table|A table of bone ids</return>
        public virtual table GetChildBones(float boneid) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the classname of a entity.</summary>
        // <return>string|The entity's classname</return>
        public virtual string GetClass() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <return>Vector|The minimum vector of the bounds</return>
        public virtual Vector GetCollisionBounds() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the entity's collision group</summary>
        // <return>number|The collision group. See {{Enum|COLLISION}}</return>
        public virtual int GetCollisionGroup() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the color the entity is set to.</summary>
        // <return>table|The color of the entity as a {{Struct|Color}}.</return>
        public virtual table GetColor() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the two entities involved in a constraint ent</summary>
        // <return>Entity|ent1</return>
        public virtual Entity GetConstrainedEntities() {
            return new Entity();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the two entities physobjects involved in a constraint ent</summary>
        // <return>PhysObj|phys1</return>
        public virtual PhysObj GetConstrainedPhysObjects() {
            return new PhysObj();
        }
        
        // <realm>Server</realm>
        // <summary>Returns entity's creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or  {{ClassFunction|Entity|MapCreationID}}, it will always increase and old values won't be reused.</summary>
        // <return>number|The creation ID</return>
        public virtual int GetCreationID() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the time the entity was created on, relative to {{GlobalFunction|CurTime}}.</summary>
        // <return>number|The time the entity was created on.</return>
        public virtual int GetCreationTime() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Gets the creator of the SENT.</summary>
        // <return>Player|The creator</return>
        public virtual Player GetCreator() {
            return new Player();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether this entity uses custom collision check set by {{ClassFunction|Entity|SetCustomCollisionCheck}}.</summary>
        // <return>boolean|Whether this entity uses custom collision check or not</return>
        public virtual bool GetCustomCollisionCheck() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the frame of the currently played sequence.</summary>
        // <return>number|The frame of the currently played sequence</return>
        public virtual int GetCycle() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>Angle|Requested angle.</return>
        public virtual Angle GetDTAngle(float key) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>boolean|Requested boolean.</return>
        public virtual bool GetDTBool(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>Entity|Requested entity.</return>
        public virtual Entity GetDTEntity(float key) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>number|Requested float.</return>
        public virtual int GetDTFloat(float key) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>number|Requested integer.</return>
        public virtual int GetDTInt(float key) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 3.</param>
        // <return>string|Requested string.</return>
        public virtual string GetDTString(float key) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <return>Vector|Requested vector.</return>
        public virtual Vector GetDTVector(float key) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        public virtual int GetElasticity() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns acceptable value range for the flex.</summary>
        // <param name="flex">The ID of the flex to look up bounds of.</param>
        // <return>number|The minimum value for this flex</return>
        public virtual int GetFlexBounds(float flex) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns flex name.</summary>
        // <param name="id">The flex id to look up name of.</param>
        // <return>string|The flex name</return>
        public virtual string GetFlexName(float id) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the number of flexes this entity has.</summary>
        // <return>number|The number of flexes.</return>
        public virtual int GetFlexNum() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the flex scale of the entity.</summary>
        // <return>number|The flex scale</return>
        public virtual int GetFlexScale() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns current weight ( value ) of the flex.</summary>
        // <param name="flex">The ID of the flex to get weight of.</param>
        // <return>number|The current weight of the flex</return>
        public virtual int GetFlexWeight(float flex) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the forward vector of the entity, as a normalized direction vector</summary>
        // <return>Vector|forwardDir</return>
        public virtual Vector GetForward() {
            return new Vector();
        }
        
        // <realm>Server</realm>
        // <summary>Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.</summary>
        // <return>number|friction</return>
        public virtual int GetFriction() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the gravity multiplier of the entity.</summary>
        // <return>number|gravityMultiplier</return>
        public virtual int GetGravity() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the object the entity is standing on.</summary>
        // <return>Entity|ground</return>
        public virtual Entity GetGroundEntity() {
            return new Entity();
        }
        
        // <realm>Server</realm>
        public virtual Vector GetGroundSpeedVelocity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the bone of a hit box</summary>
        // <param name="hitbox">The number of the hit box.</param>
        // <param name="group">The number of the hit box group.</param>
        // <return>number|The number of the bone</return>
        public virtual int GetHitBoxBone(float hitbox, float group) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetHitBoxBone}} instead.}}</summary>
        public virtual void GetHitboxBone() {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the bounding box of a hit box</summary>
        // <param name="hitbox">The number of the hitbox.</param>
        // <param name="group">The group of the hitbox.</param>
        // <return>Vector|hit box mins</return>
        public virtual Vector GetHitBoxBounds(float hitbox, float group) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets how many hit boxes are in a given hit box group</summary>
        // <param name="group">The number of the hit box group.</param>
        // <return>number|The number of hit boxes.</return>
        public virtual int GetHitBoxCount(float group) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the number of hit box groups that an entity has.</summary>
        // <return>number|number of hit box groups</return>
        public virtual int GetHitBoxGroupCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns entitys current hit box set</summary>
        // <return>number|The current hit box id</return>
        public virtual int GetHitboxSet() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of hitbox sets in the entity.</summary>
        // <return>number|The amount of hitbox sets in the entity.</return>
        public virtual int GetHitboxSetCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>An interface for accessing internal save values on entities. This is similar to accessing an entity's save table.</summary>
        // <param name="VariableName">Name of variable corresponding to an entity save value.</param>
        // <return>any|The internal variable value</return>
        public virtual any GetInternalVariable(string VariableName) {
            return new any();
        }
        
        // <realm>Server</realm>
        // <summary>Returns a table containing all key values the entity has.<br/><br/></summary>
        // <return>table|A table of key values.</return>
        public virtual table GetKeyValues() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the rotation of the entity relative to its parent entity.</summary>
        // <return>Angle|Relative angle</return>
        public virtual Angle GetLocalAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the non-VPhysics angular velocity of the entity relative to its parent entity.</summary>
        // <return>Angle|The velocity</return>
        public virtual Angle GetLocalAngularVelocity() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns entity's position relative to it's parent.</summary>
        // <return>Vector|Relative position</return>
        public virtual Vector GetLocalPos() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Get the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.</summary>
        // <param name="boneId">The bone's ID.</param>
        public virtual void GetManipulateBoneAngles(float boneId) {
        }
        
        // <realm>Shared</realm>
        // <param name="boneId">The bone's ID.</param>
        public virtual int GetManipulateBoneJiggle(float boneId) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Get the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.</summary>
        // <param name="boneId">The bone's ID.</param>
        public virtual void GetManipulateBonePosition(float boneId) {
        }
        
        // <realm>Shared</realm>
        // <summary>Get the entity's scale manipulation of the given bone. Normal scale is Vector(1, 1, 1)</summary>
        // <param name="boneId">The bone's ID.</param>
        public virtual void GetManipulateBoneScale(float boneId) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the material override for this entity.</summary>
        // <return>string|material</return>
        public virtual string GetMaterial() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns all materials of entitys model.</summary>
        // <return>table|A table containing full path to the materials of the model.</return>
        public virtual table GetMaterials() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the surface index of this entity.</summary>
        // <return>number|surfaceIndex</return>
        public virtual int GetMaterialType() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the max health that the entity was given. It can be set via {{ClassFunction|Entity|SetMaxHealth}}.</summary>
        // <return>number|Max health.</return>
        public virtual int GetMaxHealth() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the model of given entity.</summary>
        // <return>string|The entity's model.</return>
        public virtual string GetModel() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <return>Vector|The minimum vector of the bounds</return>
        public virtual Vector GetModelBounds() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        public virtual int GetModelPhysBoneCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the models radius.</summary>
        // <return>number|The radius of the model</return>
        public virtual int GetModelRadius() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <return>Vector|The minimum vector of the bounds</return>
        public virtual Vector GetModelRenderBounds() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the selected entity's model scale.</summary>
        // <return>number|Scale of that entity's model.</return>
        public virtual int GetModelScale() {
            return 1;
        }
        
        // <realm>Server</realm>
        public virtual void GetMomentaryRotButtonPos() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?</summary>
        // <return>number|The move collide type, see {{Enum|MOVECOLLIDE}}</return>
        public virtual int GetMoveCollide() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Identical to {{ClassFunction|Entity|GetParent}}, there's no distinction between parent and movement parent in the engine.</summary>
        // <return>Entity|The movement parent of this entity.</return>
        public virtual Entity GetMoveParent() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the entity's movetype</summary>
        // <return>number|Move type. See {{Enum|MOVETYPE}}</return>
        public virtual int GetMoveType() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the mapping name of this entity.</summary>
        // <return>string|entName</return>
        public virtual string GetName() {
            return "String";
        }
        
        // <realm>Client</realm>
        public virtual Angle GetNetworkAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWAngle}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Angle|The retrieved value</return>
        public virtual Angle GetNetworkedAngle(string key, Angle fallback) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWBool}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>boolean|The retrieved value</return>
        public virtual bool GetNetworkedBool(string key, boolean fallback) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWEntity}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Entity|The retrieved value</return>
        public virtual Entity GetNetworkedEntity(string key, Entity fallback) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWFloat}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>number|The retrieved value</return>
        public virtual int GetNetworkedFloat(string key, float fallback) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWInt}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>number|The retrieved value</return>
        public virtual int GetNetworkedInt(string key, float fallback) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWString}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>string|The retrieved value</return>
        public virtual string GetNetworkedString(string key, string fallback) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked variable at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedVar}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>any|The retrieved value</return>
        public virtual any GetNetworkedVar(string key, any fallback) {
            return new any();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|GetNWVector}} instead.}}</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Vector|The retrieved value</return>
        public virtual Vector GetNetworkedVector(string key, Vector fallback) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        public virtual Vector GetNetworkOrigin() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the entity's rendering has been disabled</summary>
        // <return>boolean|notDrawing</return>
        public virtual bool GetNoDraw() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the body group count of the entity.</summary>
        // <return>number|count</return>
        public virtual int GetNumBodyGroups() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns amount of pose parameters the entity has.</summary>
        // <return>number|Amount of pose parameters the entity has</return>
        public virtual int GetNumPoseParameters() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked angle value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWAngle}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Angle|The retrieved value</return>
        public virtual Angle GetNWAngle(string key, Angle fallback) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked boolean value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWBool}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>boolean|The retrieved value</return>
        public virtual bool GetNWBool(string key, boolean fallback) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked entity value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWEntity}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Entity|The retrieved value</return>
        public virtual Entity GetNWEntity(string key, Entity fallback) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWFloat}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>number|The retrieved value</return>
        public virtual int GetNWInt(string key, float fallback) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked integer value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWInt}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>number|The retrieved value</return>
        public virtual int GetNWInt(string key, float fallback) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked string value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWString}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>string|The retrieved value</return>
        public virtual string GetNWString(string key, string fallback) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a networked vector value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWVector}}.</summary>
        // <param name="key">The key that is associated with the value.</param>
        // <param name="fallback">The value to return if we failed to retrieve the value. ( If it isn't set ).</param>
        // <return>Vector|The retrieved value</return>
        public virtual Vector GetNWVector(string key, Vector fallback) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the owner entity of this entity.</summary>
        // <return>Entity|parentEntity</return>
        public virtual Entity GetOwner() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the parent entity of this entity.</summary>
        // <return>Entity|parentEntity</return>
        public virtual Entity GetParent() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        public virtual int GetParentAttachment() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.</summary>
        // <return>number|The physics object id</return>
        public virtual int GetParentPhysNum() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the entity is persistent.</summary>
        // <return>boolean|Whether the entity is persistent.</return>
        public virtual bool GetPersistent() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns player who is claiming kills of physics damage the entity deals.</summary>
        // <param name="timeLimit">The time to check if the entity was still a proper physics attacker.</param>
        // <return>Player|The player. If entity that was set is not a player, it will return NULL entity.</return>
        public virtual Player GetPhysicsAttacker(float timeLimit) {
            return new Player();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the entity's physics object, if the entity has physics.</summary>
        // <return>PhysObj|The entity's physics object.</return>
        public virtual PhysObj GetPhysicsObject() {
            return new PhysObj();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the number of physics object an entity has (usually 1 for non ragdolls)</summary>
        // <return>number|numObjects</return>
        public virtual int GetPhysicsObjectCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a specific physics object from an entity with multiple (ragdolls)</summary>
        // <param name="physNum">The number corresponding to the physobj to grab. Starts at 0.</param>
        // <return>PhysObj|The physics object</return>
        public virtual PhysObj GetPhysicsObjectNum(float physNum) {
            return new PhysObj();
        }
        
        // <realm>Shared</realm>
        public virtual int GetPlaybackRate() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the position of entity in world.</summary>
        // <return>Vector|The position of the entity.</return>
        public virtual Vector GetPos() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the pose parameter value</summary>
        // <param name="name">Pose parameter name to look up.</param>
        // <return>number|Value of given pose parameter</return>
        public virtual int GetPoseParameter(string name) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns name of given pose parameter</summary>
        // <param name="id">Id of the pose paremeter.</param>
        // <return>string|Name of given pose parameter</return>
        public virtual string GetPoseParameterName(float id) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns pose parameter range</summary>
        // <param name="id">Pose parameter ID to look up.</param>
        // <return>number|The minimum value</return>
        public virtual int GetPoseParameterRange(float id) {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void GetRagdollOwner() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the entity's render angles, set by {{ClassFunction|Entity|SetRenderAngles}} in a drawing hook.</summary>
        // <return>Angle|The entitys render angles</return>
        public virtual Angle GetRenderAngles() {
            return new Angle();
        }
        
        // <realm>Client</realm>
        // <summary>Returns render bounds of the entity. Can be overridden by {{ClassFunction|Entity|SetRenderBounds}}.</summary>
        // <return>Vector|The minimum vector of the bounds</return>
        public virtual Vector GetRenderBounds() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns current render FX of the entity.</summary>
        // <return>number|The current render FX of the entity. See {{Enum|kRenderFx}}</return>
        public virtual int GetRenderFX() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the render group of the entity.</summary>
        // <return>number|The render group. See {{Enum|RENDERGROUP}}</return>
        public virtual int GetRenderGroup() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the render mode of the entity.</summary>
        // <return>number|The render Mode. See {{Enum|RENDERMODE}}</return>
        public virtual int GetRenderMode() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the entity's render origin, set by {{ClassFunction|Entity|SetRenderOrigin}} in a drawing hook.</summary>
        // <return>Vector|The entitys render origin</return>
        public virtual Vector GetRenderOrigin() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the rightward vector of the entity, as a normalized direction vector</summary>
        // <return>Vector|rightDir</return>
        public virtual Vector GetRight() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the min and max of the entity's axis-aligned bounding box.</summary>
        // <param name="min">Minimum extent of the bounding box.</param>
        // <param name="max">Maximum extent of the bounding box.</param>
        // <return>Vector|Minimum extent of the AABB</return>
        public virtual Vector GetRotatedAABB(Vector min, Vector max) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of save values for an entity.</summary>
        // <return>table|A table containing all save values.<br/></return>
        public virtual table GetSaveTable() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Return the index of the model sequence that is currently active for the entity.</summary>
        // <return>number|The index of the model sequence.</return>
        public virtual int GetSequence() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Return activity id out of sequence id. Opposite of {{ClassFunction|Entity|SelectWeightedSequence}}.</summary>
        // <param name="seq">The sequence ID.</param>
        // <return>number|The activity ID, ie {{Enum|ACT}}</return>
        public virtual int GetSequenceActivity(float seq) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the activity name for the given sequence id.</summary>
        // <param name="sequenceId">The sequence id.</param>
        // <return>string|The {{Enum|ACT}} as a string, returns "Not Found!" with an invalid sequence and "No model!" when no model is set.</return>
        public virtual string GetSequenceActivityName(float sequenceId) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of sequences ( animations ) the entity's model has.</summary>
        // <return>number|The amount of sequences ( animations ) the entity's model has.</return>
        public virtual int GetSequenceCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual int GetSequenceGroundSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual table GetSequenceInfo() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a list of all sequences ( animations ) the model has.</summary>
        // <return>table|The list of all sequences ( animations ) the model has</return>
        public virtual table GetSequenceList() {
            return new table();
        }
        
        // <realm>Server</realm>
        public virtual void GetSequenceMoveDist() {
        }
        
        // <realm>Server</realm>
        public virtual void GetSequenceMoveYaw() {
        }
        
        // <realm>Shared</realm>
        // <summary>Return the name of the sequence for the index provided.</summary>
        // <param name="index">The index of the sequence to look up.</param>
        // <return>string|Name of the sequence.</return>
        public virtual string GetSequenceName(float index) {
            return "String";
        }
        
        // <realm>Shared</realm>
        public virtual void GetShouldPlayPickupSound() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if entity should create a server ragdoll on death or a client one.</summary>
        // <return>boolean|Returns true if ragdoll will be created on server, false if on client</return>
        public virtual bool GetShouldServerRagdoll() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the skin index of the current skin.</summary>
        // <return>number|skinIndex</return>
        public virtual int GetSkin() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns solid type of an entity.</summary>
        // <return>number|The solid type. See the {{Enum|SOLID}}.</return>
        public virtual int GetSolid() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if we should show a spawn effect on this entity.</summary>
        // <return>boolean|The flag to allow or disallow the spawn effect.</return>
        public virtual bool GetSpawnEffect() {
            return true;
        }
        
        // <realm>Shared</realm>
        public virtual int GetSpawnFlags() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a list of models included into the entity's model in the .qc file.</summary>
        // <return>table|The list of models included into the entity's model in the .qc file.</return>
        public virtual table GetSubModels() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the table that contains all values saved within the entity.</summary>
        // <return>table|entTable</return>
        public virtual table GetTable() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the last trace used in the collision callbacks such as {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}}.</summary>
        // <return>table|The {{Struct|TraceResult}}</return>
        public virtual table GetTouchTrace() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the TransmitWithParent flag is set or not.</summary>
        // <return>boolean|Is the TransmitWithParent flag is set or not</return>
        public virtual bool GetTransmitWithParent() {
            return true;
        }
        
        // <realm>Server</realm>
        public virtual void GetUnFreezable() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the upward vector of the entity, as a normalized direction vector</summary>
        // <return>Vector|upDir</return>
        public virtual Vector GetUp() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Retrieves a value from entitys {{ClassFunction|Entity|GetTable}}.</summary>
        // <param name="name">Name of variable to retrieve.</param>
        // <param name="default">A default value to fallback to if we couldn't retrieve the value from entity.</param>
        // <return>any|Retrieved value</return>
        public virtual any GetVar(string name, any @default) {
            return new any();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the directional velocity of the entity.</summary>
        // <return>Vector|velocity</return>
        public virtual Vector GetVelocity() {
            return new Vector();
        }
        
        // <realm>Server</realm>
        // <summary>Returns ID of workshop addon that the entity is from.</summary>
        // <return>number|The workshop ID</return>
        public virtual int GetWorkshopID() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Causes the entity to break into its current models gibs, if it has any.</summary>
        // <param name="force">The force to apply to the created gibs.</param>
        public virtual void GibBreakClient(Vector force) {
        }
        
        // <realm>Shared</realm>
        // <summary>Causes the entity to break into its current models gibs, if it has any.</summary>
        // <param name="force">The force to apply to the created gibs.</param>
        public virtual void GibBreakServer(Vector force) {
        }
        
        // <realm>Shared</realm>
        public virtual bool HasBoneManipulations() {
            return true;
        }
        
        // <realm>Shared</realm>
        public virtual bool HasFlexManipulatior() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether this entity has the specified spawnflags bits set.</summary>
        // <param name="spawnFlags">The spawnflag bits to check, see {{Enum|SF}}.</param>
        // <return>boolean|Whether the entity has that spawnflag set or not.</return>
        public virtual bool HasSpawnFlags(float spawnFlags) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the position of the head of this entity, NPCs use this internally to aim at their targets.</summary>
        // <param name="origin">The vector of where the the attack comes from.</param>
        // <return>Vector|The head position.</return>
        public virtual Vector HeadTarget(Vector origin) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the health of the entity.</summary>
        // <return>number|health</return>
        public virtual int Health() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Sets the entity on fire.</summary>
        // <param name="length">How long to keep the entity ignited. Not supplying this argument will not ignite the entity at all.</param>
        // <param name="radius">The radius of the ignition, will ignite everything around the entity that is in this radius.</param>
        public virtual void Ignite(float length, float radius) {
        }
        
        // <realm>Client</realm>
        public virtual void InitializeAsClientEntity() {
        }
        
        // <realm>Server</realm>
        // <summary>Fires input to the entity with the ability to make another entity responsible. Similar to {{ClassFunction|Entity|Fire}}</summary>
        // <param name="input">The name of the input to fire.</param>
        // <param name="activator">The entity that is directly responsible.</param>
        // <param name="inflictor">The entity that is indirectly responsible (often a player).</param>
        // <param name="param">The value to give to the input. Can be a String, Float or Integer.</param>
        public virtual void Input(string input, Entity activator, Entity inflictor, any param) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets up Data Tables from entity to use with {{ClassFunction|Entity|NetworkVar}}. This is internal function and you shouldn't need to call it.</summary>
        public virtual void InstallDataTable() {
        }
        
        // <realm>Client</realm>
        public virtual void InvalidateBoneCache() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the entity has constraints attached to it</summary>
        // <return>boolean|Whether the entity is constrained or not.</return>
        public virtual bool IsConstrained() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns if entity is constraint or not</summary>
        // <return>boolean|Is the entity a constraint or not</return>
        public virtual bool IsConstraint() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the entity is dormant or not.</summary>
        // <return>boolean|Whether the entity is dormant or not.</return>
        public virtual bool IsDormant() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether an entity has engine effect applied or not.</summary>
        // <param name="effect">The effect to check for, see {{Enum|EF}}.</param>
        // <return>boolean|whether an entity has the engine effect applied or not.</return>
        public virtual bool IsEffectActive(float effect) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if given flag is set or not.</summary>
        // <param name="flag">The engine flag to test, see {{Enum|EFL}}.</param>
        // <return>boolean|Is set or not</return>
        public virtual bool IsEFlagSet(float flag) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if given flag(s) is set or not.</summary>
        // <param name="flag">The engine flag(s) to test, see {{Enum|FL}}.</param>
        // <return>boolean|Is set or not</return>
        public virtual bool IsFlagSet(float flag) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns if the entity is within the world bounds.</summary>
        // <return>boolean|isInWorld</return>
        public virtual bool IsInWorld() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns whether the entity is lag compensated or not.</summary>
        // <return>boolean|Whether the entity is lag compensated or not.</return>
        public virtual bool IsLagCompensated() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the target is in line of sight.</summary>
        // <param name="target">The target to test. You can also supply an {{Type|Entity}} instead of a {{Type|Vector}}.</param>
        // <return>boolean|Returns true if the line of sight is clear</return>
        public virtual bool IsLineOfSightClear(Vector target) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the entity is an NPC or not.</summary>
        // <return>boolean|Whether the entity is an NPC.</return>
        public virtual bool IsNPC() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the entity is on fire.</summary>
        // <return>boolean|isOnFire</return>
        public virtual bool IsOnFire() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the entity is on ground.</summary>
        // <return>boolean|isOnGround</return>
        public virtual bool IsOnGround() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the entity is a player or not.</summary>
        // <return>boolean|Whether the entity is a player.</return>
        public virtual bool IsPlayer() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns true if the entity is being held by a player. Either by Physics gun, Gravity gun or Use-key.</summary>
        // <return>boolean|IsBeingHeld</return>
        public virtual bool IsPlayerHolding() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the entity is a ragdoll.</summary>
        // <return>boolean|Is ragdoll or not</return>
        public virtual bool IsRagdoll() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the entity is valid (ie not NULL).</summary>
        // <return>boolean|Is the entity valid or not</return>
        public virtual bool IsValid() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the entity is a vehicle or not.</summary>
        // <return>boolean|Whether the entity is a vehicle.</return>
        public virtual bool IsVehicle() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the entity is a weapon or not.</summary>
        // <return>boolean|Whether the entity is a weapon</return>
        public virtual bool IsWeapon() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the entity is a widget or not.</summary>
        // <return>boolean|Whether the entity is a widget or not.</return>
        public virtual bool IsWidget() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the entity is the map's Entity[0] worldspawn</summary>
        // <return>boolean|isWorld</return>
        public virtual bool IsWorld() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a vector local to an entity into a worldspace vector</summary>
        // <param name="lpos">The local vector.</param>
        // <return>Vector|wpos</return>
        public virtual Vector LocalToWorld(Vector lpos) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a local angle (local to the entity) to a world angle.</summary>
        // <param name="ang">The local angle.</param>
        // <return>Angle|The world angle</return>
        public virtual Angle LocalToWorldAngles(Angle ang) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the attachment index of the given attachment name, returns nothing if the attachment does not exist.</summary>
        // <param name="attachmentName">The name of the attachment.</param>
        // <return>number|attachmentIndex</return>
        public virtual int LookupAttachment(string attachmentName) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the bone index of the given bone name, returns nothing if the bone does not exist.</summary>
        // <param name="boneName">The name of the bone.</param>
        // <return>number|boneIndex</return>
        public virtual int LookupBone(string boneName) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns sequence ID from its name.</summary>
        // <param name="name">Sequence name.</param>
        // <return>number|Sequence ID for that name. This '''will''' differ for models with same sequence names. Will be -1 whether the sequence is invalid.</return>
        public virtual int LookupSequence(string name) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Turns the {{ClassFunction|Entity|GetPhysicsObject}} into a physics shadow.</summary>
        // <param name="allowPhysicsMovement">Whether to allow the physics shadow to move under stress.</param>
        // <param name="allowPhysicsRotation">Whether to allow the physics shadow to rotate under stress.</param>
        public virtual void MakePhysicsObjectAShadow(boolean allowPhysicsMovement, boolean allowPhysicsRotation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets custom bone angles</summary>
        // <param name="BoneID">Index of the bone you want to manipulate.</param>
        // <param name="Angle">Angle to apply.</param>
        public virtual void ManipulateBoneAngles(float BoneID, Angle Angle) {
        }
        
        // <realm>Shared</realm>
        public virtual void ManipulateBoneJiggle() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets custom bone offsets</summary>
        // <param name="BoneID">Index of the bone you want to manipulate.</param>
        // <param name="Vector">Position vector to apply.</param>
        public virtual void ManipulateBonePosition(float BoneID, Vector Vector) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets custom bone scale</summary>
        // <param name="BoneID">Index of the bone you want to manipulate.</param>
        // <param name="Vector">Scale vector to apply.</param>
        public virtual void ManipulateBoneScale(float BoneID, Vector Vector) {
        }
        
        // <realm>Server</realm>
        // <summary>Returns entity's map creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or {{ClassFunction|Entity|GetCreationID}}, it will always be the same on same map, no matter how much you clean up or restart it.</summary>
        // <return>number|The map creation ID</return>
        public virtual int MapCreationID() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Refreshes the shadow of the entity.</summary>
        public virtual void MarkShadowAsDirty() {
        }
        
        // <realm>Shared</realm>
        // <summary>Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside {{ClassFunction|Weapon|SendWeaponAnim}}</summary>
        public virtual void MuzzleFlash() {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a Ray OBBox intersection with the entity and returns the hit position.</summary>
        // <param name="position">The vector to start the intersection from.</param>
        public virtual void NearestPoint(Vector position) {
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a network variable on the entity. This function should only be called in {{HookFunction|ENTITY|SetupDataTables}}.</summary>
        // <param name="type">Either of:.</param>
        // <param name="slot">Each network var has to have a unique slot. The slot is per type - so you can have an int in slot 0, a bool in slot 0 and a float in slot 0 etc.<br>.</param>
        // <param name="name">The name will affect how you access it. If you call it "Foo" you would add two new functions on your entity - SetFoo and GetFoo. So be careful that what you call it won't collide with any existing functions (don't call it "Pos" for example).</param>
        // <param name="extended">A table of extended information.</param>
        public virtual void NetworkVar(string type, float slot, string name, table extended) {
        }
        
        // <realm>Server</realm>
        // <summary>Creates a hook that gets exectured when network variable is  changed.</summary>
        // <param name="name">Name of variable to track changes of.</param>
        // <param name="callback">The function to call when the variable changes. It has 3 arugments:.</param>
        public virtual void NetworkVarNotify(string name, function callback) {
        }
        
        // <realm>Shared</realm>
        // <summary>In the case of a scripted entity, this will cause the entity's next "OnThink" event to be run at the given time.</summary>
        // <param name="timestamp">The timestamp at which the next think should occur.</param>
        public virtual void NextThink(float timestamp) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the center of an entity's bounding box as a local vector.</summary>
        // <return>Vector|OBBCenter</return>
        public virtual Vector OBBCenter() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the highest corner of an entity's bounding box as a local vector.</summary>
        // <return>Vector|OBBMaxs</return>
        public virtual Vector OBBMaxs() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the lowest corner of an entity's bounding box as a local vector.</summary>
        // <return>Vector|OBBMins</return>
        public virtual Vector OBBMins() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        public virtual int ObjectCaps() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the entity is on the ground, and false if it isn't.</summary>
        // <return>boolean|bOnGround - Whether the entity is on the ground or not.</return>
        public virtual bool OnGround() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Destroys the current physics object of an entity.</summary>
        public virtual void PhysicsDestroy() {
        }
        
        // <realm>Shared</realm>
        // <summary>Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.</summary>
        // <param name="vertices">A table consisting of {{Struct|MeshVertex}} (only the ''pos'' element is taken into account). Every 3 vertices define a triangle in the physics mesh.</param>
        public virtual void PhysicsFromMesh(table vertices) {
        }
        
        // <realm>Shared</realm>
        // <summary>Initializes the physics object of the entity using its current model. Deletes the previous physics object if there was any.</summary>
        // <param name="solidType">The solid type of the physics object to create, see {{Enum|SOLID}}. Should be SOLID_VPHYSICS in most cases.</param>
        public virtual void PhysicsInit(float solidType) {
        }
        
        // <realm>Shared</realm>
        // <summary>Makes the physics object of the entity a AABB.</summary>
        // <param name="mins">The minimum position of the box.</param>
        // <param name="maxs">The maximum position of the box.</param>
        public virtual void PhysicsInitBox(Vector mins, Vector maxs) {
        }
        
        // <realm>Shared</realm>
        // <summary>Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the [http://en.wikipedia.org/wiki/Convex_hull convex hull] of all the input points.</summary>
        // <param name="points">A table of {{Type|Vector}}s to be used in the computation of the convex mesh. Order does not matter.</param>
        public virtual void PhysicsInitConvex(table points) {
        }
        
        // <realm>Shared</realm>
        // <summary>An advanced version of {{ClassFunction|Entity|PhysicsInitConvex}} which initializes a physics object from multiple convex meshes.</summary>
        // <param name="vertices">A table consisting of tables of {{Type|Vector}}s. Each sub-table defines a set of points to be used in the computation of one convex mesh.</param>
        public virtual void PhysicsInitMultiConvex(table vertices) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes the old {{ClassFunction|Entity|GetPhysicsObject}} and initializes it as a physics shadow.</summary>
        // <param name="allowPhysicsMovement">Whether to allow the physics shadow to move under stress.</param>
        // <param name="allowPhysicsRotation">Whether to allow the physics shadow to rotate under stress.</param>
        public virtual void PhysicsInitShadow(boolean allowPhysicsMovement, boolean allowPhysicsRotation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Makes the physics object of the entity a sphere.</summary>
        // <param name="radius">The radius of the sphere.</param>
        // <param name="physmat">Physical Material. From this list: [https://developer.valvesoftware.com/wiki/Material_surface_properties Valve Developer].</param>
        public virtual void PhysicsInitSphere(float radius, string physmat) {
        }
        
        // <realm>Shared</realm>
        // <summary>Wakes up the entity's physics object</summary>
        public virtual void PhysWake() {
        }
        
        // <realm>Server</realm>
        // <summary>Makes the entity play a .vcd scene.</summary>
        // <param name="scene">Filepath to scene.</param>
        // <param name="delay">Delay in seconds until the scene starts playing.</param>
        public virtual void PlayScene(string scene, float delay) {
        }
        
        // <realm>Server</realm>
        // <summary>Changes an entities angles so that it faces the target entity.</summary>
        // <param name="target">The entity to face.</param>
        public virtual void PointAtEntity(Entity target) {
        }
        
        // <realm>Server</realm>
        // <summary>Precaches gibs for the entity. This is required for {{ClassFunction|Entity|GibBreakServer}} and {{ClassFunction|Entity|GibBreakClient}} to work.</summary>
        public virtual void PrecacheGibs() {
        }
        
        // <realm>Server</realm>
        // <summary>Normalizes the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.</summary>
        public virtual void RagdollSolve() {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the function to build the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.</summary>
        public virtual void RagdollStopControlling() {
        }
        
        // <realm>Server</realm>
        // <summary>Makes the physics objects follow the set bone positions. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.</summary>
        // <param name="unknown">Probably the physics object to update.</param>
        public virtual void RagdollUpdatePhysics(float unknown) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes the entity it is used on.</summary>
        public virtual void Remove() {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes all decals from the entities surface.</summary>
        public virtual void RemoveAllDecals() {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes the CallOnRemove'd function referred to by identifier</summary>
        // <param name="identifier">Identifier of the function within CallOnRemove.</param>
        public virtual void RemoveCallOnRemove(string identifier) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes an engine effect applied to an entity.</summary>
        // <param name="effect">The effect to remove, see {{Enum|EF}}.</param>
        public virtual void RemoveEffects(float effect) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes specified engine flag</summary>
        // <param name="flag">The flag to remove, see {{Enum|EFL}}.</param>
        public virtual void RemoveEFlags(float flag) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes specified flag(s) from the entity</summary>
        // <param name="flag">The flag(s) to remove, see {{Enum|FL}}.</param>
        public virtual void RemoveFlags(float flag) {
        }
        
        // <realm>Shared</realm>
        // <summary>Plays an animations on the entity. This may not always work on engine entities. For view model animations, see {{ClassFunction|Entity|SendViewModelMatchingSequence}}.</summary>
        // <param name="seq">Sequence ID to play. See {{ClassFunction|Entity|LookupSequence}}.</param>
        public virtual void ResetSequence(float seq) {
        }
        
        // <realm>Shared</realm>
        public virtual void ResetSequenceInfo() {
        }
        
        // <realm>Server</realm>
        // <summary>Makes the entity/weapon respawn.</summary>
        public virtual void Respawn() {
        }
        
        // <realm>Shared</realm>
        // <summary>Allows you to set the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.</summary>
        // <param name="sequence">The activity number to send to the entity. See {{Enum|ACT}} and {{ClassFunction|Entity|GetSequenceActivity}}.</param>
        public virtual void RestartGesture(float sequence) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns sequence ID corresponding to given activity id. Opposite of {{ClassFunction|Entity|GetSequenceActivity}}.</summary>
        // <param name="act">The activity ID, see {{Enum|ACT}}.</param>
        // <return>number|The sequence ID</return>
        public virtual int SelectWeightedSequence(float act) {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void SelectWeightedSequenceSeeded() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of {{ClassFunction|Entity|ResetSequence}}.</summary>
        // <param name="seq">The sequence ID returned by {{ClassFunction|Entity|LookupSequence}} or  {{ClassFunction|Entity|SelectWeightedSequence}}.</param>
        public virtual void SendViewModelMatchingSequence(float seq) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns length of currently played sequence.</summary>
        // <return>number|The length of the sequence</return>
        public virtual int SequenceDuration() {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void SetAbsVelocity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the angles of the entity.</summary>
        // <param name="angles">The new angles.</param>
        public virtual void SetAngles(Angle angles) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetAnimation() {
        }
        
        // <realm>Client</realm>
        public virtual void SetAnimTime() {
        }
        
        // <realm>Shared</realm>
        // <summary>Parents the sprite to an attachment on another model.<br/></summary>
        // <param name="ent">The entity to attach/parent to.</param>
        // <param name="attachment">The attachment ID to parent to.</param>
        public virtual void SetAttachment(Entity ent, float attachment) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the blood color this entity uses.</summary>
        // <param name="bloodColor">An integer corresponding to {{Enum|BLOOD}}.</param>
        public virtual void SetBloodColor(float bloodColor) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets an entities' bodygroup.</summary>
        // <param name="bodygroup">The id of the bodygroup you're setting.</param>
        // <param name="value">The value you're setting the bodygroup to.</param>
        public virtual void SetBodygroup(float bodygroup, float value) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetBodyGroups() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.</summary>
        // <param name="boneControllerID">The ID of the bone controller to set the value to.</param>
        // <param name="value">The value to set on the specified bone controller.</param>
        public virtual void SetBoneController(float boneControllerID, float value) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetBoneMatrix() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the bone position and angles.</summary>
        // <param name="bone">The bone ID to manipulate.</param>
        // <param name="pos">The position to set.</param>
        // <param name="ang">The angles to set.</param>
        public virtual void SetBonePosition(float bone, Vector pos, Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).</summary>
        // <param name="mins">The minimum vector of the bounds. The vector must be smaller than second argument on all axises.</param>
        // <param name="maxs">The maximum vector of the bounds. The vector must be bigger than first argument on all axises.</param>
        public virtual void SetCollisionBounds(Vector mins, Vector maxs) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).</summary>
        // <param name="vec1">The first vector of the bounds.</param>
        // <param name="vec2">The second vector of the bounds.</param>
        public virtual void SetCollisionBoundsWS(Vector vec1, Vector vec2) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the entity's collision group.</summary>
        // <param name="group">Collision group of the entity, see {{Enum|COLLISION}}.</param>
        public virtual void SetCollisionGroup(float group) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the color of an entity.</summary>
        // <param name="color">The color to set. Uses the {{Struct|Color}}.</param>
        public virtual void SetColor(table color) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the creator of the SENT.</summary>
        // <param name="ply">The creator.</param>
        public virtual void SetCreator(Player ply) {
        }
        
        // <realm>Shared</realm>
        // <summary>Marks the entity to call {{HookFunction|GM|ShouldCollide}}.</summary>
        // <param name="enable">Enable or disable the custom collision check.</param>
        public virtual void SetCustomCollisionCheck(boolean enable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the progress of the current animation to a specific value between 0 and 1.</summary>
        // <param name="value">The desired cycle value.</param>
        public virtual void SetCycle(float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="ang">The angle to write on the entity's datatable.</param>
        public virtual void SetDTAngle(float key, Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="bool">The boolean to write on the entity's metatable.</param>
        public virtual void SetDTBool(float key, boolean @bool) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="ent">The entity to write on this entity's datatable.</param>
        public virtual void SetDTEntity(float key, Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="float">The float to write on the entity's datatable.</param>
        public virtual void SetDTFloat(float key, float @float) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="integer">The integer to write on the entity's datatable.</param>
        public virtual void SetDTInt(float key, float integer) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 3.</param>
        // <param name="str">The string to write on the entity's datatable, can't be more than 512 characters per string.</param>
        public virtual void SetDTString(float key, string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="key">Goes from 0 to 63.</param>
        // <param name="vec">The vector to write on the entity's datatable.</param>
        public virtual void SetDTVector(float key, Vector vec) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetElasticity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Allows you to set the Start or End entity attachment for the rope.</summary>
        // <param name="name">The name of the variable to modify.</param>
        // <param name="entity">The entity to apply to the specific attachment.</param>
        public virtual void SetEntity(string name, Entity entity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the position an entity's eyes look toward.</summary>
        // <param name="pos">The world position the entity is looking toward.</param>
        public virtual void SetEyeTarget(Vector pos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the flex scale of the entity.</summary>
        // <param name="scale">The new flex scale to set to.</param>
        public virtual void SetFlexScale(float scale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the flex weight.</summary>
        // <param name="flex">The ID of the flex to modify weight of.</param>
        // <param name="weight">The new weight to set.</param>
        public virtual void SetFlexWeight(float flex, float weight) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.</summary>
        // <param name="friction">Friction multiplier.</param>
        public virtual void SetFriction(float friction) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the gravity multiplier of the entity.</summary>
        // <param name="gravityMultiplier">Value which specifies the gravity multiplier.</param>
        public virtual void SetGravity(float gravityMultiplier) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetGroundEntity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the health of the entity.</summary>
        // <param name="newHealth">New health value.</param>
        public virtual void SetHealth(float newHealth) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetHitboxSet() {
        }
        
        // <realm>Client</realm>
        // <summary>Enables or disable the inverse kinematic usage of this entity.</summary>
        // <param name="useIK">The state of the IK.</param>
        public virtual void SetIK(boolean useIK) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets key value for the entity.</summary>
        // <param name="key">The key.</param>
        // <param name="value">The value.</param>
        public virtual void SetKeyValue(string key, string value) {
        }
        
        // <realm>Server</realm>
        // <summary>This allows the entity to be lag compensated during {{ClassFunction|Player|LagCompensation}}.</summary>
        // <param name="enable">Whether the entity should be lag compensated or not.</param>
        public virtual void SetLagCompensated(boolean enable) {
        }
        
        // <realm>Client</realm>
        // <summary>This forces an entity to use the bone transformation behaviour from versions prior to '''14.07.08'''. This behaviour affects {{ClassFunction|Entity|EnableMatrix}} and {{ClassFunction|Entity|SetModelScale}} and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.</summary>
        // <param name="enabled">Whether the entity should use the old bone transformation behaviour or not.</param>
        public virtual void SetLegacyTransform(boolean enabled) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets angles relative to angles of {{ClassFunction|Entity|GetParent}}</summary>
        // <param name="ang">The local angle.</param>
        public virtual void SetLocalAngles(Angle ang) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetLocalAngularVelocity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets local position relative to the parented position. This is for use with {{ClassFunction|Entity|SetParent}} to offset position.</summary>
        // <param name="pos">The local position.</param>
        public virtual void SetLocalPos(Vector pos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the entity's local velocity.</summary>
        // <param name="velocity">The velocity the entity will be set with.</param>
        public virtual void SetLocalVelocity(Vector velocity) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.</summary>
        // <param name="lod">The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.</param>
        public virtual void SetLOD(float lod) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the rendering material override of the entity.</summary>
        // <param name="materialName">New material name.</param>
        public virtual void SetMaterial(string materialName) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the maximum health for entity. Note, that you can still set entity's health above this amount with {{ClassFunction|Entity|SetHealth}}.</summary>
        // <param name="maxhealth">What the max health should be.</param>
        public virtual void SetMaxHealth(float maxhealth) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the model of the entity.</summary>
        // <param name="modelName">New model value.</param>
        public virtual void SetModel(string modelName) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetModelName() {
        }
        
        // <realm>Shared</realm>
        // <summary>Scales the model of the entity.</summary>
        // <param name="scale">A float to scale the model by.</param>
        // <param name="deltaTime">Transition time of the scale change.</param>
        public virtual void SetModelScale(float scale, float deltaTime) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?</summary>
        // <param name="moveCollideType">The move collide type, see {{Enum|MOVECOLLIDE}}.</param>
        public virtual void SetMoveCollide(float moveCollideType) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetMoveParent() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the entitys movetype.</summary>
        // <param name="movetype">The new movetype, see {{Enum|MOVETYPE}}.</param>
        public virtual void SetMoveType(float movetype) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the mapping name of the entity.</summary>
        // <param name="mappingName">The name to set for the entity.</param>
        public virtual void SetName(string mappingName) {
        }
        
        // <realm>Client</realm>
        public virtual void SetNetworkAngles() {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWAngle}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedAngle(string key, Angle value) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWBool}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedBool(string key, boolean value) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWEntity}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedEntity(string key, Entity value) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWFloat}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedFloat(string key, float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWInt}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedInt(string key, float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked number at the specified index on the entity.</summary>
        // <param name="index">The index that the value is stored in.</param>
        // <param name="number">The value to network.</param>
        public virtual void SetNetworkedNumber(any index, float number) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWString}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedString(string key, string value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked variable at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedVar(string key, any value) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetNetworkedVarProxy() {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Entity|SetNWVector}} instead.}}</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNetworkedAngle(string key, Vector value) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetNetworkOrigin() {
        }
        
        // <realm>Client</realm>
        public virtual void SetNextClientThink() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets if the entity's model should render at all</summary>
        // <param name="shouldNotDraw">true disables drawing.</param>
        public virtual void SetNoDraw(boolean shouldNotDraw) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whether the entity is solid or not.</summary>
        // <param name="IsNotSolid">True will make the entity not solid, false will make it solid.</param>
        public virtual void SetNotSolid(boolean IsNotSolid) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked angle value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWAngle(string key, Angle value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked boolean value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWBool(string key, boolean value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked entity value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWEntity(string key, Entity value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked float value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWFloat(string key, float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked integer value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWInt(string key, float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked string value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set, it may only store up to 199 characters.</param>
        public virtual void SetNWString(string key, string value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a networked vector value at specified index on the entity.</summary>
        // <param name="key">The key to associate the value with.</param>
        // <param name="value">The value to set.</param>
        public virtual void SetNWVector(string key, Vector value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the "owner" of the entity, which will disable the collision and damage receiving for this entity.</summary>
        // <param name="owner">The entity to be set as owner.</param>
        public virtual void SetOwner(Entity owner) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the parent of this entity.</summary>
        // <param name="parent">The entity to parent to. Setting this to nil will clear the parent.</param>
        // <param name="attachmentId">The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.<br/><br/>.</param>
        public virtual void SetParent(Entity parent, float attachmentId) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetParentPhysNum() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whether or not the given entity is persistent. (Like using the context menu and clicking Make Persistent or Stop Persisting.)</summary>
        // <param name="persist">Whether or not the entity is persistent.</param>
        public virtual void SetPersistent(boolean persist) {
        }
        
        // <realm>Server</realm>
        public virtual void SetPhysConstraintObjects() {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the player who gets credit if this entity kills something with physics damage within the time limit.</summary>
        // <param name="ent">Player who gets the kills. Setting this to a non-player entity will not work.</param>
        // <param name="timeLimit">Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.</param>
        public virtual void SetPhysicsAttacker(Player ent, float timeLimit) {
        }
        
        // <realm>Shared</realm>
        // <summary>Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.</summary>
        // <param name="fSpeed">How fast the animation will play.</param>
        public virtual void SetPlaybackRate(float fSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Moves the entity to the specified position.</summary>
        // <param name="position">The position to move the entity to.</param>
        public virtual void SetPos(Vector position) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified pose parameter to the specified value.</summary>
        // <param name="poseName">Name of the pose parameter.</param>
        // <param name="poseValue">The value to set the pose to.</param>
        public virtual void SetPoseParameter(string poseName, float poseValue) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whether an entity should be predictable or not.</summary>
        // <param name="setPredictable">whether to make this entity predictable or not.</param>
        public virtual void SetPredictable(boolean setPredictable) {
        }
        
        // <realm>Server</realm>
        // <summary>Prevents the server from sending any further information about the entity to a player.</summary>
        // <param name="player">The player to stop networking the entity to.</param>
        // <param name="stopTransmitting">true to stop the entity from networking, false to make it network again.</param>
        public virtual void SetPreventTransmit(Player player, boolean stopTransmitting) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the bone angles. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.</summary>
        // <param name="boneid">Bone ID.</param>
        // <param name="pos">Angle to set.</param>
        public virtual void SetRagdollAng(float boneid, Angle pos) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.</summary>
        // <param name="func">The build function. This function has one argument:<br/>.</param>
        public virtual void SetRagdollBuildFunction(function func) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the bone position. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.</summary>
        // <param name="boneid">Bone ID.</param>
        // <param name="pos">Position to set.</param>
        public virtual void SetRagdollPos(float boneid, Vector pos) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the render angles of the Entity.</summary>
        // <param name="newAngles">The new render angles to be set to.</param>
        public virtual void SetRenderAngles(Angle newAngles) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the render bounds for the entity.</summary>
        // <param name="mins">The minimum corner of the bounds, relative to origin of the entity.</param>
        // <param name="maxs">The maximum corner of the bounds, relative to origin of the entity.</param>
        public virtual void SetRenderBounds(Vector mins, Vector maxs) {
        }
        
        // <realm>Client</realm>
        public virtual void SetRenderBoundsWS() {
        }
        
        // <realm>Client</realm>
        public virtual void SetRenderClipPlane() {
        }
        
        // <realm>Client</realm>
        public virtual void SetRenderClipPlaneEnabled() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets entity's render FX.</summary>
        // <param name="renderFX">The new render FX to set, see {{Enum|kRenderFx}}.</param>
        public virtual void SetRenderFX(float renderFX) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the render mode of the entity.</summary>
        // <param name="renderMode">New render mode to set, see {{Enum|RENDERMODE}}.</param>
        public virtual void SetRenderMode(float renderMode) {
        }
        
        // <realm>Client</realm>
        // <summary>Set the origin in which the Entity will be drawn from.</summary>
        // <param name="newOrigin">The new origin in world coordinates where the Entity's model will now be rendered from.</param>
        public virtual void SetRenderOrigin(Vector newOrigin) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets a save value for an entity.</summary>
        // <param name="name">Name of the save value to set.</param>
        // <param name="value">Value to set.</param>
        public virtual void SetSaveValue(string name, any value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the entity's model sequence. If the specified sequence is already active, the animation will not be restarted.</summary>
        // <param name="sequenceId">The sequence to play. If set to a string the function will automatically call {{ClassFunction|Entity|LookupSequence}} to retrieve the sequence ID as a number.</param>
        public virtual void SetSequence(float sequenceId) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetShouldPlayPickupSound() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets if entity should create a server ragdoll on death or a client one.</summary>
        // <param name="serverragdoll">Set true if ragdoll should be created on server, false if on client.</param>
        public virtual void SetShouldServerRagdoll(boolean serverragdoll) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the skin of the entity.</summary>
        // <param name="skinIndex">Index of the skin to use.</param>
        public virtual void SetSkin(float skinIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the solidity of an entity.</summary>
        // <param name="solid_type">The solid type. See the {{Enum|SOLID}}.</param>
        public virtual void SetSolid(float solid_type) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whether the entity should use a spawn effect.</summary>
        // <param name="spawnEffect">Sets if we should show a spawn effect.</param>
        public virtual void SetSpawnEffect(boolean spawnEffect) {
        }
        
        // <realm>Shared</realm>
        // <summary>Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.</summary>
        // <param name="tab">Table for the entity to use.</param>
        public virtual void SetTable(table tab) {
        }
        
        // <realm>Shared</realm>
        // <summary>When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).</summary>
        // <param name="onoff">Will set the TransmitWithParent flag on or off.</param>
        public virtual void SetTransmitWithParent(boolean onoff) {
        }
        
        // <realm>Server</realm>
        // <summary>Marks the entity as a trigger, so it will generate {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}} callbacks</summary>
        // <param name="maketrigger">Make the entity trigger or not.</param>
        public virtual void SetTrigger(boolean maketrigger) {
        }
        
        // <realm>Server</realm>
        public virtual void SetUnFreezable() {
        }
        
        // <realm>Client</realm>
        // <summary>Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales.</summary>
        public virtual void SetupBones() {
        }
        
        // <realm>Client</realm>
        public virtual void SetupPhonemeMappings() {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the use type of an entity.</summary>
        // <param name="useType">The use type to apply to the entity. See {{Enum|USE}}.</param>
        public virtual void SetUseType(float useType) {
        }
        
        // <realm>Shared</realm>
        // <summary>Allows to quickly set variable to entitys {{ClassFunction|Entity|GetTable}}.</summary>
        // <param name="name">Name of variable to set.</param>
        // <param name="value">Value to set the variable to.</param>
        public virtual void SetVar(string name, any value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets an entity's velocity with a given vector velocity.<br/></summary>
        // <param name="velocity">The new velocity to set.</param>
        public virtual void SetVelocity(Vector velocity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the model and associated weapon to this viewmodel entity.</summary>
        // <param name="viewModel">The model string to give to this viewmodel.</param>
        // <param name="weapon">The weapon entity to associate this viewmodel to.</param>
        public virtual void SetWeaponModel(string viewModel, Weapon weapon) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of skins the entity has.</summary>
        // <return>number|skinCount</return>
        public virtual int SkinCount() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Initializes the entity and starts it's networking.</summary>
        public virtual void Spawn() {
        }
        
        // <realm>Shared</realm>
        // <summary>The function seems to be broken.</summary>
        // <param name="sound">Sound to play.</param>
        // <return>number|The ID number of started sound.</return>
        public virtual int StartLoopingSound(string sound) {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void StartMotionController() {
        }
        
        // <realm>Shared</realm>
        // <summary>The function seems to be broken.</summary>
        // <param name="id">The sound ID returned by {{ClassFunction|Entity|StartLoopingSound}}.</param>
        public virtual void StopLoopingSound(float id) {
        }
        
        // <realm>Shared</realm>
        public virtual void StopMotionController() {
        }
        
        // <realm>Client</realm>
        // <summary>Stops all particle effects parented to the entity. Seems like clientside version of {{ClassFunction|Entity|StopParticles}}</summary>
        public virtual void StopParticleEmission() {
        }
        
        // <realm>Shared</realm>
        // <summary>Stops any attached to the entity engine particles using {{GlobalFunction|ParticleEffectAttach}}.</summary>
        public virtual void StopParticles() {
        }
        
        // <realm>Shared</realm>
        // <summary>Stops emitting the given sound from the entity.</summary>
        // <param name="fileName">Path to the sound file.</param>
        public virtual void StopSound(string fileName) {
        }
        
        // <realm>Server</realm>
        // <summary>Applies the specified amount of damage to the entity.</summary>
        // <param name="damageAmount">The amount of damage to be applied.</param>
        // <param name="attacker">The entity that initiated the attack that caused the damage.</param>
        // <param name="inflictor">The entity that applied the damage, eg. a weapon.</param>
        public virtual void TakeDamage(float damageAmount, Entity attacker, Entity inflictor) {
        }
        
        // <realm>Server</realm>
        // <summary>Applies the damage specified by the damage info to the entity.</summary>
        // <param name="damageInfo">The damage to apply.</param>
        public virtual void TakeDamageInfo(CTakeDamageInfo damageInfo) {
        }
        
        // <realm>Server</realm>
        // <summary>Applies physics damage to the entity</summary>
        // <param name="dmginfo">The damage to apply.</param>
        public virtual void TakePhysicsDamage(CTakeDamageInfo dmginfo) {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the phys bone for a bone</summary>
        // <param name="bone">The number of the bone.</param>
        // <return>number|The number of the phys bone</return>
        public virtual int TranslateBoneToPhysBone(float bone) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the bone number corresponding to a physics bone.</summary>
        // <param name="physNum">Number of the physics object.</param>
        // <return>number|boneNum</return>
        public virtual int TranslatePhysBoneToBone(float physNum) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Called when an entity is used. (Default, 'E' is pressed)</summary>
        // <param name="User">The player that used the entity.</param>
        public virtual void Use(Player User) {
        }
        
        // <realm>Shared</realm>
        public virtual void UseClientSideAnimation() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.</summary>
        // <return>number|view model index, ranges from 0 to 2,</return>
        public virtual int ViewModelIndex() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns true whether or not the provided entity is visible from the passed entity.</summary>
        // <param name="Entity">The Entity.</param>
        // <return>boolean|If the entity is within the PVS.</return>
        public virtual bool Visible(Entity Entity) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns whether or not the supplied vector is within the entities PVS</summary>
        // <param name="pos">The position to check for visibility.</param>
        // <return>boolean|Within PVS</return>
        public virtual bool VisibleVec(Vector pos) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an integer that represents the "water level" describing how much the entity is interacting with water.</summary>
        // <return>number|level</return>
        public virtual int WaterLevel() {
            return 1;
        }
        
        // <realm>Shared</realm>
        public virtual void Weapon_SetActivity() {
        }
        
        // <realm>Shared</realm>
        // <summary>Calls and returns {{HookFunction|WEAPON|TranslateActivity}} on the weapon the entity ( player or NPC ) carries.</summary>
        // <param name="act">The activity to translate.</param>
        // <return>number|The translated activity</return>
        public virtual int Weapon_TranslateActivity(float act) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns two vectors representing the minimum and maximum extent of the entity's bounding box.</summary>
        // <return>Vector|The minimum vector for the entity's bounding box.</return>
        public virtual Vector WorldSpaceAABB() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the center of the entity according to its collision model.</summary>
        // <return>Vector|pos</return>
        public virtual Vector WorldSpaceCenter() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a worldspace vector into a vector local to an entity</summary>
        // <param name="wpos">The world vector.</param>
        // <return>Vector|The local vector</return>
        public virtual Vector WorldToLocal(Vector wpos) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts world angles to local angles ( local to the entity )</summary>
        // <param name="ang">The world angles.</param>
        // <return>Angle|The local angles</return>
        public virtual Angle WorldToLocalAngles(Angle ang) {
            return new Angle();
        }
    }
}
