//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class IMaterial {
        
        // <realm>Shared</realm>
        // <summary>Returns the color of the specified pixel, only works for materials created from PNG files.</summary>
        // <param name="x">The X coordinate.</param>
        // <param name="y">The Y coordinate.</param>
        // <return>table|The color of the pixel as a {{Struct|Color}}.</return>
        public virtual table GetColor(float x, float y) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material value as a float, or nil if the value is not set.</summary>
        // <param name="materialFloat">The name of the material value.</param>
        // <return>number|float</return>
        public virtual int GetFloat(string materialFloat) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.</summary>
        // <param name="materialInt">The name of the material integer.</param>
        // <return>number|int</return>
        public virtual int GetInt(string materialInt) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.</summary>
        // <param name="materialMatrix">The name of the material matrix.</param>
        // <return>VMatrix|matrix</return>
        public virtual VMatrix GetMatrix(string materialMatrix) {
            return new VMatrix();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the name of the material, in most cases the path.</summary>
        // <return>string|Material name/path</return>
        public virtual string GetName() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the name of the materials shader.</summary>
        // <return>string|shaderName</return>
        public virtual string GetShader() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.</summary>
        // <param name="materialString">The name of the material string.</param>
        // <return>string|strVal</return>
        public virtual string GetString(string materialString) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material string, or nil if the value is not set.</summary>
        // <param name="materialTexture">The name of the material texture.</param>
        // <return>ITexture|texture</return>
        public virtual ITexture GetTexture(string materialTexture) {
            return new ITexture();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the specified material vector, or nil if the value is not set.</summary>
        // <param name="materialVector">The name of the material vector.</param>
        // <return>Vector|vector</return>
        public virtual Vector GetVector(string materialVector) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the height of the member texture set for $basetexture.</summary>
        // <return>number|height</return>
        public virtual int Height() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the material was not loaded successfully.</summary>
        // <return>boolean|isError</return>
        public virtual bool IsError() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing.</summary>
        public virtual void Recompute() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material float to the specified float, does nothing on a type mismatch.</summary>
        // <param name="materialFloat">The name of the material float.</param>
        // <param name="float">The new float value.</param>
        public virtual void SetFloat(string materialFloat, float @float) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material value to the specified int, does nothing on a type mismatch.</summary>
        // <param name="materialInt">The name of the material int.</param>
        // <param name="int">The new int value.</param>
        public virtual void SetInt(string materialInt, float @int) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material value to the specified matrix, does nothing on a type mismatch.</summary>
        // <param name="materialMatrix">The name of the material int.</param>
        // <param name="matrix">The new matrix.</param>
        public virtual void SetMatrix(string materialMatrix, VMatrix matrix) {
        }
        
        // <realm>Shared</realm>
        // <summary>The functionality of this function was removed due to the amount of crashes it caused.</summary>
        // <param name="shaderName">Name of the shader.</param>
        public virtual void SetShader(string shaderName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material value to the specified string, does nothing on a type mismatch.</summary>
        // <param name="materialString">The name of the material string.</param>
        // <param name="string">The new string.</param>
        public virtual void SetString(string materialString, string @string) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material texture to the specified texture, does nothing on a type mismatch.</summary>
        // <param name="materialTexture">The name of the material texture.</param>
        // <param name="texture">The new texture.</param>
        public virtual void SetTexture(string materialTexture, ITexture texture) {
        }
        
        // <realm>Shared</realm>
        // <summary>Unsets the value for the specified material value.</summary>
        // <param name="materialValueName">The name of the material value to be unset.</param>
        public virtual void SetUndefined(string materialValueName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the specified material vector to the specified vector, does nothing on a type mismatch.</summary>
        // <param name="MaterialVector">The name of the material vector.</param>
        // <param name="vec">The new vector.</param>
        public virtual void SetVector(string MaterialVector, Vector vec) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the width of the member texture set for $basetexture.</summary>
        // <return>number|width</return>
        public virtual int Width() {
            return 1;
        }
    }
}
