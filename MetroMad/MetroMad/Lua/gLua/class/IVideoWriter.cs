//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class IVideoWriter {
        
        // <realm>Client</realm>
        // <summary>Adds the current framebuffer to the video stream.</summary>
        // <param name="frameTime">Usually set to what {{GlobalFunction|FrameTime}} is, or simply 1/fps.</param>
        // <param name="downsample">If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.</param>
        public virtual void AddFrame(float frameTime, boolean downsample) {
        }
        
        // <realm>Client</realm>
        // <summary>Ends the video recording and dumps it to disk.</summary>
        public virtual void Finish() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the height of the video stream.</summary>
        // <return>number|height</return>
        public virtual int Height() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever to record sound or not.</summary>
        // <param name="record">Record.</param>
        public virtual void SetRecordSound(boolean record) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the width of the video stream.</summary>
        // <return>number|width</return>
        public virtual int Width() {
            return 1;
        }
    }
}
