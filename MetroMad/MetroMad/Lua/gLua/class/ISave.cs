//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class ISave {
        
        // <realm>Shared</realm>
        // <summary>Ends current data block started with {{ClassFunction|ISave|StartBlock}} and returns to the parent block.</summary>
        public virtual void EndBlock() {
        }
        
        // <realm>Shared</realm>
        // <summary>Starts a new block of data that you can write to inside current block. Blocks '''must''' be ended with {{ClassFunction|ISave|EndBlock}}.</summary>
        // <param name="name">Name of the new block. Used for determining which block is which, returned by {{ClassFunction|IRestore|StartBlock}} during game load.</param>
        public virtual void StartBlock(string name) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes an {{Type|Angle}} to the save object.</summary>
        // <param name="ang">The angle to write.</param>
        public virtual void WriteAngle(Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes a {{Type|boolean}} to the save object.</summary>
        // <param name="bool">The boolean to write.</param>
        public virtual void WriteBool(boolean @bool) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes an {{Type|Entity}} to the save object.</summary>
        // <param name="ent">The entity to write.</param>
        public virtual void WriteEntity(Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes a floating point {{Type|number}} to the save object.</summary>
        // <param name="float">The floating point number to write.</param>
        public virtual void WriteFloat(float @float) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes an integer {{Type|number}} to the save object.</summary>
        // <param name="int">The integer number to write.</param>
        public virtual void WriteInt(float @int) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes a {{Type|string}} to the save object.</summary>
        // <param name="str">The string to write. Maximum length is 1024.</param>
        public virtual void WriteString(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes a {{Type|Vector}} to the save object.</summary>
        // <param name="vec">The vector to write.</param>
        public virtual void WriteVector(Vector vec) {
        }
    }
}
