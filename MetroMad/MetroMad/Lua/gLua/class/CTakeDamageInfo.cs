//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CTakeDamageInfo {
        
        // <realm>Shared</realm>
        // <summary>Increases the damage by damageIncrease.</summary>
        // <param name="damageIncrease">The damage to add.</param>
        public virtual void AddDamage(float damageIncrease) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the ammo type used by the weapon that inflicted the damage.</summary>
        // <return>string|ammoType</return>
        public virtual string GetAmmoType() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the attacker for example a player that shot the weapon.</summary>
        // <return>Entity|attacker</return>
        public virtual Entity GetAttacker() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the initial unmodified damage.</summary>
        // <return>number|baseDamage</return>
        public virtual int GetBaseDamage() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the total damage.</summary>
        // <return>number|damage</return>
        public virtual int GetDamage() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a vector representing the damage force.</summary>
        // <return>Vector|The damage force</return>
        public virtual Vector GetDamageForce() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the position where the damage was or is going to be applied to.</summary>
        // <return>Vector|The damage position</return>
        public virtual Vector GetDamagePosition() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a bitflag which indicates the damage type(s) of the damage.</summary>
        // <return>number|Damage type, see {{Enum|DMG}}</return>
        public virtual int GetDamageType() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the inflictor of the damage. This is not necessarily a weapon.</summary>
        // <return>Entity|The inflictor</return>
        public virtual Entity GetInflictor() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the maximum damage.</summary>
        // <return>number|maxDmg</return>
        public virtual int GetMaxDamage() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the initial, unmodified position where the damage occured.</summary>
        // <return>Vector|position</return>
        public virtual Vector GetReportedPosition() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the damage was caused by a bullet.</summary>
        // <return>boolean|isBulletDmg</return>
        public virtual bool IsBulletDamage() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the damageinfo contains the damage type specified.</summary>
        // <param name="dmgType">{{Enum|DMG}}.</param>
        // <return>boolean|Contains specified damage type or not</return>
        public virtual bool IsDamageType(float dmgType) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the damageinfo contains explosion damage.</summary>
        // <return>boolean|isExplDamage</return>
        public virtual bool IsExplosionDamage() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the damageinfo contains fall damage.</summary>
        // <return>boolean|isFallDmg</return>
        public virtual bool IsFallDamage() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Scales the damage by the given value.</summary>
        // <param name="scale">Value to scale the damage with.</param>
        public virtual void ScaleDamage(float scale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the attacker of the damage for example a player.</summary>
        // <param name="ent">The entity to be set as the attacker.</param>
        public virtual void SetAttacker(Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the amount of damage.</summary>
        // <param name="damage">The value to set the absolute damage to.</param>
        public virtual void SetDamage(float damage) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the directional force of the damage.</summary>
        // <param name="force">The vector to set the force to.</param>
        public virtual void SetDamageForce(Vector force) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the position of where the damage gets applied to.</summary>
        // <param name="pos">The position to the the damage position to.</param>
        public virtual void SetDamagePosition(Vector pos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the damage type.</summary>
        // <param name="type">The damage type, see {{Enum|DMG}}.</param>
        public virtual void SetDamageType(float type) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the inflictor of the damage for example a weapon.</summary>
        // <param name="inflictor">The new inflictor.</param>
        public virtual void SetInflictor(Entity inflictor) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the maximum damage the object can cause.</summary>
        // <param name="maxDamage">Maximum damage value.</param>
        public virtual void SetMaxDamage(float maxDamage) {
        }
        
        // <realm>Shared</realm>
        // <summary>Subtracts the specified amount from the damage.</summary>
        // <param name="damage">Value to subtract.</param>
        public virtual void SubtractDamage(float damage) {
        }
    }
}
