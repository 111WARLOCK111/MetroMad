//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class bfread {
        
        // <realm>Client</realm>
        // <summary>Reads an returns an angle object from the bitstream.</summary>
        // <return>Angle|ang</return>
        public virtual Angle ReadAngle() {
            return new Angle();
        }
        
        // <realm>Client</realm>
        // <summary>Reads 1 bit an returns a bool representing the bit.</summary>
        // <return>boolean|bit</return>
        public virtual bool ReadBool() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.</summary>
        // <return>number|asciiVal</return>
        public virtual int ReadChar() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Reads a short representing an entity index and returns the matching entity handle.</summary>
        // <return>Entity|ent</return>
        public virtual Entity ReadEntity() {
            return new Entity();
        }
        
        // <realm>Client</realm>
        // <summary>Reads a 4 byte float from the bitstream and returns it.</summary>
        // <return>number|float</return>
        public virtual int ReadFloat() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Reads a 4 byte long from the bitstream and returns it.</summary>
        // <return>number|int</return>
        public virtual int ReadLong() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Reads a 2 byte short from the bitstream and returns it.</summary>
        // <return>number|short</return>
        public virtual int ReadShort() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Reads a null terminated string from the bitstream.</summary>
        // <return>string|str</return>
        public virtual string ReadString() {
            return "String";
        }
        
        // <realm>Client</realm>
        // <summary>Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.</summary>
        // <return>Vector|vec</return>
        public virtual Vector ReadVector() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.</summary>
        // <return>Vector|normal</return>
        public virtual Vector ReadVectorNormal() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Rewinds the bitstream so it can be read again.</summary>
        public virtual void Reset() {
        }
    }
}
