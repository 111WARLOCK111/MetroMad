//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CLuaEmitter {
        
        // <realm>Client</realm>
        // <summary>Creates a new {{Type|CLuaParticle}} with the given material and position.</summary>
        // <param name="material">The particles material.</param>
        // <param name="position">The position to spawn the particle on.</param>
        // <return>CLuaParticle|The created particle, if any.</return>
        public virtual CLuaParticle Add(string material, Vector position) {
            return new CLuaParticle();
        }
        
        // <realm>Client</realm>
        // <summary>Manually renders all particles the emitter has created.</summary>
        public virtual void Draw() {
        }
        
        // <realm>Client</realm>
        // <summary>Removes the emitter and all its particles.</summary>
        public virtual void Finish() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the amount of active particles of this emitter.</summary>
        // <return>number|The amount of active particles of this emitter</return>
        public virtual int GetNumActiveParticles() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Sets the bounding box for this emitter.</summary>
        // <param name="mins">The minimum position of the box.</param>
        // <param name="maxs">The maximum position of the box.</param>
        public virtual void SetBBox(Vector mins, Vector maxs) {
        }
        
        // <realm>Client</realm>
        // <summary>This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).</summary>
        // <param name="distanceMin">Min distance where the alpha becomes 0.</param>
        // <param name="distanceMax">Max distance where the alpha starts fading.</param>
        public virtual void SetNearClip(float distanceMin, float distanceMax) {
        }
        
        // <realm>Client</realm>
        // <summary>Prevents all particles of the emitter from automatically drawing.</summary>
        // <param name="noDraw">Whether we should draw the particles ( false ) or not ( true ).</param>
        public virtual void SetNoDraw(boolean noDraw) {
        }
        
        // <realm>Client</realm>
        // <summary>The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.</summary>
        // <param name="radius">Particle radius.</param>
        public virtual void SetParticleCullRadius(float radius) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the position of the particle emitter.</summary>
        // <param name="position">New position.</param>
        public virtual void SetPos(Vector position) {
        }
    }
}
