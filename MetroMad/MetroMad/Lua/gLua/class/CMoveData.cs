//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CMoveData {
        
        // <realm>Shared</realm>
        // <summary>Adds keys to the move data, as if player pressed them.</summary>
        // <param name="keys">Keys to add, see {{Enum|IN}}.</param>
        public virtual void AddKey(float keys) {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the aim angle. Seems to be same as {{ClassFunction|CMoveData|GetAngles}}.</summary>
        // <return>Angle|Aiming angle</return>
        public virtual Angle GetAbsMoveAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the aim angle. On client is the same as {{ClassFunction|Entity|GetAngles}}.</summary>
        // <return>Angle|Aiming angle</return>
        public virtual Angle GetAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets which buttons are down</summary>
        // <return>number|An integer representing which buttons are down, see {{Enum|IN}}</return>
        public virtual int GetButtons() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the radius that constrains the players movement.</summary>
        // <return>number|The constraint radius</return>
        public virtual int GetConstraintRadius() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the players forward speed.</summary>
        // <return>number|speed</return>
        public virtual int GetForwardSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the number passed to "impute" console command</summary>
        // <return>number|The impulse</return>
        public virtual int GetImpulseCommand() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the maximum client speed of the player</summary>
        // <return>number|The maximum client speed</return>
        public virtual int GetMaxClientSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the maximum speed of the player.</summary>
        // <return>number|The maximum speed</return>
        public virtual int GetMaxSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the angle the player is moving at. For more info, see {{ClassFunction|CMoveData|SetMoveAngles}}.</summary>
        // <return>Angle|The move direction</return>
        public virtual Angle GetMoveAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the aim angle. Seems to be same as {{ClassFunction|CMoveData|GetAngles}}.</summary>
        // <return>Angle|The aim angle</return>
        public virtual Angle GetOldAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Get which buttons were down last frame</summary>
        // <return>number|An integer representing which buttons were down</return>
        public virtual int GetOldButtons() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the player's position.</summary>
        // <return>Vector|The player's position.</return>
        public virtual Vector GetOrigin() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the strafe speed of the player.</summary>
        // <return>number|speed</return>
        public virtual int GetSideSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|GetVelocity}} )</summary>
        // <return>number|Vertical speed</return>
        public virtual int GetUpSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the players velocity.</summary>
        // <return>Vector|The players velocity</return>
        public virtual Vector GetVelocity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the key is down or not</summary>
        // <param name="key">The key to test, see {{Enum|IN}}.</param>
        // <return>boolean|Is the key down or not</return>
        public virtual bool KeyDown(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the key was pressed. If you want to check if the key is held down, try {{ClassFunction|CMoveData|KeyDown}}</summary>
        // <param name="key">The key to test, see {{Enum|IN}}.</param>
        // <return>boolean|Was the key pressed or not.</return>
        public virtual bool KeyPressed(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the key was released</summary>
        // <param name="key">A key to test, see {{Enum|IN}}.</param>
        // <return>boolean|Was the key released or not.</return>
        public virtual bool KeyReleased(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the key was down or not.<br/><br/></summary>
        // <param name="key">The key to test, seee {{Enum|IN}}.</param>
        // <return>boolean|Was the key down or not</return>
        public virtual bool KeyWasDown(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Sets absolute move angles.( ? ) Doesn't seem to do anything.</summary>
        // <param name="ang">New absolute move angles.</param>
        public virtual void SetAbsMoveAngles(Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets angles ( ? ). Doesn't seem to be doing anything.</summary>
        // <param name="ang">The angles.</param>
        public virtual void SetAngles(Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the pressed buttons on the move data</summary>
        // <param name="buttons">A number representing which buttons are down, see {{Enum|IN}}.</param>
        public virtual void SetButtons(float buttons) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the radius that constrains the players movement.<br/></summary>
        // <param name="radius">The new constraint radius.</param>
        public virtual void SetConstraintRadius(float radius) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets players forward speed.</summary>
        // <param name="speed">New forward speed.</param>
        public virtual void SetForwardSpeed(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the impulse command. Seems to be broken.</summary>
        // <param name="impulse">The impulse to set.</param>
        public virtual void SetImpulseCommand(float impulse) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the maximum player speed. Player won't be able to run or sprint faster then this value.<br/></summary>
        // <param name="maxSpeed">The new maximum speed.</param>
        public virtual void SetMaxClientSpeed(float maxSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the maximum speed of the player. This must match with {{ClassFunction|CMoveData|SetMaxClientSpeed}} both, on server and client.<br/></summary>
        // <param name="maxSpeed">The new maximum speed.</param>
        public virtual void SetMaxSpeed(float maxSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the serverside move angles. Means movement keys will act as if player was facing that direction.</summary>
        // <param name="dir">The aim direction.</param>
        public virtual void SetMoveAngles(Angle dir) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets old aim angles. ( ? ) Doesn't seem to be doing anything.</summary>
        // <param name="aimAng">The old angles.</param>
        public virtual void SetOldAngles(Angle aimAng) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.</summary>
        // <param name="buttons">A number representing which buttons were down.</param>
        public virtual void SetOldButtons(float buttons) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the players position.</summary>
        // <param name="pos">The position.</param>
        public virtual void SetOrigin(Vector pos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets players strafe speed.</summary>
        // <param name="speed">Strafe speed.</param>
        public virtual void SetSideSpeed(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|SetVelocity}} )</summary>
        // <param name="speed">Vertical speed to set.</param>
        public virtual void SetUpSpeed(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the player's velocity</summary>
        // <param name="velocity">The velocity to set.</param>
        public virtual void SetVelocity(Vector velocity) {
        }
    }
}
