//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class CNavArea {
        
        // <realm>Server</realm>
        // <summary>Returns whether this Nav Area contains given vector.</summary>
        // <param name="pos">The position to test.</param>
        // <return>boolean|True if the vector was inside and false otherwise.</return>
        public virtual bool Contains(Vector pos) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Draws this navarea on debug overlay.</summary>
        public virtual void Draw() {
        }
        
        // <realm>Server</realm>
        // <summary>Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!</summary>
        public virtual void DrawSpots() {
        }
        
        // <realm>Server</realm>
        // <summary>Returns the closest point of this Nav Area from the given position.</summary>
        // <param name="pos">The given position, can be outside of the Nav Area bounds.</param>
        // <return>Vector|The closest position on this Nav Area.</return>
        public virtual Vector GetClosestPointOnArea(Vector pos) {
            return new Vector();
        }
        
        // <realm>Server</realm>
        // <summary>Returns the position of the corner.</summary>
        // <param name="cornerid">The id of the corner, goes from 0 to 3.</param>
        // <return>Vector|The corner position.</return>
        public virtual Vector GetCorner(float cornerid) {
            return new Vector();
        }
        
        // <realm>Server</realm>
        // <summary>Returns a table of very bad hiding spots in this area</summary>
        // <return>table|A table of {{Type|Vector}}s</return>
        public virtual table GetExposedSpots() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns a table of good hiding spots in this area</summary>
        // <return>table|A table of {{Type|Vector}}s</return>
        public virtual table GetHidingSpots() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Returns this area's unique ID</summary>
        // <return>number|The ID</return>
        public virtual int GetID() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the width this Nav Area.</summary>
        public virtual int GetSizeX() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the height of this Nav Area.</summary>
        public virtual int GetSizeY() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the elevation of this Nav Area at the given position.</summary>
        // <param name="pos">The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.</param>
        // <return>number|The elevation.</return>
        public virtual int GetZ(Vector pos) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Whether this Nav Area is in the same plane as the given one.</summary>
        // <param name="navArea">The Nav Area to test.</param>
        // <return>boolean|Whether we're coplanar or not.</return>
        public virtual bool IsCoplanar(CNavArea navArea) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns if this Nav Area is flat within the tolerance of the nav_coplanar_slope_limit_displacement and nav_coplanar_slope_limit convars.</summary>
        // <return>boolean|Returns if we're mostly flat.</return>
        public virtual bool IsFlat() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns if this position overlaps the Nav Area within the given tolerance.</summary>
        // <param name="pos">The overlapping position to test.</param>
        // <param name="tolerance">The tolerance of the overlapping, set to 0 for no tolerance.</param>
        // <return>boolean|Whether the given position overlaps the Nav Area or not.</return>
        public virtual bool IsOverlapping(Vector pos, float tolerance) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns if we're shaped like a square.</summary>
        // <return>boolean|If we're a square or not.</return>
        public virtual bool IsRoughlySquare() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Whether this Nav Area is placed underwater.</summary>
        // <return>boolean|Whether we're underwater or not.</return>
        public virtual bool IsUnderwater() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns whether we can be seen from the given position.</summary>
        // <param name="pos">The position to check.</param>
        // <return>boolean|Whether we can be seen or not.</return>
        public virtual bool IsVisible(Vector pos) {
            return true;
        }
    }
}
