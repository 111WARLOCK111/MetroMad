//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class PhysObj {
        
        // <realm>Shared</realm>
        // <summary>Adds the specified velocity to the current.</summary>
        // <param name="angularVelocity">Additional velocity.</param>
        public virtual void AddAngleVelocity(Vector angularVelocity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Adds one or more bit bit flags.</summary>
        // <param name="flags">Bitflag, see {{Enum|FVPHYSICS}}.</param>
        public virtual void AddGameFlag(float flags) {
        }
        
        // <realm>Shared</realm>
        // <summary>Adds the specified velocity to the current.</summary>
        // <param name="velocity">Additional velocity.</param>
        public virtual void AddVelocity(Vector velocity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Rotates the object so that it's angles are aligned to the ones inputed.</summary>
        // <param name="from">Unknown.</param>
        // <param name="to">Unknown.</param>
        // <return>Angle|unknown</return>
        public virtual Angle AlignAngles(Angle from, Angle to) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Applies the specified force to the physics object.</summary>
        // <param name="force">The force to be applied.</param>
        public virtual void ApplyForceCenter(Vector force) {
        }
        
        // <realm>Shared</realm>
        // <summary>Applies the specified force with an offset where the force is applied from.</summary>
        // <param name="force">The force to be applied.</param>
        // <param name="offset">The offset of the force.</param>
        public virtual void ApplyForceOffset(Vector force, Vector offset) {
        }
        
        // <realm>Shared</realm>
        public virtual void CalculateForceOffset() {
        }
        
        // <realm>Shared</realm>
        public virtual void CalculateVelocityOffset() {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes one of more specified flags.</summary>
        // <param name="flags">Bitflag, see {{Enum|FVPHYSICS}}.</param>
        public virtual void ClearGameFlag(float flags) {
        }
        
        // <realm>Server</realm>
        // <summary>Allows you to move a PhysObj to a point and angle in 3D space.</summary>
        // <param name="shadowparams">The parameters for the shadow. See example code to see how its used.</param>
        public virtual void ComputeShadowControl(table shadowparams) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever the physics object should not collide with anything.</summary>
        // <param name="enable">True to enable, false to disable.</param>
        public virtual void EnableCollisions(boolean enable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever the physics object should be affected by drag.</summary>
        // <param name="enable">True to enable, false to disable.</param>
        public virtual void EnableDrag(boolean enable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever the physobject should be affected by gravity</summary>
        // <param name="enable">True to enable, false to disable.</param>
        public virtual void EnableGravity(boolean enable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever the physobject should be able to move or not.</summary>
        // <param name="enable">True to enable, false to disable.</param>
        public virtual void EnableMotion(boolean enable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the mins and max of the physics object.</summary>
        // <return>Vector|Mins</return>
        public virtual Vector GetAABB() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the angles of the physobject.</summary>
        // <return>Angle|angles</return>
        public virtual Angle GetAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the angular velocity of the object.</summary>
        // <return>Vector|velocity</return>
        public virtual Vector GetAngleVelocity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the linear and angular damping of the physics object.</summary>
        // <return>number|linearDamping</return>
        public virtual int GetDamping() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the kinetic energy of the physobject.</summary>
        // <return>number|energy</return>
        public virtual int GetEnergy() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the parent entity of the physics object.</summary>
        // <return>Entity|parent</return>
        public virtual Entity GetEntity() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the directional inertia of the physics object.</summary>
        // <return>Vector|directionalInertia</return>
        public virtual Vector GetInertia() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the inverted inertia.</summary>
        // <return>number|invMass</return>
        public virtual int GetInvInertia() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns 1 divided by the entities mass.</summary>
        // <return>number|invMass</return>
        public virtual int GetInvMass() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the mass of the physics object.</summary>
        // <return>number|The mass</return>
        public virtual int GetMass() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the mass center of the physobject.</summary>
        // <return>Vector|massCenter</return>
        public virtual Vector GetMassCenter() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the physical material of the physobject.</summary>
        // <return>string|material</return>
        public virtual string GetMaterial() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of {{Struct|MeshVertex}}s where each 3 vertexes represent a triangle.</summary>
        // <return>table|vertexes</return>
        public virtual table GetMesh() {
            return new table();
        }
        
        // <realm>Shared</realm>
        public virtual void GetMeshConvexes() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the name of the physics object.</summary>
        // <return>string|The name of the physics object.</return>
        public virtual string GetName() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the position of the physobject.</summary>
        // <return>Vector|position</return>
        public virtual Vector GetPos() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the rotation damping of the physics object.</summary>
        // <return>number|rotationDamping</return>
        public virtual int GetRotDamping() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the speed damping of the physics object.</summary>
        // <return>number|speedDamping</return>
        public virtual int GetSpeedDamping() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the stress of the entity.</summary>
        // <return>number|exertedStress</return>
        public virtual int GetStress() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the surface area of the physics object in source-unitsÂ².</summary>
        // <return>number|surfaceArea</return>
        public virtual int GetSurfaceArea() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the absolute directional velocity of the physobject.</summary>
        // <return>Vector|velocity</return>
        public virtual Vector GetVelocity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the volume in source unitsÂ³.</summary>
        // <return>number|volume</return>
        public virtual int GetVolume() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the specified flag(s) is/are set.</summary>
        // <param name="flags">Bitflag, see {{Enum|FVPHYSICS}}.</param>
        // <return>boolean|If flag was set or not</return>
        public virtual bool HasGameFlag(float flags) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the physics object is sleeping eg. not active.</summary>
        // <return>boolean|Is the physics object dormant or not</return>
        public virtual bool IsAsleep() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the entity is able to collide or not.</summary>
        // <return>boolean|isCollisionEnabled</return>
        public virtual bool IsCollisionEnabled() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the entity is affected by drag.</summary>
        // <return>boolean|dragEnabled</return>
        public virtual bool IsDragEnabled() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the entity is affected by gravity.</summary>
        // <return>boolean|gravitated</return>
        public virtual bool IsGravityEnabled() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the physics object can move itself (by velocity, acceleration)</summary>
        // <return>boolean|motionEnabled</return>
        public virtual bool IsMotionEnabled() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the entity is able to move.</summary>
        // <return>boolean|movable</return>
        public virtual bool IsMoveable() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the entity is penetrating another physics object.</summary>
        // <return>boolean|isPenetrating</return>
        public virtual bool IsPenetrating() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the physics object is valid/not NULL.</summary>
        // <return>boolean|isValid</return>
        public virtual bool IsValid() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Mapping a vector in local frame of the physics object to world frame.</summary>
        // <param name="LocalVec">A vector in the physics object's local frame.</param>
        // <return>Vector|The corresponding vector in world frame</return>
        public virtual Vector LocalToWorld(Vector LocalVec) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        public virtual Vector LocalToWorldVector() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Prints debug info about the state of the physics object.</summary>
        public virtual void OutputDebugInfo() {
        }
        
        // <realm>Shared</realm>
        // <summary>A convinience function for {{ClassFunction|Angle|RotateAroundAxis}}.</summary>
        // <param name="dir">Direction, around which we will rotate.</param>
        // <param name="ang">Amount of rotation, in degrees.</param>
        // <return>Angle|The resulting angle</return>
        public virtual Angle RotateAroundAxis(Vector dir, float ang) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        public virtual void SetAngleDragCoefficient() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the angles of the physobject.</summary>
        // <param name="angles">The new angles of the physobject.</param>
        public virtual void SetAngles(Angle angles) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the buoyancy ratio.</summary>
        // <param name="buoyancy">Buoyancy from 0 to 1.</param>
        // <return>boolean|flagSet</return>
        public virtual bool SetBuoyancyRatio(float buoyancy) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the linear and angular damping of the physics object.</summary>
        // <param name="linearDamping">Linear damping.</param>
        // <param name="angularDamping">Angular damping.</param>
        public virtual void SetDamping(float linearDamping, float angularDamping) {
        }
        
        // <realm>Shared</realm>
        // <summary>Modifies how much drag affects the object.</summary>
        // <param name="drag">The drag coefficient.</param>
        public virtual void SetDragCoefficient(float drag) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the directional inertia.</summary>
        // <param name="directionalInertia">The directional inertia of the object.<br>.</param>
        public virtual void SetInertia(Vector directionalInertia) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the mass of the physobject.</summary>
        // <param name="mass">The the mass of the physobject.</param>
        public virtual void SetMass(float mass) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the material of the physobject.</summary>
        // <param name="materialName">The name of the phys material to use. From this list: [https://developer.valvesoftware.com/wiki/Material_surface_properties Valve Developer].</param>
        public virtual void SetMaterial(string materialName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the position of the physobject.</summary>
        // <param name="position">The new position of the physobject.</param>
        public virtual void SetPos(Vector position) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the velocity of the physics object for the next iteration.</summary>
        // <param name="velocity">The new velocity of the phyiscs object.</param>
        public virtual void SetVelocity(Vector velocity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the velocity of the physics object.</summary>
        // <param name="velocity">The new velocity of the phyiscs object.</param>
        public virtual void SetVelocityInstantaneous(Vector velocity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Make the physics object sleep.</summary>
        public virtual void Sleep() {
        }
        
        // <realm>Shared</realm>
        public virtual void UpdateShadow() {
        }
        
        // <realm>Shared</realm>
        // <summary>Wakes the physics object.</summary>
        public virtual void Wake() {
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a vector to a relative to the physics object coordinate system.</summary>
        // <param name="vec">The vector in world space coordinates.</param>
        // <return>Vector|The vector local to {{ClassFunction|PhysObj|GetPos}}.</return>
        public virtual Vector WorldToLocal(Vector vec) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Rotate a vector from the local frame of the physics object to world frame.</summary>
        // <param name="LocalVec">A vector in the physics object's local frame.</param>
        // <return>Vector|The corresponding vector in world frame</return>
        public virtual Vector WorldToLocalVector(Vector LocalVec) {
            return new Vector();
        }
    }
}
