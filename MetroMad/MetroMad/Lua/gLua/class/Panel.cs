//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class Panel {
        
        // <realm>Client</realm>
        // <summary>Adds the specified object to the panel.</summary>
        // <param name="object">The panel to be added. ( Parented ) Can also be:.</param>
        // <return>Panel|New panel</return>
        public virtual Panel Add(Panel @object) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        public virtual void AddText() {
        }
        
        // <realm>Client</realm>
        // <summary>Aligns the panel on the bottom of its parent with the specified offset.</summary>
        // <param name="offset">The align offset.</param>
        public virtual void AlignBottom(float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Aligns the panel on the left of its parent with the specified offset.</summary>
        // <param name="offset">The align offset.</param>
        public virtual void AlignLeft(float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Aligns the panel on the right of its parent with the specified offset.</summary>
        // <param name="offset">The align offset.</param>
        public virtual void AlignRight(float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Aligns the panel on the top of its parent with the specified offset.</summary>
        // <param name="offset">The align offset.</param>
        public virtual void AlignTop(float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Transitions the current alpha of a panel, to the new alpha over a set period of time after a specified delay.</summary>
        // <param name="alpha">The alpha to approach.</param>
        // <param name="duration">How long time it should take to reach the alpha.</param>
        // <param name="delay">How long it should take before it starts to approach the alpha.</param>
        // <param name="finished">The function that is called when it has reached the alpha.</param>
        public virtual void AlphaTo(float alpha, float duration, float delay, function finished) {
        }
        
        // <realm>Client</realm>
        public virtual void AnimationThinkInternal() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns time when all panel animations will end.</summary>
        // <return>number|Time when all panel animations will end</return>
        public virtual int AnimTail() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void AppendText() {
        }
        
        // <realm>Client</realm>
        public virtual void ApplyGWEN() {
        }
        
        // <realm>Client</realm>
        // <summary>Centers the panel on its parent.</summary>
        public virtual void Center() {
        }
        
        // <realm>Client</realm>
        // <summary>Centers the panel horizontally with specified fraction.</summary>
        // <param name="fraction">The center fraction.</param>
        public virtual void CenterHorizontal(float fraction) {
        }
        
        // <realm>Client</realm>
        // <summary>Centers the panel vertically with specified fraction.</summary>
        // <param name="fraction">The center fraction.</param>
        public virtual void CenterVertical(float fraction) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the amount of children of the of panel.</summary>
        // <return>number|childCount</return>
        public virtual int ChildCount() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void ChildrenSize() {
        }
        
        // <realm>Client</realm>
        // <summary>Marks all of the panel's children for deletion.</summary>
        public virtual void Clear() {
        }
        
        // <realm>Client</realm>
        // <summary>Fades panels color to specified one. It won't work unless panel has SetColor function.</summary>
        // <param name="color">The color to fade to.</param>
        // <param name="length">Length of the animation.</param>
        // <param name="delay">Delay before start fading.</param>
        // <param name="callback">Function to execute when finished.</param>
        public virtual void ColorTo(table color, float length, float delay, function callback) {
        }
        
        // <realm>Client</realm>
        public virtual void Command() {
        }
        
        // <realm>Client</realm>
        public virtual void ConVarChanged() {
        }
        
        // <realm>Client</realm>
        // <summary>A think hook for [[Panel|panels]] using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.</summary>
        public virtual void ConVarNumberThink() {
        }
        
        // <realm>Client</realm>
        // <summary>A think hook for [[Panel|panels]] using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.</summary>
        public virtual void ConVarStringThink() {
        }
        
        // <realm>Client</realm>
        public virtual void CopyBase() {
        }
        
        // <realm>Client</realm>
        // <summary>Copies position and size of the panel.</summary>
        // <param name="base">The panel to copy size and position from.</param>
        public virtual void CopyBounds(Panel @base) {
        }
        
        // <realm>Client</realm>
        // <summary>Copies the height of the panel.</summary>
        // <param name="base">Panel to copy the height from.</param>
        public virtual void CopyHeight(Panel @base) {
        }
        
        // <realm>Client</realm>
        // <summary>Copies the position of the panel.</summary>
        // <param name="base">Panel to position the width from.</param>
        public virtual void CopyPos(Panel @base) {
        }
        
        // <realm>Client</realm>
        public virtual void CopySelected() {
        }
        
        // <realm>Client</realm>
        // <summary>Copies the width of the panel.</summary>
        // <param name="base">Panel to copy the width from.</param>
        public virtual void CopyWidth(Panel @base) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the cursor position relative to the top left of the panel.</summary>
        // <return>number|X coordinate of the cursor, relative to the top left of the panel.</return>
        public virtual int CursorPos() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void CutSelected() {
        }
        
        // <realm>Client</realm>
        public virtual void DisableLerp() {
        }
        
        // <realm>Client</realm>
        public virtual void Distance() {
        }
        
        // <realm>Client</realm>
        public virtual void DistanceFrom() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the dock type of the panel.</summary>
        // <param name="dockType">Dock type using {{Enum|DOCK}}.</param>
        public virtual void Dock(float dockType) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the dock margin of the panel.</summary>
        // <param name="marginLeft">The left margin to the parent.</param>
        // <param name="marginTop">The top margin to the parent.</param>
        // <param name="marginRight">The right margin to the parent.</param>
        // <param name="marginBottom">The bottom margin to the parent.</param>
        public virtual void DockMargin(float marginLeft, float marginTop, float marginRight, float marginBottom) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the dock padding of the panel.</summary>
        // <param name="paddingLeft">The left padding to the parent.</param>
        // <param name="paddingTop">The top padding to the parent.</param>
        // <param name="paddingRight">The right padding to the parent.</param>
        // <param name="paddingBottom">The bottom padding to the parent.</param>
        public virtual void DockPadding(float paddingLeft, float paddingTop, float paddingRight, float paddingBottom) {
        }
        
        // <realm>Client</realm>
        // <summary>Makes the panel "lock" the screen until it is removed.</summary>
        // <param name="doModal">Sets whenever to lock or unlock.</param>
        public virtual void DoModal(boolean doModal) {
        }
        
        // <realm>Client</realm>
        public virtual void DragClick() {
        }
        
        // <realm>Client</realm>
        public virtual void DragHover() {
        }
        
        // <realm>Client</realm>
        public virtual void DragHoverClick() {
        }
        
        // <realm>Client</realm>
        public virtual void DragHoverEnd() {
        }
        
        // <realm>Client</realm>
        public virtual void DragMousePress() {
        }
        
        // <realm>Client</realm>
        public virtual void DragMouseRelease() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawDragHover() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawFilledRect() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawOutlinedRect() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawSelections() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawTextEntryText() {
        }
        
        // <realm>Client</realm>
        public virtual void DrawTexturedRect() {
        }
        
        // <realm>Client</realm>
        // <summary>Makes this panel dropable. This is used with {{ClassFunction|Panel|Receiver}} to create drag and drop events.</summary>
        // <param name="name">Name of your dropable panel.</param>
        public virtual table Droppable(string name) {
            return new table();
        }
        
        // <realm>Client</realm>
        public virtual void DroppedOn() {
        }
        
        // <realm>Client</realm>
        public virtual void EndBoxSelection() {
        }
        
        // <realm>Client</realm>
        public virtual void Exec() {
        }
        
        // <realm>Client</realm>
        // <summary>Finds a panel in its children(and sub children) with the given name.</summary>
        // <param name="panelName">The name of the panel that should be found.</param>
        // <return>Panel|foundPanel</return>
        public virtual Panel Find(string panelName) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Focuses the next panel in the focus queue.</summary>
        public virtual void FocusNext() {
        }
        
        // <realm>Client</realm>
        // <summary>Focuses the previous panel in the focus queue.</summary>
        public virtual void FocusPrevious() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the alpha multiplier for this panel.</summary>
        // <return>number|alphaMul</return>
        public virtual int GetAlpha() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns position and size of the panel.</summary>
        // <return>number|posX</return>
        public virtual int GetBounds() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void GetCaretPos() {
        }
        
        // <realm>Client</realm>
        // <summary>Gets a child by its index.</summary>
        // <param name="childIndex">The index of the child to get.</param>
        public virtual void GetChild(float childIndex) {
        }
        
        // <realm>Client</realm>
        public virtual void GetChildPosition() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns a table with all the child panels of the panel.</summary>
        // <return>table|children</return>
        public virtual table GetChildren() {
            return new table();
        }
        
        // <realm>Client</realm>
        public virtual void GetChildrenInRect() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the class name of the panel.</summary>
        // <return>string|className</return>
        public virtual string GetClassName() {
            return "String";
        }
        
        // <realm>Client</realm>
        public virtual void GetClosestChild() {
        }
        
        // <realm>Client</realm>
        public virtual void GetContentSize() {
        }
        
        // <realm>Client</realm>
        public virtual void GetCookie() {
        }
        
        // <realm>Client</realm>
        public virtual void GetCookieName() {
        }
        
        // <realm>Client</realm>
        public virtual void GetCookieNumber() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns a dock enum for the panel's current docking type.</summary>
        // <return>number|The dock enum for the panel.</return>
        public virtual int GetDock() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void GetFont() {
        }
        
        // <realm>Client</realm>
        public virtual IMaterial GetHTMLMaterial() {
            return new IMaterial();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the internal name of the panel.</summary>
        // <return>string|name</return>
        public virtual string GetName() {
            return "String";
        }
        
        // <realm>Client</realm>
        public virtual void GetNumLines() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the parent of the panel, returns nil if there is no parent.</summary>
        // <return>Panel|parent</return>
        public virtual Panel GetParent() {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the position of the panel relative to its parent.</summary>
        // <return>number|X coordinate</return>
        public virtual int GetPos() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void GetSelectedChildren() {
        }
        
        // <realm>Client</realm>
        public virtual void GetSelectionCanvas() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the size of the panel.</summary>
        // <return>number|width</return>
        public virtual int GetSize() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void GetSkin() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the internal Lua table of the panel.</summary>
        // <return>table|panelTable</return>
        public virtual table GetTable() {
            return new table();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the height of the panel.</summary>
        // <return>number|height</return>
        public virtual int GetTall() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the panel's text (where applicable).</summary>
        // <return>string|The panel's text, truncated to 1,023 bytes.</return>
        public virtual string GetText() {
            return "String";
        }
        
        // <realm>Client</realm>
        public virtual void GetTextInset() {
        }
        
        // <realm>Client</realm>
        public virtual void GetTextSize() {
        }
        
        // <realm>Client</realm>
        public virtual void GetValidReceiverSlot() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the value the panel holds.</summary>
        // <return>any|The value the panel holds.<br /></return>
        public virtual any GetValue() {
            return new any();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the width of the panel.</summary>
        // <return>number|width</return>
        public virtual int GetWide() {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void GotoTextEnd() {
        }
        
        // <realm>Client</realm>
        public virtual void GotoTextStart() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetCheckboxText() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetControlName() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetDock() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetHorizontalAlign() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetMargin() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetMax() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetMin() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetPosition() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetSize() {
        }
        
        // <realm>Client</realm>
        public virtual void GWEN_SetText() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the panel has child panels.</summary>
        // <return>boolean|hasChilds</return>
        public virtual bool HasChildren() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the panel is focused.</summary>
        // <return>boolean|hasFocus</return>
        public virtual bool HasFocus() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the panel or any of its children(sub children and so on) has the focus.</summary>
        // <return>boolean|hasHierarchicalFocus</return>
        public virtual bool HasHierarchicalFocus() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether the panel is a descendent of the given panel.</summary>
        // <return>boolean|True if the panel is contained within parentPanel.</return>
        public virtual bool HasParent() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Makes a panel invisible.</summary>
        public virtual void Hide() {
        }
        
        // <realm>Client</realm>
        public virtual void InsertClickableTextEnd() {
        }
        
        // <realm>Client</realm>
        public virtual void InsertClickableTextStart() {
        }
        
        // <realm>Client</realm>
        public virtual void InsertColorChange() {
        }
        
        // <realm>Client</realm>
        public virtual void InsertFade() {
        }
        
        // <realm>Client</realm>
        public virtual void InvalidateChildren() {
        }
        
        // <realm>Client</realm>
        // <summary>Causes the panel to re-layout in the next frame.</summary>
        // <param name="layoutNow">If true the panel will re-layout instantly and not wait for the next frame.</param>
        public virtual void InvalidateLayout(boolean layoutNow) {
        }
        
        // <realm>Client</realm>
        public virtual void InvalidateParent() {
        }
        
        // <realm>Client</realm>
        public virtual void IsChildHovered() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether this panel is draggable ( if user is able to drag it ) or not.</summary>
        // <return>boolean|Whether this panel is draggable ( if user is able to drag it ) or not.</return>
        public virtual bool IsDraggable() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether this panel is currently being dragger or not.</summary>
        // <return>boolean|Whether this panel is currently being dragger or not.</return>
        public virtual bool IsDragging() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns true if the mouse cursor is over this panel.</summary>
        // <return>boolean|isHovered</return>
        public virtual bool IsHovered() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns true if the panel can receive keyboard input.</summary>
        // <return>boolean|keyboardInputEnabled</return>
        public virtual bool IsKeyboardInputEnabled() {
            return true;
        }
        
        // <realm>Client</realm>
        public virtual void IsLoading() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the panel is going to be deleted in the next frame.</summary>
        // <return>boolean|markedForDeletion</return>
        public virtual bool IsMarkedForDeletion() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns true if the panel can receive mouse input.</summary>
        // <return>boolean|mouseInputEnabled</return>
        public virtual bool IsMouseInputEnabled() {
            return true;
        }
        
        // <realm>Client</realm>
        public virtual void IsMultiline() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether the panel contains the given panel, recursively.</summary>
        // <return>boolean|True if the panel contains childPanel.</return>
        public virtual bool IsOurChild() {
            return true;
        }
        
        // <realm>Client</realm>
        public virtual void IsSelectable() {
        }
        
        // <realm>Client</realm>
        public virtual void IsSelected() {
        }
        
        // <realm>Client</realm>
        public virtual void IsSelectionCanvas() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the panel is valid and not marked for deletion.</summary>
        // <return>boolean|isValid</return>
        public virtual bool IsValid() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the panel is visible.</summary>
        // <return>boolean|isVisible</return>
        public virtual bool IsVisible() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Remove the focus from the panel.</summary>
        public virtual void KillFocus() {
        }
        
        // <realm>Client</realm>
        public virtual void LerpPositions() {
        }
        
        // <realm>Client</realm>
        public virtual void LoadControlsFromFile() {
        }
        
        // <realm>Client</realm>
        public virtual void LoadControlsFromString() {
        }
        
        // <realm>Client</realm>
        // <summary>Loads a .gwen file (created by GWEN Designer) and calls {{ClassFunction|Panel|LoadGWENString}} with the contents of the loaded file.</summary>
        // <param name="filename">The file to open. The path is relative to garrysmod/garrysmod/.</param>
        // <param name="path">The path used to look up the file.</param>
        public virtual void LoadGWENFile(string filename, string path) {
        }
        
        // <realm>Client</realm>
        // <summary>Loads controls for the panel from a JSON string.</summary>
        // <param name="str">JSON string containing information about controls to create.</param>
        public virtual void LoadGWENString(string str) {
        }
        
        // <realm>Client</realm>
        public virtual void LoadTGAImage() {
        }
        
        // <realm>Client</realm>
        public virtual void LocalCursorPos() {
        }
        
        // <realm>Client</realm>
        // <summary>Gets the absolute screen position of the position specified relative to the panel.</summary>
        // <param name="posX">The x coordinate of the position to translate.</param>
        // <param name="posY">The y coordinate of the position to translate.</param>
        // <return>number|Screenposition X</return>
        public virtual int LocalToScreen(float posX, float posY) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Focuses the panel and enables it to receive input.</summary>
        public virtual void MakePopup() {
        }
        
        // <realm>Client</realm>
        // <summary>Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.</summary>
        // <param name="doCapture">Set to true to enable, set to false to disable.</param>
        public virtual void MouseCapture(boolean doCapture) {
        }
        
        // <realm>Client</realm>
        // <summary>Places the panel above the passed panel with the specified offset.</summary>
        // <param name="panel">Panel to position relatively to.</param>
        // <param name="offset">The align offset.</param>
        public virtual void MoveAbove(Panel panel, float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Places the panel below the passed panel with the specified offset.</summary>
        // <param name="panel">Panel to position relatively to.</param>
        // <param name="offset">The align offset.</param>
        public virtual void MoveBelow(Panel panel, float offset) {
        }
        
        // <realm>Client</realm>
        public virtual void MoveBy() {
        }
        
        // <realm>Client</realm>
        // <summary>Places the panel left to the passed panel with the specified offset.</summary>
        // <param name="panel">Panel to position relatively to.</param>
        // <param name="offset">The align offset.</param>
        public virtual void MoveLeftOf(Panel panel, float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Places the panel right to the passed panel with the specified offset.</summary>
        // <param name="panel">Panel to position relatively to.</param>
        // <param name="offset">The align offset.</param>
        public virtual void MoveRightOf(Panel panel, float offset) {
        }
        
        // <realm>Client</realm>
        // <summary>Moves the panel to the specified position.</summary>
        // <param name="posX">The target x coordinate of the panel.</param>
        // <param name="posY">The target y coordinate of the panel.</param>
        // <param name="time">The time to perform the animation within.</param>
        // <param name="delay">The delay before the animation starts.</param>
        // <param name="ease">The easing of the start and end speed of the animation.</param>
        // <param name="callback">The function to be called once the animation finishes. Parameters are:.</param>
        public virtual void MoveTo(float posX, float posY, float time, float delay, float ease, function callback) {
        }
        
        // <realm>Client</realm>
        public virtual void MoveToAfter() {
        }
        
        // <realm>Client</realm>
        public virtual void MoveToBack() {
        }
        
        // <realm>Client</realm>
        public virtual void MoveToBefore() {
        }
        
        // <realm>Client</realm>
        public virtual void MoveToFront() {
        }
        
        // <realm>Client</realm>
        // <summary>Creates a new animation for the panel</summary>
        // <param name="length">Length of animation in seconds.</param>
        // <param name="delay">Delay between function call and animation start.</param>
        // <param name="ease">Unknown.</param>
        // <param name="callback">Function to be called when the animation ends.</param>
        // <return>table|A table containing animation info</return>
        public virtual table NewAnimation(float length, float delay, float ease, function callback) {
            return new table();
        }
        
        // <realm>Client</realm>
        public virtual void NewObject() {
        }
        
        // <realm>Client</realm>
        public virtual void NewObjectCallback() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever all child drawings should be clipped within the panels bounds.</summary>
        // <param name="clip">Whenever to clip or not.</param>
        public virtual void NoClipping(boolean clip) {
        }
        
        // <realm>Client</realm>
        public virtual void NumSelectedChildren() {
        }
        
        // <realm>Client</realm>
        public virtual void OnDrop() {
        }
        
        // <realm>Client</realm>
        // <summary>Called whenever user clicked on the panel.</summary>
        // <param name="mc">Mouse button that was clicked. See {{Enum|MOUSE}}.</param>
        public virtual void OnMousePressed(float mc) {
        }
        
        // <realm>Client</realm>
        public virtual void OnStartDragging() {
        }
        
        // <realm>Client</realm>
        public virtual void OnStopDragging() {
        }
        
        // <realm>Client</realm>
        // <summary>Instructs an HTML control to parse an online HTML script from link.</summary>
        // <param name="URL">URL to open.</param>
        public virtual void OpenURL(string URL) {
        }
        
        // <realm>Client</realm>
        // <summary>Paints a ghost copy of the panel at the given position with the given size.</summary>
        // <param name="posX">The x coordinate to draw the panel from.</param>
        // <param name="posY">The y coordinate to draw the panel from.</param>
        // <param name="width">The width of the panel image to be drawn.</param>
        // <param name="height">The height of the panel image to be drawn.</param>
        public virtual void PaintAt(float posX, float posY, float width, float height) {
        }
        
        // <realm>Client</realm>
        // <summary>Paints the panel at its current position.</summary>
        public virtual void PaintManual() {
        }
        
        // <realm>Client</realm>
        // <summary>Parents the panel to the HUD.</summary>
        public virtual void ParentToHUD() {
        }
        
        // <realm>Client</realm>
        // <summary>Only works for TextEntries.</summary>
        public virtual void Paste() {
        }
        
        // <realm>Client</realm>
        public virtual void PositionLabel() {
        }
        
        // <realm>Client</realm>
        // <summary>Sends a command to the panel.</summary>
        // <param name="messageName">The name of the message.</param>
        // <param name="valueType">The type of the variable to post.</param>
        public virtual void PostMessage(string messageName, string valueType) {
        }
        
        // <realm>Client</realm>
        public virtual void Prepare() {
        }
        
        // <realm>Client</realm>
        // <summary>Enables queue for panel animations. If enabled, all newly animations will start as soon as all current animations are ended.</summary>
        public virtual void Queue() {
        }
        
        // <realm>Client</realm>
        public virtual void RebuildSpawnIcon() {
        }
        
        // <realm>Client</realm>
        public virtual void RebuildSpawnIconEx() {
        }
        
        // <realm>Client</realm>
        // <summary>Allows the panel to receive drag and drop events.</summary>
        // <param name="name">Name of DnD panels to receive. This is set by {{ClassFunction|Panel|Droppable}}.</param>
        // <param name="func">This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:.</param>
        // <param name="menu">A table of strings that will act as a menu if drag'n'drop was performed with a right click.</param>
        public virtual void Receiver(string name, function func, table menu) {
        }
        
        // <realm>Client</realm>
        public virtual void Refresh() {
        }
        
        // <realm>Client</realm>
        // <summary>Marks a panel for deletion so it will be deleted the next frame.</summary>
        public virtual void Remove() {
        }
        
        // <realm>Client</realm>
        // <summary>Attempts to obtain focus for this panel.</summary>
        public virtual void RequestFocus() {
        }
        
        // <realm>Client</realm>
        public virtual void ResetAllFades() {
        }
        
        // <realm>Client</realm>
        // <summary>Runs JavaScript in the DHTML window.</summary>
        // <param name="JavaScript">The JavaScript that you want to run.</param>
        public virtual void RunJavascript(string JavaScript) {
        }
        
        // <realm>Client</realm>
        public virtual void SaveUndoState() {
        }
        
        // <realm>Client</realm>
        // <summary>Translates global screen coordinate to coordinates relative to the panel.</summary>
        // <param name="screenX">The x coordinate of the screen position to be translated.</param>
        // <param name="screenY">The y coordinate of the screed position be to translated.</param>
        // <return>number|Relativeposition X</return>
        public virtual int ScreenToLocal(float screenX, float screenY) {
            return 1;
        }
        
        // <realm>Client</realm>
        public virtual void SelectAll() {
        }
        
        // <realm>Client</realm>
        public virtual void SelectAllOnFocus() {
        }
        
        // <realm>Client</realm>
        public virtual void SelectAllText() {
        }
        
        // <realm>Client</realm>
        public virtual void SelectNone() {
        }
        
        // <realm>Client</realm>
        public virtual void SetAchievement() {
        }
        
        // <realm>Client</realm>
        public virtual void SetActionFunction() {
        }
        
        // <realm>Client</realm>
        // <summary>Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.</summary>
        // <param name="allowed">Set to true in order not to restrict input characters.</param>
        public virtual void SetAllowNonAsciiCharacters(boolean allowed) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the alpha multiplier for the panel</summary>
        // <param name="alpha">The alpha value in the range of 0-255.</param>
        public virtual void SetAlpha(float alpha) {
        }
        
        // <realm>Client</realm>
        // <summary>Enables or disables the ability animate panels.</summary>
        // <param name="enable">To enable or to disable.</param>
        public virtual void SetAnimationEnabled(boolean enable) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever the panel should be removed if the parent was removed.</summary>
        // <param name="autoDelete">Whenever to delete if the parent was removed or not.</param>
        public virtual void SetAutoDelete(boolean autoDelete) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the background color of the panel.</summary>
        // <param name="rorcolor">The red channel of the color, or {{GlobalFunction|Color}}.</param>
        // <param name="g">The green channel of the color.</param>
        // <param name="b">The blue channel of the color.</param>
        // <param name="a">The alpha channel of the color.</param>
        public virtual void SetBGColor(float rorcolor, float g, float b, float a) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the background color of the panel.</summary>
        // <param name="r">The red channel of the color.</param>
        // <param name="g">The green channel of the color.</param>
        // <param name="b">The blue channel of the color.</param>
        // <param name="a">The alpha channel of the color.</param>
        public virtual void SetBGColorEx(float r, float g, float b, float a) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the position of the caret in a Text Entry control</summary>
        // <param name="offset">Caret position/offset.</param>
        public virtual void SetCaretPos(float offset) {
        }
        
        // <realm>Client</realm>
        public virtual void SetCommand() {
        }
        
        // <realm>Client</realm>
        // <summary>Alignment of the contents</summary>
        // <param name="Alignment">The direction is based of the number pad, 5 is middle, 7 is top left, 6 is right middle etc.</param>
        public virtual void SetContentAlignment(float Alignment) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets this panel's convar. When the convar changes this panel will update automatically.</summary>
        // <param name="convar">The console variable to check.</param>
        public virtual void SetConVar(string convar) {
        }
        
        // <realm>Client</realm>
        public virtual void SetCookie() {
        }
        
        // <realm>Client</realm>
        public virtual void SetCookieName() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the appearance of the cursor.</summary>
        // <param name="cursor">The cursor to be set. Can be one of the following:.</param>
        public virtual void SetCursor(string cursor) {
        }
        
        // <realm>Client</realm>
        public virtual void SetDragParent() {
        }
        
        // <realm>Client</realm>
        public virtual void SetDrawLanguageIDAtLeft() {
        }
        
        // <realm>Client</realm>
        public virtual void SetDrawOnTop() {
        }
        
        // <realm>Client</realm>
        public virtual void SetDropTarget() {
        }
        
        // <realm>Client</realm>
        public virtual void SetEnabled() {
        }
        
        // <realm>Client</realm>
        // <summary>Adds a shadow falling to the bottom left corner of the panel.</summary>
        // <param name="distance">The distance of the shadow from the panel.</param>
        // <param name="Color">The color of the shadow. Uses the {{Struct|Color}}.</param>
        public virtual void SetExpensiveShadow(float distance, table Color) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the foreground color of the panel.</summary>
        // <param name="r">The red channel of the color, or {{GlobalFunction|Color}}.</param>
        // <param name="g">The green channel of the color.</param>
        // <param name="b">The blue channel of the color.</param>
        // <param name="a">The alpha channel of the color.</param>
        public virtual void SetFGColor(float r, float g, float b, float a) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the foreground color of the panel.</summary>
        // <param name="r">The red channel channel.</param>
        // <param name="g">The green channel of the color.</param>
        // <param name="b">The blue channel of the color.</param>
        // <param name="a">The alpha channel of the color.</param>
        public virtual void SetFGColorEx(float r, float g, float b, float a) {
        }
        
        // <realm>Client</realm>
        public virtual void SetFocusTopLevel() {
        }
        
        // <realm>Client</realm>
        public virtual void SetFontInternal() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the height of the panel.</summary>
        // <param name="height">The height to be set.</param>
        public virtual void SetHeight(float height) {
        }
        
        // <realm>Client</realm>
        // <summary>Allows you to set HTML code within a panel.</summary>
        // <param name="HTMLcode">The code to set.</param>
        public virtual void SetHTML(string HTMLcode) {
        }
        
        // <realm>Client</realm>
        // <summary>Enables or disables the keyboard input for the panel.</summary>
        // <param name="keyboardInput">Whether to enable or disable keyboard input.</param>
        public virtual void SetKeyBoardInputEnabled(boolean keyboardInput) {
        }
        
        // <realm>Client</realm>
        // <summary>Allows or disallows the panel to receive keyboard input.</summary>
        // <param name="enable">Should we enable or disable keyboard input for this panel.</param>
        public virtual void SetKeyboardInputEnabled(boolean enable) {
        }
        
        // <realm>Client</realm>
        public virtual void SetMinimumSize() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the clientside model used to draw the panel</summary>
        // <param name="ModelPath">The path of the model to set.</param>
        public virtual void SetModel(string ModelPath) {
        }
        
        // <realm>Client</realm>
        // <summary>Enables or disables the mouse input for the panel.</summary>
        // <param name="mouseInput">Whenever to enable or disable mouse input.</param>
        public virtual void SetMouseInputEnabled(boolean mouseInput) {
        }
        
        // <realm>Client</realm>
        public virtual void SetMultiline() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the internal name of the panel.</summary>
        // <param name="name">The new name of the panel.</param>
        public virtual void SetName(string name) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever all the default background of the panel should be drawn or ot.</summary>
        // <param name="paintBackground">Whenever to draw the background or not.</param>
        public virtual void SetPaintBackgroundEnabled(boolean paintBackground) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever all the default border of the panel should be drawn or ot.</summary>
        // <param name="paintBorder">Whenever to draw the border or not.</param>
        public virtual void SetPaintBorderEnabled(boolean paintBorder) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets if the panel was painted manually.</summary>
        // <param name="paintedManually">Whenever the panel was painted manually or not.</param>
        public virtual void SetPaintedManually(boolean paintedManually) {
        }
        
        // <realm>Client</realm>
        public virtual void SetPaintFunction() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the parent of the panel.</summary>
        // <param name="parent">The new parent of the panel.</param>
        public virtual void SetParent(Panel parent) {
        }
        
        // <realm>Client</realm>
        public virtual void SetPlayer() {
        }
        
        // <realm>Client</realm>
        public virtual void SetPopupStayAtBack() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the position of the panel.</summary>
        // <param name="posX">The x coordinate of the position.</param>
        // <param name="posY">The y coordinate of the position.</param>
        public virtual void SetPos(float posX, float posY) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets whenever the panel should be rendered in the next screenshot.</summary>
        // <param name="renderInScreenshot">Whenever to render or not.</param>
        public virtual void SetRenderInScreenshots(boolean renderInScreenshot) {
        }
        
        // <realm>Client</realm>
        public virtual void SetSelectable() {
        }
        
        // <realm>Client</realm>
        public virtual void SetSelected() {
        }
        
        // <realm>Client</realm>
        public virtual void SetSelectionCanvas() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the size of the panel.</summary>
        // <param name="width">The width of the panel.</param>
        // <param name="height">The height of the panel.</param>
        public virtual void SetSize(float width, float height) {
        }
        
        // <realm>Client</realm>
        public virtual void SetSkin() {
        }
        
        // <realm>Client</realm>
        public virtual void SetSpawnIcon() {
        }
        
        // <realm>Client</realm>
        public virtual void SetSteamID() {
        }
        
        // <realm>Client</realm>
        public virtual void SetTabPosition() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets height of a panel. An alias of {{ClassFunction|Panel|SetHeight}}.</summary>
        // <param name="height">Desired height to set.</param>
        public virtual void SetTall(float height) {
        }
        
        // <realm>Client</realm>
        // <summary>Removes the panel after given time. Note that this function will not work if [[PANEL/AnimationThink|PANEL/AnimationThink]] is defined for the panel. Disabling the animation using {{ClassFunction|Panel|SetAnimationEnabled}} will fix that.</summary>
        // <param name="delay">Delay after which the panel should be removed.</param>
        public virtual void SetTerm(float delay) {
        }
        
        // <realm>Client</realm>
        public virtual void SetText() {
        }
        
        // <realm>Client</realm>
        public virtual void SetTextInset() {
        }
        
        // <realm>Client</realm>
        public virtual void SetToFullHeight() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the string to be shown if the client hovers over the element for a second.</summary>
        // <param name="str">Text be shown.</param>
        public virtual void SetToolTip(string str) {
        }
        
        // <realm>Client</realm>
        public virtual void SetTooltip() {
        }
        
        // <realm>Client</realm>
        public virtual void SetToolTipPanel() {
        }
        
        // <realm>Client</realm>
        public virtual void SetTooltipPanel() {
        }
        
        // <realm>Client</realm>
        public virtual void SetURL() {
        }
        
        // <realm>Client</realm>
        public virtual void SetVerticalScrollbarEnabled() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the "visibility" of the panel.</summary>
        // <param name="visible">The visibility of the panel.</param>
        public virtual void SetVisible(boolean visible) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets width of a panel. An alias of {{ClassFunction|Panel|SetWidth}}.</summary>
        // <param name="width">Desired width to set.</param>
        public virtual void SetWide(float width) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the width of the panel.</summary>
        // <param name="width">The width of the panel.</param>
        public virtual void SetWidth(float width) {
        }
        
        // <realm>Client</realm>
        // <summary>This makes it so that when you're hovering over this panel you can `click` on the world. Your viewmodel will aim etc.</summary>
        public virtual void SetWorldClicker() {
        }
        
        // <realm>Client</realm>
        public virtual void SetWrap() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the panels z position which determines the rendering order.</summary>
        // <param name="zIndex">The z position of the panel.<br>.</param>
        public virtual void SetZPos(float zIndex) {
        }
        
        // <realm>Client</realm>
        // <summary>Makes a panel visible.</summary>
        public virtual void Show() {
        }
        
        // <realm>Client</realm>
        // <summary>Sizes the panel to the specified size.</summary>
        // <param name="sizeW">The target width of the panel.</param>
        // <param name="sizeH">The target height of the panel.</param>
        // <param name="time">The time to perform the animation within.</param>
        // <param name="delay">The delay before the animation starts.</param>
        // <param name="ease">Easing of the start and end speed of the animation.</param>
        // <param name="callback">Function to be called on animation finish, first parameter is the panel, second is the animation.</param>
        public virtual void SizeTo(float sizeW, float sizeH, float time, float delay, float ease, function callback) {
        }
        
        // <realm>Client</realm>
        // <summary>Resizes the panel to fit the bounds of its children.</summary>
        // <param name="sizeW">Resize with width of the panel.</param>
        // <param name="sizeH">Resize the height of the panel.</param>
        public virtual void SizeToChildren(boolean sizeW, boolean sizeH) {
        }
        
        // <realm>Client</realm>
        // <summary>Resizes the panel so that it's width and height fit all of the child controls inside.</summary>
        public virtual void SizeToContents() {
        }
        
        // <realm>Client</realm>
        // <summary>If the Panel should be re-sizing it's width so that all of it's children can fit inside. (Width wise)</summary>
        // <param name="shouldResize">If the Panel should re-size itself to fit the width of it's children.</param>
        public virtual void SizeToContentsX(boolean shouldResize) {
        }
        
        // <realm>Client</realm>
        public virtual void SizeToContentsY() {
        }
        
        // <realm>Client</realm>
        // <summary>Slides the panel in from above.</summary>
        // <param name="Length">Time to complete the animation.</param>
        public virtual void SlideDown(float Length) {
        }
        
        // <realm>Client</realm>
        // <summary>Slides the panel out to the top.</summary>
        // <param name="Length">Time to complete the animation.</param>
        public virtual void SlideUp(float Length) {
        }
        
        // <realm>Client</realm>
        public virtual void StartBoxSelection() {
        }
        
        // <realm>Client</realm>
        // <summary>Stops all panel animations</summary>
        public virtual void Stop() {
        }
        
        // <realm>Client</realm>
        public virtual void StretchBottomTo() {
        }
        
        // <realm>Client</realm>
        public virtual void StretchRightTo() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.</summary>
        // <param name="offsetLeft">The left offset to the parent.</param>
        // <param name="offsetTop">The top offset to the parent.</param>
        // <param name="offsetRight">The right offset to the parent.</param>
        // <param name="offsetBottom">The bottom offset to the parent.</param>
        public virtual void StretchToParent(float offsetLeft, float offsetTop, float offsetRight, float offsetBottom) {
        }
        
        // <realm>Client</realm>
        public virtual void ToggleSelection() {
        }
        
        // <realm>Client</realm>
        public virtual void ToggleVisible() {
        }
        
        // <realm>Client</realm>
        public virtual void Undo() {
        }
        
        // <realm>Client</realm>
        public virtual void UnselectAll() {
        }
        
        // <realm>Client</realm>
        public virtual void UpdateHTMLTexture() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns if a given panel is valid or not.</summary>
        // <return>boolean|Whether the panel is valid or not, true being it is, false being it isn't.</return>
        public virtual bool Valid() {
            return true;
        }
    }
}
