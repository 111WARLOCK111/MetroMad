//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class Angle {
        
        // <realm>Shared</realm>
        // <summary>Returns a normal vector facing in the direction that the angle points.</summary>
        // <return>Vector|The forward direction of the angle</return>
        public virtual Vector Forward() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the pitch, yaw and roll are 0 or not.</summary>
        // <return>boolean|Whether the pitch, yaw and roll are 0 or not.</return>
        public virtual bool IsZero() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Normalizes the angles by applying a module with 360 to pitch, yaw and roll.</summary>
        public virtual void Normalize() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a normal vector facing in the direction that points right relative to the angle's direction.</summary>
        // <return>Vector|The right direction of the angle</return>
        public virtual Vector Right() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Rotates the angle around the specified axis by the specified degrees.</summary>
        // <param name="axis">The axis to rotate around.</param>
        // <param name="rotation">The degrees to rotate around the specified axis.</param>
        public virtual void RotateAroundAxis(Vector axis, float rotation) {
        }
        
        // <realm>Shared</realm>
        // <summary>Copies pitch, yaw and roll from the second angle to the first.</summary>
        // <param name="originalAngle">The angle to copy the values from.</param>
        public virtual void Set(Angle originalAngle) {
        }
        
        // <realm>Shared</realm>
        // <summary>Snaps the angle to nearest interval of degrees.</summary>
        // <param name="axis">The component/axis to snap. Can be either "p"/"pitch", "y"/"yaw" or "r"/"roll".</param>
        // <param name="target">The target angle snap interval.</param>
        // <return>Angle|The snapped angle.</return>
        public virtual Angle SnapTo(string axis, float target) {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a normal vector facing in the direction that points up relative to the angle's direction.</summary>
        // <return>Vector|The up direction of the angle.</return>
        public virtual Vector Up() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Sets pitch, yaw and roll to 0.</summary>
        public virtual void Zero() {
        }
    }
}
