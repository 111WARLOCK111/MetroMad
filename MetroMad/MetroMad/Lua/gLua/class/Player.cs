//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class Player {
        
        // <realm>Shared</realm>
        // <summary>Adds an entity to the players clean up list.<br/></summary>
        // <param name="type">Cleanup type.</param>
        // <param name="ent">Entity to add.</param>
        public virtual void AddCleanup(string type, Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>Adds an entity to the total count of entities of same class.<br/></summary>
        // <param name="str">Entity type.</param>
        // <param name="ent">Entity.</param>
        public virtual void AddCount(string str, Entity ent) {
        }
        
        // <realm>Server</realm>
        // <summary>Add a certain amount to the player's death count</summary>
        // <param name="count">number of deaths to add.</param>
        public virtual void AddDeaths(float count) {
        }
        
        // <realm>Server</realm>
        // <summary>Add a certain amount to the player's frag count (or kills count)</summary>
        // <param name="count">number of frags to add.</param>
        public virtual void AddFrags(float count) {
        }
        
        // <realm>Server</realm>
        // <summary>Adds a entity to the players list of frozen objects.</summary>
        // <param name="ent">Entity.</param>
        // <param name="physobj">Physics object belonging to ent.</param>
        public virtual void AddFrozenPhysicsObject(Entity ent, PhysObj physobj) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets up the voting system for the player.</summary>
        // <param name="name">Name of the vote.</param>
        // <param name="timeout">Time until the vote expires.</param>
        // <param name="votecallback">The function to be run when the player presses 0-9 while a vote is active.</param>
        // <param name="drawcallback">Used to draw the vote panel.</param>
        public virtual void AddPlayerOption(string name, float timeout, function votecallback, function drawcallback) {
        }
        
        // <realm>Shared</realm>
        // <summary>Plays a sequence directly from a sequence number, similar to {{ClassFunction|Player|AnimRestartGesture}}. This function has the advantage to play sequences that haven't been bound to an existing {{Enum|ACT}}</summary>
        // <param name="slot">Gesture slot using {{Enum|GESTURE}}.</param>
        // <param name="sequenceId">The sequence ID to play, can be retrieved with {{ClassFunction|Entity|LookupSequence}}.</param>
        // <param name="cycle">The cycle to start the animation at, ranges from 0 to 1.</param>
        // <param name="loop">If the animation should not loop. true.</param>
        public virtual void AddVCDSequenceToGestureSlot(float slot, float sequenceId, float cycle, boolean loop) {
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the player is alive.</summary>
        // <return>boolean|Whether the player is alive</return>
        public virtual bool Alive() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.</summary>
        // <param name="canFlashlight">True allows flashlight toggling.</param>
        public virtual void AllowFlashlight(boolean canFlashlight) {
        }
        
        // <realm>Server</realm>
        // <summary>Lets the player spray his decal without delay</summary>
        // <param name="allow">Allow or disallow.</param>
        public virtual void AllowImmediateDecalPainting(boolean allow) {
        }
        
        // <realm>Shared</realm>
        // <summary>Resets player gesture in selected slot.</summary>
        // <param name="slot">Slot to reset. See the {{Enum|GESTURE}}.</param>
        public virtual void AnimResetGestureSlot(float slot) {
        }
        
        // <realm>Shared</realm>
        // <summary>Restart a gesture on a player, within a gesture slot.</summary>
        // <param name="slot">Gesture slot using {{Enum|GESTURE}}.</param>
        // <param name="activity">The activity ( see {{Enum|ACT}} ) or sequence that should be played.</param>
        // <param name="loop">If the animation should not loop. true.</param>
        public virtual void AnimRestartGesture(float slot, float activity, boolean loop) {
        }
        
        // <realm>Shared</realm>
        // <summary>Restarts the main animation on the player, has the same effect as calling {{ClassFunction|Entity|SetCycle}}( 0 ).</summary>
        public virtual void AnimRestartMainSequence() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the weight of the animation playing in the given gesture slot.</summary>
        // <param name="slot">The gesture slot. See {{Enum|GESTURE}}.</param>
        // <param name="weight">The weight this slot should be set to. Value must be ranging from 0 to 1.</param>
        public virtual void AnimSetGestureWeight(float slot, float weight) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's armor.</summary>
        // <return>number|The player's armor.</return>
        public virtual int Armor() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Bans the player from the server for x amount of minutes.</summary>
        // <param name="minutes">Duration of the ban (0 is permanent).</param>
        // <param name="reason">Reason to give the player.</param>
        public virtual void Ban(float minutes, string reason) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the player's flashlight hasn't been disabled by {{ClassFunction| Player|AllowFlashlight}}</summary>
        // <return>boolean|canFlashlight</return>
        public virtual bool CanUseFlashlight() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Prints a string to the chatbox of the client</summary>
        // <param name="message">String to be printed.</param>
        public virtual void ChatPrint(string message) {
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the limit is hit or not. If it is, it will throw a notification saying so.</summary>
        // <param name="str">Limit type.</param>
        // <return>boolean|Returns true if limit is not hit, false if it is hit</return>
        public virtual bool CheckLimit(string str) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Runs the concommand on the player</summary>
        // <param name="command">command to run.</param>
        public virtual void ConCommand(string command) {
        }
        
        // <realm>Server</realm>
        // <summary>Creates the player's ragdoll entity.<br/></summary>
        public virtual void CreateRagdoll() {
        }
        
        // <realm>Server</realm>
        // <summary>Disables a players crosshair.</summary>
        public virtual void CrosshairDisable() {
        }
        
        // <realm>Server</realm>
        // <summary>Enables crosshair of player.</summary>
        public virtual void CrosshairEnable() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the player is crouching or not</summary>
        // <return>boolean|Whether the player is crouching</return>
        public virtual bool Crouching() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's death count</summary>
        // <return>number|The number of deaths the player has had.</return>
        public virtual int Deaths() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Prints the players' name and position to the console.</summary>
        public virtual void DebugInfo() {
        }
        
        // <realm>Server</realm>
        // <summary>Detonates all tripmines belonging to the player.</summary>
        public virtual void DetonateTripmines() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sends a third person animation event to the player.</summary>
        // <param name="data">The data to send.</param>
        public virtual void DoAnimationEvent(float data) {
        }
        
        // <realm>Shared</realm>
        // <summary>Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.</summary>
        public virtual void DoAttackEvent() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sends a specified third person animation event to the player.</summary>
        // <param name="event">The event to send. See {{Enum|PLAYERANIMEVENT}}.</param>
        // <param name="data">The data to send alongside the event.</param>
        public virtual void DoCustomAnimEvent(float @event, float data) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sends a third person reload animation event to the player.</summary>
        public virtual void DoReloadEvent() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sends a third person secondary fire animation event to the player.</summary>
        public virtual void DoSecondaryAttack() {
        }
        
        // <realm>Server</realm>
        // <summary>Show/Hide the player's weapon's viewmodel.</summary>
        // <param name="draw">Should draw.</param>
        // <param name="vm">Which view model to show/hide, 0-2.</param>
        public virtual void DrawViewModel(boolean draw, float vm) {
        }
        
        // <realm>Server</realm>
        // <summary>Show/Hide the player's weapon's worldmodel.</summary>
        // <param name="draw">Should draw.</param>
        public virtual void DrawWorldModel(boolean draw) {
        }
        
        // <realm>Server</realm>
        // <summary>Drops the players' weapon of a specific class.</summary>
        // <param name="class">The class to drop.</param>
        public virtual void DropNamedWeapon(string @class) {
        }
        
        // <realm>Server</realm>
        // <summary>Drops any object the player is currently holding with either gravitygun or +Use (E key)</summary>
        public virtual void DropObject() {
        }
        
        // <realm>Server</realm>
        // <summary>Forces the player to drop the specified weapon</summary>
        // <param name="weapon">Weapon to be dropped.</param>
        public virtual void DropWeapon(Weapon weapon) {
        }
        
        // <realm>Server</realm>
        // <summary>Enters the player into specified vehicle</summary>
        // <param name="vehicle">Vehicle the player will enter.</param>
        public virtual void EnterVehicle(Vehicle vehicle) {
        }
        
        // <realm>Server</realm>
        // <summary>Equips the player with the suit item.</summary>
        public virtual void EquipSuit() {
        }
        
        // <realm>Server</realm>
        // <summary>Makes the player exit the vehicle if they're in one.</summary>
        public virtual void ExitVehicle() {
        }
        
        // <realm>Server</realm>
        // <summary>Enables/Disables the player's flashlight</summary>
        // <param name="isOn">Turns the flashlight on/off.</param>
        public virtual void Flashlight(boolean isOn) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the player's flashlight is on.</summary>
        // <return>boolean|Whether the player's flashlight is on.</return>
        public virtual bool FlashlightIsOn() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of kills a player has.</summary>
        // <return>number|kills</return>
        public virtual int Frags() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Freeze/Unfreezes the player. Frozen players cannot move, attack or turn around. Keybindings are still called. Similar to {{ClassFunction|Player|Lock}} but unfreezes the player on death.</summary>
        // <param name="state">Sets the player as frozen or unfrozen.</param>
        public virtual void Freeze(boolean state) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's active weapon.</summary>
        // <return>Weapon|The weapon the player is currently has equipped.</return>
        public virtual Weapon GetActiveWeapon() {
            return new Weapon();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the direction that the player is aiming.</summary>
        // <return>Vector|The direction vector of players aim</return>
        public virtual Vector GetAimVector() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the players' model is allowed to rotate around the pitch and roll axis.</summary>
        // <return>boolean|Allowed</return>
        public virtual bool GetAllowFullRotation() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the player is allowed to use his weapons in a vehicle or not.</summary>
        // <return>boolean|Whether the player is allowed to use his weapons in a vehicle or not.</return>
        public virtual bool GetAllowWeaponsInVehicle() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the amount of ammo the player has.</summary>
        // <param name="ammotype">The ammo type. It can be either a string or an ID.</param>
        // <return>number|The amount of ammo player has in reserve.</return>
        public virtual int GetAmmoCount(string ammotype) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets if the player will be pushed out of nocollided players.</summary>
        // <return>boolean|pushed</return>
        public virtual bool GetAvoidPlayers() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the player is able to walk using the (default) alt key.</summary>
        // <return>boolean|AbleToWalk</return>
        public virtual bool GetCanWalk() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Determines whenever the player is allowed to use the zoom functionality.</summary>
        // <return>boolean|canZoom</return>
        public virtual bool GetCanZoom() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's class id.</summary>
        // <return>number|The player's class id.</return>
        public virtual int GetClassID() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets total count of entities of same class.<br/></summary>
        // <param name="str">Entity type to get count of.</param>
        // <param name="minus">If specified, it will reduce the counter by this value. Works only serverside.</param>
        public virtual void GetCount(string str, float minus) {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the crouched walk speed.</summary>
        // <return>number|Speed</return>
        public virtual int GetCrouchedWalkSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the last command which was sent by the specified player.</summary>
        // <return>CUserCmd|Last user commands</return>
        public virtual CUserCmd GetCurrentCommand() {
            return new CUserCmd();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.</summary>
        // <return>Vector|The actual view offset.</return>
        public virtual Vector GetViewOffset() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the entity the player is currently driving.</summary>
        // <return>Entity|DriveEntity</return>
        public virtual Entity GetDrivingEntity() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns driving mode of the player. See [[Entity Driving]].</summary>
        // <return>number|The drive mode ID or 0 if player doesn't use the drive system.</return>
        public virtual int GetDrivingMode() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a player's duck speed (in seconds)</summary>
        // <return>number|duckspeed</return>
        public virtual int GetDuckSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table with information of what the player is looking at.</summary>
        // <return>table|Trace information, see {{Struct|TraceResult}}</return>
        public virtual table GetEyeTrace() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the trace according to the players view direction, ignoring their mouse.</summary>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table GetEyeTraceNoCursor() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the FOV of the player.</summary>
        // <return>number|FOV</return>
        public virtual int GetFOV() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the steam "relationship" towards the player.</summary>
        // <return>string|Should return one of four different things depending on their status on your friends list: "friend", "blocked", "none" or "requested".</return>
        public virtual string GetFriendStatus() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the hands entity of a player</summary>
        // <return>Entity|The hands entity if players has one</return>
        public virtual Entity GetHands() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        public virtual void GetHoveredWidget() {
        }
        
        // <realm>Server</realm>
        // <summary>Retrieves the value of a client-side convar</summary>
        // <param name="cVarName">The name of the.</param>
        // <return>string|cVarValue</return>
        public virtual string GetInfo(string cVarName) {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number.</summary>
        // <param name="cVarName">The name of the ConVar to query the value of.</param>
        // <param name="default">Default value if we failed to retrieve the number.</param>
        // <return>number|Clients console variable value</return>
        public virtual int GetInfoNum(string cVarName, float @default) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the jump power of the player</summary>
        // <return>number|Jump power</return>
        public virtual int GetJumpPower() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's maximum movement speed.</summary>
        // <return>number|The maximum movement speed the player can go at.</return>
        public virtual int GetMaxSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's name.</summary>
        // <return>string|The player's name.</return>
        public virtual string GetName() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the player is set not to collide with their teammates.</summary>
        // <return>boolean|noCollideWithTeammates</return>
        public virtual bool GetNoCollideWithTeammates() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the the observer mode of the player</summary>
        // <return>number|Observe mode of that player, see {{Enum|OBS_MODE}}.</return>
        public virtual int GetObserverMode() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the entity the player is currently observing.</summary>
        // <return>Entity|The entity the player is currently spectating.</return>
        public virtual Entity GetObserverTarget() {
            return new Entity();
        }
        
        // <realm>Server</realm>
        // <summary>Returns a player's PData from the server's or client's SQL database. ( sv.db and cl.db respectively ) It is not networked!</summary>
        // <param name="name">Name of the PData key.</param>
        // <param name="default">Default value if PData key doesn't exist.</param>
        // <return>any|Returned data</return>
        public virtual any GetPData(any name, any @default) {
            return new any();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.</summary>
        // <return>Vector|color</return>
        public virtual Vector GetPlayerColor() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Returns a table containing player information.</summary>
        // <return>table|A table containing player information.</return>
        public virtual table GetPlayerInfo() {
            return new table();
        }
        
        // <realm>Shared</realm>
        public virtual void GetPressedWidget() {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{ClassFunction|Player|GetViewPunchAngles}} instead.}}</summary>
        // <return>Angle|The punch angle</return>
        public virtual Angle GetPunchAngle() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns players death ragdoll</summary>
        // <return>Entity|The ragdoll</return>
        public virtual Entity GetRagdollEntity() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the render angles for the player.</summary>
        // <return>Angle|The render angles of the player. Only '''yaw''' part of the angle seems to be present.</return>
        public virtual Angle GetRenderAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of speed the player runs at.</summary>
        // <return>number|runspeed</return>
        public virtual int GetRunSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a vector of the player's current aim position.</summary>
        // <return>Vector|aim pos</return>
        public virtual Vector GetShootPos() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the maximum height player can step onto.</summary>
        // <return>number|The maximum height player can get up onto without jumping, in hammer units.</return>
        public virtual int GetStepSize() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns TOOL table of players current tool, or of the one specified.</summary>
        // <param name="mode">Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ ).</param>
        // <return>table|TOOL table</return>
        public virtual table GetTool(string mode) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a player's unduck speed (in seconds)</summary>
        // <return>number|unduck speed</return>
        public virtual int GetUnDuckSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the usergroup of the player.</summary>
        // <return>string|The user group of the player.</return>
        public virtual string GetUserGroup() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the vehicle the player is driving, returns nil if the player is not driving.</summary>
        // <return>Vehicle|vehicle</return>
        public virtual Vehicle GetVehicle() {
            return new Vehicle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).</summary>
        // <return>Entity|ent</return>
        public virtual Entity GetViewEntity() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's view model entity by the index.</summary>
        // <param name="index">optional index of the view model to return, can range from 0 to 2.</param>
        // <return>Entity|The view model entity</return>
        public virtual Entity GetViewModel(float index) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the view offset of the player which equals the difference between the players actual position and their view.</summary>
        // <return>Vector|New view offset, must be local vector to players {{ClassFunction|Entity|GetPos}}</return>
        public virtual Vector GetViewOffset() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.</summary>
        // <return>Vector|New crouching view offset, must be local vector to players {{ClassFunction|Entity|GetPos}}</return>
        public virtual Vector GetViewOffsetDucked() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns players screen punch effect angle.</summary>
        // <return>Angle|The punch angle</return>
        public virtual Angle GetViewPunchAngles() {
            return new Angle();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a player's walk speed</summary>
        // <return>number|walk speed</return>
        public virtual int GetWalkSpeed() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the weapon for the specified class</summary>
        // <param name="className">Class name of weapon.</param>
        // <return>Weapon|The weapon for the specified class.</return>
        public virtual Weapon GetWeapon(string className) {
            return new Weapon();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.</summary>
        // <return>Vector|color</return>
        public virtual Vector GetWeaponColor() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of the player's weapons.</summary>
        // <return>table|All the weapons the player currently has.</return>
        public virtual table GetWeapons() {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Give the player a weapon</summary>
        // <param name="weaponClassName">Class name of weapon to give the player.</param>
        // <return>Weapon|The weapon given to the player</return>
        public virtual Weapon Give(string weaponClassName) {
            return new Weapon();
        }
        
        // <realm>Server</realm>
        // <summary>Gives ammo to a player</summary>
        // <param name="amount">Amount of ammo.</param>
        // <param name="type">Type of ammo.</param>
        // <param name="hidePopup">Hide display popup when giving the ammo.</param>
        public virtual void GiveAmmo(float amount, string type, boolean hidePopup) {
        }
        
        // <realm>Server</realm>
        // <summary>Disables god mode on the player.</summary>
        public virtual void GodDisable() {
        }
        
        // <realm>Server</realm>
        // <summary>Enables god mode on the player.</summary>
        public virtual void GodEnable() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the player has god mode or not, contolled by {{ClassFunction|Player|GodEnable}} and {{ClassFunction|Player|GodDisable}}.</summary>
        // <return>boolean|Whether the player has god mode or not.</return>
        public virtual bool HasGodMode() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the player has the specified weapon</summary>
        // <param name="className">Class name of the weapon.</param>
        // <return>boolean|True if the player has the weapon</return>
        public virtual bool HasWeapon(string className) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the player is in a vehicle</summary>
        // <return>boolean|Whether the player is in a vehicle.</return>
        public virtual bool InVehicle() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the player's IP Address</summary>
        // <return>string|ipAddress</return>
        public virtual string IPAddress() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the player is an admin</summary>
        // <return>boolean|isAdmin</return>
        public virtual bool IsAdmin() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the player is an bot or not</summary>
        // <return>boolean|True if the player is a bot.</return>
        public virtual bool IsBot() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns true from the point when the player is sending client info but not fully in the game until they disconnect.</summary>
        // <return>boolean|isConnected</return>
        public virtual bool IsConnected() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).</summary>
        // <return>boolean|A value representing whether or not the player is 'driving' an entity.</return>
        public virtual bool IsDrivingEntity() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the players movement is currently frozen, contolled by {{ClassFunction|Player|Freeze}}.</summary>
        // <return>boolean|Whether the players movement is currently frozen or not.</return>
        public virtual bool IsFrozen() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Returns whether the player identity was confirmed by the steam network.</summary>
        // <return>boolean|isAuthenticated</return>
        public virtual bool IsFullyAuthenticated() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if a player is the host of the current session.</summary>
        // <return>boolean|isListenServerHost</return>
        public virtual bool IsListenServerHost() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether or not the player is muted locally.</summary>
        // <return>boolean|isMuted</return>
        public virtual bool IsMuted() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Naturally returns false.</summary>
        // <return>boolean|false</return>
        public virtual bool IsNPC() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks whenever the entity is a player or not.</summary>
        // <return>boolean|IsPlayer</return>
        public virtual bool IsPlayer() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the player is playing a taunt.</summary>
        // <return>boolean|Whether the player is playing a taunt.</return>
        public virtual bool IsPlayingTaunt() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the player is heard by the local player.</summary>
        // <return>boolean|isSpeaking</return>
        public virtual bool IsSpeaking() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the player is equipped with the suit item.</summary>
        // <return>boolean|Is the suit equipped or not.</return>
        public virtual bool IsSuitEquipped() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the player is a superadmin, false if not.</summary>
        // <return>boolean|isSuperAdmin</return>
        public virtual bool IsSuperAdmin() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the player is typing in his chat.</summary>
        // <return>number|isTyping</return>
        public virtual int IsTyping() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true/false if the player is in specified group or not.</summary>
        // <param name="groupname">Group to check the player for.</param>
        // <return>boolean|isInUserGroup</return>
        public virtual bool IsUserGroup(string groupname) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Naturally returns false.</summary>
        // <return>boolean|false</return>
        public virtual bool IsVehicle() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the player can be heard by the local player.</summary>
        // <return>boolean|isAudible</return>
        public virtual bool IsVoiceAudible() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Naturally returns false.</summary>
        // <return>boolean|false</return>
        public virtual bool IsWeapon() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the player is in the context menu.</summary>
        // <return>boolean|Is the player world clicking or not.</return>
        public virtual bool IsWorldClicking() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets whether a key is down</summary>
        // <param name="key">The key, see {{Enum|IN}}.</param>
        // <return>boolean|isDown</return>
        public virtual bool KeyDown(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets whether a key was down one tick ago.</summary>
        // <param name="key">The key, see {{Enum|IN}}.</param>
        // <return>boolean|Is key down</return>
        public virtual bool KeyDownLast(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets whether a key was just pressed this tick</summary>
        // <param name="key">Corresponds to an {{Enum|IN}}.</param>
        // <return>boolean|Was pressed or not</return>
        public virtual bool KeyPressed(float key) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets whether a key was just released this tick</summary>
        // <param name="key">The key, see {{Enum|IN}}.</param>
        // <return>boolean|Was released or not</return>
        public virtual bool KeyReleased(float key) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Kicks the player from the server.</summary>
        // <param name="reason">Reason to show for disconnection.</param>
        public virtual void Kick(string reason) {
        }
        
        // <realm>Server</realm>
        // <summary>Kills a player.</summary>
        public virtual void Kill() {
        }
        
        // <realm>Server</realm>
        // <summary>Kills a player without notifying the rest of the server.</summary>
        public virtual void KillSilent() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the state of the lag compensation.</summary>
        // <param name="lagCompensation">The state of the lag compensation.</param>
        public virtual void LagCompensation(boolean lagCompensation) {
        }
        
        // <realm>Server</realm>
        // <summary>Returns the hitgroup where the player was last hit.</summary>
        // <return>number|Hitgroup, see {{Enum|HITGROUP}}</return>
        public virtual int LastHitGroup() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Shows "limit hit" notification in sandbox.<br/></summary>
        // <param name="type">Type of hit limit.</param>
        public virtual void LimitHit(string type) {
        }
        
        // <realm>Server</realm>
        // <summary>Stops a player from using any inputs, such as moving and shooting. Similar to {{ClassFunction|Player|Freeze}} but the player remains frozen/locked after death.</summary>
        public virtual void Lock() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the position of a Kinect bone.</summary>
        // <param name="bone">Bone to get the position of. Must be from 0 to 19.</param>
        // <return>Vector|Position of the bone.</return>
        public virtual Vector MotionSensorPos(float bone) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the players name. Identical to {{ClassFunction|Player|Nick}} and {{ClassFunction|Player|GetName}}</summary>
        // <return>string|name</return>
        public virtual string Name() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's nickname</summary>
        // <return>string|nickname</return>
        public virtual string Nick() {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.</summary>
        // <return>number|name</return>
        public virtual int PacketLoss() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.</summary>
        // <return>number|Number of props unfrozen.</return>
        public virtual int PhysgunUnfreeze() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Makes the player pick up the entity.</summary>
        // <param name="Entity">Entity to pickup.</param>
        public virtual void PickupObject(Entity Entity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's ping to server.</summary>
        // <return>number|The player's ping.</return>
        public virtual int Ping() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Plays the correct step sound according to what the player is staying on.</summary>
        // <param name="volume">Volume for the sound, in range from 0 to 1.</param>
        public virtual void PlayStepSound(float volume) {
        }
        
        // <realm>Shared</realm>
        // <summary>Displays a message either in their chat, console, or center of the screen.</summary>
        // <param name="type">Which type of message should be sent to the player ({{Enum|HUD}}).</param>
        // <param name="message">Message to be sent to the player.</param>
        public virtual void PrintMessage(float type, string message) {
        }
        
        // <realm>Server</realm>
        // <summary>Removes all ammo from a certain player</summary>
        public virtual void RemoveAllAmmo() {
        }
        
        // <realm>Server</realm>
        // <summary>Removes all weapons and ammonition from the player.</summary>
        public virtual void RemoveAllItems() {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes the amount of of the specified ammo from the player.</summary>
        // <param name="ammoCount">The amount of ammunition to remove.</param>
        // <param name="ammoName">The name of the ammunition to remove from.</param>
        public virtual void RemoveAmmo(float ammoCount, string ammoName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Deletes a key from a player's data</summary>
        // <param name="key">Key to remove.</param>
        // <return>boolean|true is succeeded, false otherwise</return>
        public virtual bool RemovePData(any key) {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>S</summary>
        public virtual void RemoveSuit() {
        }
        
        // <realm>Shared</realm>
        // <summary>Resets both normal and duck halls to their default values.</summary>
        public virtual void ResetHull() {
        }
        
        // <realm>Server</realm>
        // <summary>Forces the player to say whatever the first argument is. Works on bots too.</summary>
        // <param name="text">The text to force the player to say.</param>
        // <param name="teamOnly">Whether to send this message to our own team only.</param>
        public virtual void Say(string text, boolean teamOnly) {
        }
        
        // <realm>Server</realm>
        // <summary>Fades the screen</summary>
        // <param name="Flags">Fade flags defined with {{Enum|SCREENFADE}}.</param>
        // <param name="Color">The color of the screenfade.</param>
        // <param name="FadeTime">Fade(in/out) effect time.</param>
        // <param name="FadeHold">Fade hold time.</param>
        public virtual void ScreenFade(float Flags, float Color, float FadeTime, float FadeHold) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the active weapon of the player by its class name.</summary>
        // <param name="className">The class name of the weapon to switch to.</param>
        public virtual void SelectWeapon(string className) {
        }
        
        // <realm>Server</realm>
        // <summary>Sends a hint to a player.<br/></summary>
        // <param name="name">Name/class/index of the hint. The text of the hint will contain this value. ( "#Hint_" .. name ).</param>
        // <param name="delay">Delay in seconds before showing the hint.</param>
        public virtual void SendHint(string name, float delay) {
        }
        
        // <realm>Client</realm>
        // <summary>Execute a Lua script on the player.</summary>
        // <param name="script">The script to execute.</param>
        public virtual void SendLua(string script) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the player active weapon.</summary>
        // <param name="weapon">The weapon to equip.</param>
        public virtual void SetActiveWeapon(Weapon weapon) {
        }
        
        // <realm>Shared</realm>
        // <summary>Set if the players' model is allowed to rotate around the pitch and roll axis.</summary>
        // <param name="Allowed">Allowed to rotate.</param>
        public virtual void SetAllowFullRotation(boolean Allowed) {
        }
        
        // <realm>Server</realm>
        // <summary>Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.</summary>
        // <param name="allow">Show we allow player to use his weapons in a vehicle or not.</param>
        public virtual void SetAllowWeaponsInVehicle(boolean allow) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the amount of of the specified ammo for the player.</summary>
        // <param name="ammoCount">The amount of ammunition to set.</param>
        // <param name="ammoType">The ammunition type. Can be either ammo ID or ammo name.</param>
        public virtual void SetAmmo(float ammoCount, float ammoType) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the player armor to the argument.</summary>
        // <param name="Amount">The amount that the player armor is going to be set to.</param>
        public virtual void SetArmor(float Amount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Pushes the player away from another player whenever it's inside the other players bounding box.</summary>
        // <param name="avoidPlayers">Avoid or not avoid.</param>
        public virtual void SetAvoidPlayers(boolean avoidPlayers) {
        }
        
        // <realm>Shared</realm>
        // <summary>Set if the player should be allowed to walk using the (default) alt key.</summary>
        // <param name="abletowalk">True allows the player to walk.</param>
        public virtual void SetCanWalk(boolean abletowalk) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets whether the player can zoom or not.</summary>
        // <param name="canZoom">Whether to make the player able or unable to zoom.</param>
        public virtual void SetCanZoom(boolean canZoom) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the player's class id.</summary>
        // <param name="classID">The class id the player is being set with.</param>
        public virtual void SetClassID(float classID) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the crouched walk speed multiplier.</summary>
        // <param name="speed">The walk speed multiplier that crouch speed should be.</param>
        public virtual void SetCrouchedWalkSpeed(float speed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.</summary>
        // <param name="viewOffset">The new view offset.</param>
        public virtual void SetCurrentViewOffset(Vector viewOffset) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets a player's death count</summary>
        // <param name="deathcount">Number of deaths (positive or negative).</param>
        public virtual void SetDeaths(float deathcount) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="drivingEntity">The entity the player should drive.</param>
        // <param name="drivingMode">The driving mode index.</param>
        public virtual void SetDrivingEntity(Entity drivingEntity, float drivingMode) {
        }
        
        // <realm>Shared</realm>
        // <summary>Applies the specified sound filter to the player.</summary>
        // <param name="soundFilter">The index of the sound filter to apply.</param>
        // <param name="fastReset">If set to true the sound filter will be removed faster.</param>
        public virtual void SetDSP(float soundFilter, boolean fastReset) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets how quickly a player ducks.</summary>
        // <param name="duckSpeed">How quickly the player will duck.</param>
        public virtual void SetDuckSpeed(float duckSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the angle of the player's view (may rotate body too if angular difference is large)</summary>
        // <param name="ang">Angle to set the view to.</param>
        public virtual void SetEyeAngles(Angle ang) {
        }
        
        // <realm>Server</realm>
        // <summary>Set a player's fov (field of view) over a certain amount of time</summary>
        // <param name="fov">the angle of perception (fov).</param>
        // <param name="time">the time it takes to transition to the fov expressed in a floating point.</param>
        public virtual void SetFOV(float fov, float time) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets a player's frags (kills)</summary>
        // <param name="fragcount">Number of frags (positive or negative).</param>
        public virtual void SetFrags(float fragcount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the hands entity of a player.</summary>
        // <param name="hands">The hands entity to set.</param>
        public virtual void SetHands(Entity hands) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetHoveredWidget() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the mins and maxs of the AABB of the players collision.</summary>
        // <param name="hullMins">The min coordinates of the hull.</param>
        // <param name="hullMaxs">The max coordinates of the hull.</param>
        public virtual void SetHull(Vector hullMins, Vector hullMaxs) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the mins and maxs of the AABB of the players collision when ducked.</summary>
        // <param name="hullMins">The min coordinates of the hull.</param>
        // <param name="hullMaxs">The max coordinates of the hull.</param>
        public virtual void SetHullDuck(Vector hullMins, Vector hullMaxs) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the jump power, eg. the velocity the player will applied to when he jumps.</summary>
        // <param name="jumpPower">The new jump velocity.</param>
        public virtual void SetJumpPower(float jumpPower) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the maximum speed which the player can move at.</summary>
        // <param name="walkSpeed">The maximum speed.</param>
        public virtual void SetMaxSpeed(float walkSpeed) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets if the player should be muted locally.</summary>
        // <param name="mute">Mute or unmute.</param>
        public virtual void SetMuted(boolean mute) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets whenever the player should not collide with their teammates.</summary>
        // <param name="shouldNotCollide">True to disable, false to enable collission.</param>
        public virtual void SetNoCollideWithTeammates(boolean shouldNotCollide) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the players visibility towards NPCs.</summary>
        // <param name="visibility">The visibility.</param>
        public virtual void SetNoTarget(boolean visibility) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the players observer mode.</summary>
        // <param name="observeMode">Observe mode using {{Enum|OBS_MODE}}.</param>
        public virtual void SetObserverMode(float observeMode) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets a player's PData from the server's or client's SQL database. ( sv.db and cl.db respectively ) It is not networked!</summary>
        // <param name="key">Name of the PData key.</param>
        // <param name="value">Value to write to the key.</param>
        // <return>boolean|Whether the operation was successful or not</return>
        public virtual bool SetPData(any key, any value) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.</summary>
        // <param name="Color">This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.</param>
        public virtual void SetPlayerColor(Vector Color) {
        }
        
        // <realm>Shared</realm>
        public virtual void SetPressedWidget() {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Validate}}</summary>
        // <param name="ang">The new render angles to set.</param>
        public virtual void SetRenderAngles(Angle ang) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the run speed eg. the speed when sprinting.</summary>
        // <param name="runSpeed">The new run speed.</param>
        public virtual void SetRunSpeed(float runSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the maximum height a player can step onto without jumping.</summary>
        // <param name="stepHeight">The new maximum height the player can step onto without jumping.</param>
        public virtual void SetStepSize(float stepHeight) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets whenever to suppress the pickup notification for the player.</summary>
        // <param name="doSuppress">Whenever to suppress the notice or not.</param>
        public virtual void SetSuppressPickupNotices(boolean doSuppress) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the player to the chosen team.</summary>
        // <param name="Team">The team that the player is being set to.</param>
        public virtual void SetTeam(float Team) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets how quickly a player un-ducks</summary>
        // <param name="UnDuckSpeed">How quickly the player will un-duck.</param>
        public virtual void SetUnDuckSpeed(float UnDuckSpeed) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets up the players view model hands. Calls {{HookFunction|GM|PlayerSetHandsModel}} to set the model of the hands.</summary>
        // <param name="ent">If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.</param>
        public virtual void SetupHands(Entity ent) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the usergroup of the player.</summary>
        // <param name="groupName">The user group of the player.</param>
        public virtual void SetUserGroup(string groupName) {
        }
        
        // <realm>Server</realm>
        // <summary>Attaches the players view to the position and angles of the specified entity.</summary>
        // <param name="viewEntity">The entity to attach the player view to.</param>
        public virtual void SetViewEntity(Entity viewEntity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the '''desired''' view offset which equals the difference between the players actual position and their view when standing.</summary>
        // <param name="viewOffset">The new desired view offset when standing.</param>
        public virtual void SetViewOffset(Vector viewOffset) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the '''desired''' view offset which equals the difference between the players actual position and their view when crouching.</summary>
        // <param name="viewOffset">The new desired view offset when crouching.</param>
        public virtual void SetViewOffsetDucked(Vector viewOffset) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets client's view punch. See {{ClassFunction|Player|ViewPunch}}</summary>
        // <param name="punchAngle">The angle to set.</param>
        public virtual void SetViewPunchAngles(Angle punchAngle) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the walk speed eg. the speed when normally walking.</summary>
        // <param name="walkSpeed">The new walk speed.</param>
        public virtual void SetWalkSpeed(float walkSpeed) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.</summary>
        // <param name="Color">This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.</param>
        public virtual void SetWeaponColor(Vector Color) {
        }
        
        // <realm>Server</realm>
        // <summary>Polls the engine to request if the player should be drawn at the time the function is called.</summary>
        // <return>boolean|shouldDraw</return>
        public virtual bool ShouldDrawLocalPlayer() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Sets whether the player's current weapon should drop on death.</summary>
        // <param name="drop">Whether to drop the player's current weapon or not.</param>
        public virtual void ShouldDropWeapon(boolean drop) {
        }
        
        // <realm>Client</realm>
        // <summary>Opens the player steam profile page in the steam overlay browser.</summary>
        public virtual void ShowProfile() {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the spectate mode of the player.</summary>
        // <param name="spectateMode">Spectate mode, see {{Enum|OBS_MODE}}.</param>
        public virtual void Spectate(float spectateMode) {
        }
        
        // <realm>Server</realm>
        // <summary>Makes the player spectate the entity</summary>
        // <param name="entity">Entity to spectate.</param>
        public virtual void SpectateEntity(Entity entity) {
        }
        
        // <realm>Server</realm>
        // <summary>Makes a player spray their decal.</summary>
        // <param name="sprayOrigin">The location to spray from.</param>
        // <param name="sprayEndPos">The location to spray to.</param>
        public virtual void SprayDecal(Vector sprayOrigin, Vector sprayEndPos) {
        }
        
        // <realm>Server</realm>
        // <summary>Disables the sprint on the player. Not working! Use {{ClassFunction|Player|SetRunSpeed}} instead.</summary>
        public virtual void SprintDisable() {
        }
        
        // <realm>Server</realm>
        // <summary>Enables the sprint on the player. Not working! Use {{ClassFunction|Player|SetRunSpeed}} instead.</summary>
        public virtual void SprintEnable() {
        }
        
        // <realm>Shared</realm>
        public virtual void StartSprinting() {
        }
        
        // <realm>Shared</realm>
        public virtual void StartWalking() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player SteamID. In Singleplayer this will be STEAM_0:0:0.</summary>
        // <return>string|SteamID</return>
        public virtual string SteamID() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's 64bit SteamID aka CommunityID.</summary>
        // <return>string|Player's 64bit SteamID aka CommunityID.</return>
        public virtual string SteamID64() {
            return "String";
        }
        
        // <realm>Shared</realm>
        public virtual void StopSprinting() {
        }
        
        // <realm>Shared</realm>
        public virtual void StopWalking() {
        }
        
        // <realm>Server</realm>
        // <summary>Turns off the zoom mode of the player.</summary>
        public virtual void StopZooming() {
        }
        
        // <realm>Server</realm>
        // <summary>Removes all ammo from the player.</summary>
        public virtual void StripAmmo() {
        }
        
        // <realm>Server</realm>
        // <summary>Removes the specified weapon class from a certain player</summary>
        // <param name="weapon">The weapon class to remove.</param>
        public virtual void StripWeapon(string weapon) {
        }
        
        // <realm>Server</realm>
        // <summary>Removes all weapons from a certain player</summary>
        public virtual void StripWeapons() {
        }
        
        // <realm>Server</realm>
        // <summary>Prevents a hint from showing up.<br/></summary>
        // <param name="name">Hint name/class/index to prevent from showing up.</param>
        public virtual void SuppressHint(string name) {
        }
        
        // <realm>Server</realm>
        // <summary>Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.</summary>
        public virtual void SwitchToDefaultWeapon() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's team ID</summary>
        // <return>number|teamID</return>
        public virtual int Team() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the time in second since the player connected.</summary>
        // <return>number|connectTime</return>
        public virtual int TimeConnected() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Performs a trace hull and applies damage to the entities hit, returns the first entity hit.</summary>
        // <param name="startPos">The start position of the hull trace.</param>
        // <param name="endPos">The end position of the hull trace.</param>
        // <param name="mins">The minimum coordinates of the hull.</param>
        // <param name="maxs">The maximum coordinates of the hull.</param>
        // <param name="damage">The damage to be applied.</param>
        // <param name="damageFlags">Bitflag specifying the damage type, see {{Enum|DMG}}.</param>
        // <param name="damageForce">The force to be applied to the hit object.</param>
        // <param name="damageAllNPCs">Whether to apply damage to all hit NPCs or not.</param>
        // <return>Entity|The hit entity</return>
        public virtual Entity TraceHullAttack(Vector startPos, Vector endPos, Vector mins, Vector maxs, float damage, Vector damageFlags, float damageForce, boolean damageAllNPCs) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Translates {{Enum|ACT}} according to the holdtype of players currently held weapon.</summary>
        // <param name="act">The initial {{Enum|ACT}}.</param>
        // <return>number|Translated {{Enum|ACT}}</return>
        public virtual int TranslateWeaponActivity(float act) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.</summary>
        public virtual void UnfreezePhysicsObjects() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's UniqueID, a 32 bit integer suitable for uniquely identifying the player when a string is inappropriate - eg in a database primary key.</summary>
        // <return>number|Unique ID</return>
        public virtual int UniqueID() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.</summary>
        // <param name="key">Unique table key.</param>
        // <return>table|The table that contains any info you have put in it.</return>
        public virtual table UniqueIDTable(any key) {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Unlocks the player movement if locked previously. <br /></summary>
        public virtual void UnLock() {
        }
        
        // <realm>Server</realm>
        // <summary>Stops the player from spectating another entity.</summary>
        public virtual void UnSpectate() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the player's ID.</summary>
        // <return>number|The player's user ID</return>
        public virtual int UserID() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Simulates a push on the client's screen.</summary>
        // <param name="PunchAngle">The angle in which to push the player's screen.</param>
        public virtual void ViewPunch(Angle PunchAngle) {
        }
        
        // <realm>Shared</realm>
        // <summary>Resets the player's view punch ( {{ClassFunction|Player|ViewPunch}} ) effect back to normal.</summary>
        public virtual void ViewPunchReset() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the players voice volume as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.</summary>
        // <return>number|The voice volume.</return>
        public virtual int VoiceVolume() {
            return 1;
        }
    }
}
