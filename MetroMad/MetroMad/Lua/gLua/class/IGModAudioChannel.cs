//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class IGModAudioChannel {
        
        // <realm>Client</realm>
        // <summary>Enables or disables looping of audio channel, requires noblock flag.</summary>
        // <param name="enable">Enable or disable looping of this audio channel.</param>
        public virtual void EnableLooping(boolean enable) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the FFT table of the sound channel. This is what used to make visualization for the played sound.</summary>
        // <param name="tbl">The table to output the values into.</param>
        // <param name="type">The amount of levels to output. See {{Enum|FFT}}.</param>
        // <return>number|The amount of levels that have been put into the table</return>
        public virtual int FFT(table tbl, float type) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns 3D cone of the sound channel. See {{ClassFunction|IGModAudioChannel|Set3DCone}}.</summary>
        // <return>number|The angle of the inside projection cone in degrees.</return>
        public virtual int Get3DCone() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns 3D fade distances of a sound channel.</summary>
        // <return>number|The minimum distance. The channel's volume is at maximum when the listener is within this distance</return>
        public virtual int Get3DFadeDistance() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Retrieves the number of bits per sample of the sound channel.</summary>
        // <return>number|Number of bits per sample, or 0 if unknown.</return>
        public virtual int GetBitsPerSample() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the filename for the sound channel.</summary>
        // <return>string|The file name. This will not be always what you have put into the {{LibraryFunction|sound|PlayURL}} as first argument.</return>
        public virtual string GetFileName() {
            return "String";
        }
        
        // <realm>Client</realm>
        // <summary>Returns the length of sound played by the sound channel.</summary>
        // <return>number|The length of the sound. This value seems to be less then 0 for continuous radio streams.</return>
        public virtual int GetLength() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the right and left levels of sound played by the sound channel.</summary>
        // <return>number|The left sound level. The value is between 0 and 1.</return>
        public virtual int GetLevel() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the playback rate of the sound channel.</summary>
        // <return>number|The current playback rate of the sound channel</return>
        public virtual int GetPlaybackRate() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns position of the sound channel</summary>
        // <return>Vector|The position of the sound channel, previously set by {{ClassFunction|IGModAudioChannel|SetPos}}</return>
        public virtual Vector GetPos() {
            return new Vector();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the sample rate for currently playing sound.</summary>
        // <return>number|The sample rate in MHz. This should always be 44100.</return>
        public virtual int GetSamplingRate() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the state of a sound channel</summary>
        // <return>number|The state of the sound channel, see {{Enum|GMOD_CHANNEL}}</return>
        public virtual int GetState() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns the current time of the sound channel</summary>
        // <return>number|The current time of the stream</return>
        public virtual int GetTime() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns volume of a sound channel</summary>
        // <return>number|The volume of the sound channel</return>
        public virtual int GetVolume() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the sound channel is in 3D mode or not.</summary>
        // <return>boolean|Is 3D or not.</return>
        public virtual bool Is3D() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whether the audio stream is block streamed or not.</summary>
        // <return>boolean|Is the audio stream block streamed or not.</return>
        public virtual bool IsBlockStreamed() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the sound channel is looping or not.</summary>
        // <return>boolean|Is looping or not.</return>
        public virtual bool IsLooping() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the sound channel is streamed from the Internet or not.</summary>
        // <return>boolean|Is online or not.</return>
        public virtual bool IsOnline() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns if the sound channel is valid or not.</summary>
        // <return>boolean|Is the sound channel valid or not</return>
        public virtual bool IsValid() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Pauses the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}}</summary>
        public virtual void Pause() {
        }
        
        // <realm>Client</realm>
        // <summary>Starts playing the stream.</summary>
        public virtual void Play() {
        }
        
        // <realm>Client</realm>
        // <summary>Sets 3D cone of the sound channel.</summary>
        // <param name="innerAngle">The angle of the inside projection cone in degrees.<br/><br/>.</param>
        // <param name="outerAngle">The angle of the outside projection cone in degrees.<br/><br/>.</param>
        // <param name="outerVolume">The delta-volume outside the outer projection cone.<br/><br/>.</param>
        public virtual void Set3DCone(float innerAngle, float outerAngle, float outerVolume) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets 3D fade distances of a sound channel.</summary>
        // <param name="min">The minimum distance. The channel's volume is at maximum when the listener is within this distance.<br/><br/>.</param>
        // <param name="max">The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.<br/><br/>.</param>
        public virtual void Set3DFadeDistance(float min, float max) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the playback rate of the sound channel. May not work with high values for radio streams.</summary>
        // <param name="rate">Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.</param>
        public virtual void SetPlaybackRate(float rate) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets position of sound channel in case the sound channel has a 3d option set.</summary>
        // <param name="pos">The position to put the sound into.</param>
        // <param name="dir">The direction of the sound.</param>
        public virtual void SetPos(Vector pos, Vector dir) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.</summary>
        // <param name="secs">The time to set the stream to, in seconds.</param>
        public virtual void SetTime(float secs) {
        }
        
        // <realm>Client</realm>
        // <summary>Sets the volume of a sound channel</summary>
        // <param name="volume">Volume to set, a number between 0 and 1.</param>
        public virtual void SetVolume(float volume) {
        }
        
        // <realm>Client</realm>
        // <summary>Stop the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}}</summary>
        public virtual void Stop() {
        }
    }
}
