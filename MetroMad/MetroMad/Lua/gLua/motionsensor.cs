//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class motionsensor {
        
        // <realm>Shared</realm>
        public static void BuildSkeleton() {
        }
        
        // <realm>Shared</realm>
        // <param name="ent">Entity to choose builder for.</param>
        public static void ChooseBuilderFromEntity(Entity ent) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the depth map material.</summary>
        public static void GetColourMaterial() {
        }
        
        // <realm>Client</realm>
        public static void GetSkeleton() {
        }
        
        // <realm>Client</realm>
        // <summary>Return whether a kinect is connected - and active (ie - Start has been called).</summary>
        public static void IsActive() {
        }
        
        // <realm>Client</realm>
        // <summary>Returns true if we have detected that there's a kinect connected to the PC</summary>
        public static void IsAvailable() {
        }
        
        // <realm>Shared</realm>
        public static void ProcessAngle() {
        }
        
        // <realm>Shared</realm>
        public static void ProcessAnglesTable() {
        }
        
        // <realm>Shared</realm>
        public static void ProcessPositionTable() {
        }
        
        // <realm>Client</realm>
        // <summary>This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.</summary>
        public static void Start() {
        }
        
        // <realm>Client</realm>
        // <summary>Stops the motion capture.</summary>
        public static void Stop() {
        }
    }
}
