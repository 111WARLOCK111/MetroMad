//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class @string {
        
        // <realm>Shared</realm>
        // <summary>Returns the given string's characters in their numeric ASCII representation.</summary>
        // <param name="string">The string to get the chars from.</param>
        // <param name="startPos">The first character of the string to get the byte of.</param>
        // <param name="endPos">The last character of the string to get the byte of.</param>
        public static void @byte(string @string, float startPos, float endPos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Takes the given numerical bytes and converts them to a string.</summary>
        // <param name="bytes">The bytes to create the string from.</param>
        public static void @char(vararg bytes) {
        }
        
        // <realm>Shared</realm>
        // <summary>Inserts commas for every third digit.</summary>
        // <param name="InputNumber">The input number to commafy.</param>
        public static void Comma(float InputNumber) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the binary bytecode of function.</summary>
        // <param name="func">The function to get the bytecode of.</param>
        // <param name="stripDebugInfo">True to strip the debug data, false to keep it.</param>
        public static void dump(function func, boolean stripDebugInfo) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns weather the varg matches the end of the string provided.</summary>
        // <param name="str">The string that your looking to find.</param>
        // <param name="varg">The argument you intend to use to compared to.</param>
        public static void EndsWith(string str, string varg) {
        }
        
        // <realm>Shared</realm>
        // <summary>Splits a string up wherever it finds the given separator.</summary>
        // <param name="separator">The string will be separated wherever this sequence is found.</param>
        // <param name="str">The string to split up.</param>
        // <param name="use_patterns">Set this to true if your separator is a pattern.</param>
        public static void Explode(string separator, string str, boolean use_patterns) {
        }
        
        // <realm>Shared</realm>
        // <summary>Attempts to find the specified substring in a string, uses patterns by default.</summary>
        // <param name="haystack">The string to search in.</param>
        // <param name="needle">The string to find, can contain patterns if enabled.</param>
        // <param name="startPos">The position to start the search from, can be negative start position will be relative to the end position.</param>
        // <param name="noPatterns">Disable patterns.</param>
        public static void find(string haystack, string needle, float startPos, boolean noPatterns) {
        }
        
        // <realm>Shared</realm>
        // <summary>Formats the specified values into the string given.</summary>
        // <param name="format">The string to be formatted.<br>.</param>
        // <param name="formatParameters">Values to be formatted into the string.</param>
        public static void format(string format, vararg formatParameters) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the time as a formatted string or as a table if no format is given.</summary>
        // <param name="float">The time in seconds to format.</param>
        // <param name="format">An optional formatting to use. If no format it specified, a table will be returned instead.</param>
        public static void FormattedTime(float @float, string format) {
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a string from a Color variable.</summary>
        // <param name="color">The color to put in the string.</param>
        public static void FromColor(table color) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns char value from the specified index in the supplied string.</summary>
        // <param name="str">The string that you will be searching with the supplied index.</param>
        // <param name="index">The index's value of the string to be returned.</param>
        public static void GetChar(string str, float index) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns extension of the file.</summary>
        // <param name="file">String eg. file-path to get the file extensions from.</param>
        public static void GetExtensionFromFilename(string file) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns file name and extension.</summary>
        // <param name="pathString">The string eg. file-path to get the file-name from.</param>
        public static void GetFileFromFilename(string pathString) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the path only from a file's path.</summary>
        // <param name="Inputstring">String to get path from.</param>
        public static void GetPathFromFilename(string Inputstring) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.</summary>
        // <param name="data">The string to search in.</param>
        // <param name="pattern">The pattern to search for.</param>
        public static void gfind(string data, string pattern) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an iterator which will return either 1 value if no groupings are defined, or the group matches.</summary>
        // <param name="hayStack">The string to search in.</param>
        // <param name="pattern">The pattern to match for.</param>
        public static void gmatch(string hayStack, string pattern) {
        }
        
        // <realm>Shared</realm>
        // <summary>This functions main purpose is to replace certain character sequences in a string.</summary>
        // <param name="string">String which should be modified.</param>
        // <param name="pattern">The pattern that defines what should be matched and eventually be replaced.</param>
        // <param name="replacement">In case of a string the matches sequence will be replaced with it.</param>
        // <param name="maxReplaces">Maximum number of replacements to be made.</param>
        public static void gsub(string @string, string pattern, string or table or function replacement, float maxReplaces) {
        }
        
        // <realm>Shared</realm>
        // <summary>Joins all values of pieces together to a single string.</summary>
        // <param name="seperator">The string will be used to join values in the table.</param>
        // <param name="pieces">The elements to concatenate.</param>
        public static void Implode(string seperator, table pieces) {
        }
        
        // <realm>Shared</realm>
        // <summary>Replaces lua special characters with javascript special characters.</summary>
        // <param name="str">The string that should have it's special characters replaced.</param>
        public static void JavascriptSafe(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns everything left of supplied place of that string.</summary>
        // <param name="str">The string to extract from.</param>
        // <param name="num">Amount of chars relative to the beginning.</param>
        public static void Left(string str, float num) {
        }
        
        // <realm>Shared</realm>
        // <summary>Counts the number of characters in the string (length).</summary>
        // <param name="str">The string to find the length of.</param>
        public static void len(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Changes any upper-case characters in a string to lower-case.</summary>
        // <param name="str">The string to convert.</param>
        public static void lower(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Finds a pattern in a string.</summary>
        // <param name="string">String which should be searched in for matches.</param>
        // <param name="pattern">The pattern that defines what should be matched.</param>
        // <param name="startPosition">The start index to start the matching from, can be negative to start the match from a position relative to the end.</param>
        public static void match(string @string, string pattern, float startPosition) {
        }
        
        // <realm>Shared</realm>
        // <summary>Converts supplied number into bytes.</summary>
        // <param name="num">The number to convert into bytes.</param>
        public static void NiceSize(float num) {
        }
        
        // <realm>Shared</realm>
        // <summary>Converts supplied number into string.</summary>
        // <param name="num">The number to convert into string.</param>
        public static void NiceTime(float num) {
        }
        
        // <realm>Shared</realm>
        // <summary>Repeats a string by the given value.</summary>
        // <param name="str">The string to convert.</param>
        // <param name="repetitions">Timer to repeat, this values gets rounded internally.</param>
        public static void rep(string str, float repetitions) {
        }
        
        // <realm>Shared</realm>
        // <summary>Replaces all occurrences of the supplied second string.</summary>
        // <param name="str">The string we are seeking to replace an occurrence(s).</param>
        // <param name="find">What we are seeking to replace.</param>
        // <param name="replace">What to replace find with.</param>
        public static void Replace(string str, string find, string replace) {
        }
        
        // <realm>Shared</realm>
        // <summary>Reverses a string.</summary>
        // <param name="str">The string to be reversed.</param>
        public static void reverse(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the last n-th characters of the string.</summary>
        // <param name="str">The string to extract from.</param>
        // <param name="num">Amount of chars relative to the end.</param>
        public static void Right(string str, float num) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the character at the specific index of the string.</summary>
        // <param name="InputString">The input string.</param>
        // <param name="Index">The character index, 1 is the first from left.</param>
        // <param name="ReplacementChar">String to replace with.</param>
        public static void SetChar(string InputString, float Index, string ReplacementChar) {
        }
        
        // <realm>Shared</realm>
        // <summary>Splits the string into a table of strings, separated by the second argument.</summary>
        // <param name="Inputstring">String to split.</param>
        // <param name="Separator">Character(s) to split with.</param>
        public static void Split(string Inputstring, string Separator) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the first argument starts with the second argument.</summary>
        // <param name="Inputstring">String to check.</param>
        // <param name="Start">String to check with.</param>
        public static void StartWith(string Inputstring, string Start) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes the extension of a path.</summary>
        // <param name="Inputstring">The path to change.</param>
        public static void StripExtension(string Inputstring) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a sub-string, starting from the character at position ''StartPos'' of the string (inclusive), and optionally ending at the character at position ''EndPos'' of the string (also inclusive). If EndPos is not given, the rest of the string is returned.</summary>
        // <param name="string">The string you'll take a sub-string out of.</param>
        // <param name="StartPos">The position of the first character that will be included in the sub-string.</param>
        // <param name="EndPos">The position of the last character to be included in the sub-string.</param>
        public static void sub(string @string, float StartPos, float EndPos) {
        }
        
        // <realm>Shared</realm>
        // <summary>Fetches a Color type from a string.</summary>
        // <param name="Inputstring">The string to convert from.</param>
        public static void ToColor(string Inputstring) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns given time in "MM:SS" format.</summary>
        // <param name="time">Time in seconds.</param>
        public static void ToMinutesSeconds(float time) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns given time in "MM:SS:MS" format.</summary>
        // <param name="time">Time in seconds.</param>
        public static void ToMinutesSecondsMilliseconds(float time) {
        }
        
        // <realm>Shared</realm>
        // <summary>Splits the string into characters and creates a sequential table.</summary>
        // <param name="string">The string you'll turn into a table.</param>
        public static void ToTable(string @string) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes leading and trailing matches of a string.</summary>
        // <param name="Inputstring">The string to trim.</param>
        // <param name="Char">String to match.</param>
        public static void Trim(string Inputstring, string Char) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes leading spaces/characters from a string.</summary>
        // <param name="str">String to trim.</param>
        // <param name="char">Custom character to remove.</param>
        public static void TrimLeft(string str, string @char) {
        }
        
        // <realm>Shared</realm>
        // <summary>Removes trailing spaces/passed character from a string.</summary>
        // <param name="str">String to remove from.</param>
        // <param name="char">Custom character to remove, default is a space.</param>
        public static void TrimRight(string str, string @char) {
        }
        
        // <realm>Shared</realm>
        // <summary>Changes any lower-case characters in a string to upper-case.</summary>
        // <param name="str">The string to convert.</param>
        public static void upper(string str) {
        }
    }
}
