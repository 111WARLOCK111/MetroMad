//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class debug {
        
        // <realm>Shared</realm>
        // <summary>Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.</summary>
        public virtual void debug() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the environment of the passed object. This can be set with {{LibraryFunction|debug|setfenv}}</summary>
        // <param name="object">Object to get environment of.</param>
        // <return>table|Environment</return>
        public virtual table getfenv(table @object) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the current hook settings of the passed thread. The thread argument can be omitted. This is unrelated to gamemode hooks. More information on hooks can be found at http://www.lua.org/pil/23.2.html</summary>
        // <return>function|Hook function</return>
        public virtual function gethook() {
            return new function();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns useful information about a function.</summary>
        // <param name="func">Takes either a function or a level as an argument. When a function is defined, it returns useful information about that function in a table.</param>
        // <return>table|A table as a {{Struct|DebugInfo}} containing information about the function you passed.</return>
        public virtual table getinfo(function func) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the name and value of the local function at the specified area.</summary>
        // <param name="thread">The thread.</param>
        // <param name="level">The level above the thread.</param>
        // <param name="index">The variable's index you want to get.</param>
        // <return>string|The name of the variable</return>
        public virtual string getlocal(Thread thread, float level, float index) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the metatable of an object.</summary>
        // <param name="Object">The object to retrieve the metatable from.</param>
        // <return>table|The metatable of the given object or nil.</return>
        public virtual table getmetatable(any Object) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the internal Lua registry tables.</summary>
        // <return>table|registry</return>
        public virtual table getregistry() {
            return new table();
        }
        
        // <realm>Shared</realm>
        public virtual void getupvalue() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the environment of the passed object.</summary>
        // <param name="object">Object to set environment of.</param>
        // <param name="env">Environment to set.</param>
        // <return>table|The object</return>
        public virtual table setfenv(table @object, table env) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html</summary>
        // <param name="thread">Thread to set the hook on. This argument can be omited.</param>
        // <param name="hook">Function for the hook to call.</param>
        // <param name="mask">The hook's mask.</param>
        // <param name="count">How often to call the hook (in instructions). 0 for every instruction.</param>
        public virtual void sethook(thread thread, function hook, string mask, float count) {
        }
        
        // <realm>Shared</realm>
        public virtual void setlocal() {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets an object's metatable.</summary>
        // <param name="Object">The object to be given a new metatable.</param>
        // <param name="Metatable">The metatable to set for the object or nil.</param>
        public virtual bool setmetatable(any Object, table Metatable) {
            return true;
        }
        
        // <realm>Shared</realm>
        public virtual void setupvalue() {
        }
        
        // <realm>Shared</realm>
        // <summary>Prints out the lua function call stack to the console.</summary>
        public virtual void Trace() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a full execution stack trace.</summary>
        // <return>string|A dump of the execution stack.</return>
        public virtual string traceback() {
            return "String";
        }
        
        // <realm>Shared</realm>
        public virtual void upvalueid() {
        }
        
        // <realm>Shared</realm>
        public virtual void upvaluejoin() {
        }
    }
}
