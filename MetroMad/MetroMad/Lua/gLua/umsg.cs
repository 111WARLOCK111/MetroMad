//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class umsg {
        
        // <realm>Server</realm>
        // <summary>Write an angle to the user message.</summary>
        // <param name="angle">The angle to be sent.</param>
        public virtual void Angle(Angle angle) {
        }
        
        // <realm>Server</realm>
        // <summary>Write a bool to the user message.</summary>
        // <param name="angle">The bool to be sent.</param>
        public virtual void Bool(boolean angle) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a signed char to the usermessage.</summary>
        // <param name="char">The char to be send.</param>
        public virtual void Char(float @char) {
        }
        
        // <realm>Server</realm>
        // <summary>Dispatches to usermessage to the client(s).</summary>
        public virtual void End() {
        }
        
        // <realm>Server</realm>
        // <summary>Writes an entity object to the usermessage.</summary>
        // <param name="entity">The entity to be send.</param>
        public virtual void Entity(Entity entity) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a float to the usermessage.</summary>
        // <param name="float">The float to be send.</param>
        public virtual void Float(float @float) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a signed int to the usermessage.</summary>
        // <param name="int">The int to be send.</param>
        public virtual void Long(float @int) {
        }
        
        // <realm>Server</realm>
        // <summary>The string specified will be networked to the client and receive a identifying number, which will be send instead of the string to optimize networking.</summary>
        // <param name="string">The string to be pooled.</param>
        public virtual void PoolString(string @string) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a signed short to the usermessage.</summary>
        // <param name="short">The short to be pooled.</param>
        public virtual void Short(float @short) {
        }
        
        // <realm>Server</realm>
        // <summary>Starts a new usermessage.</summary>
        // <param name="name">The name of the message to be send.</param>
        // <param name="filter">If passed a player object, it will only be send to the player, if passed a table of players, it will be send to all specified players, if passed nil, the message will be send to all players. You can also pass [[:Category:CRecipientFilter|CRecipientFilter]].</param>
        public virtual void Start(string name, Player filter) {
        }
        
        // <realm>Server</realm>
        // <summary>Write a null terminated string to the user message.</summary>
        // <param name="string">The string to be sent.</param>
        public virtual void String(string @string) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a Vector to the usermessage.</summary>
        // <param name="vector">The vector to be send.</param>
        public virtual void Vector(Vector vector) {
        }
        
        // <realm>Server</realm>
        // <summary>Writes a vector normal to the usermessage.</summary>
        // <param name="normal">The vector normal to be send.</param>
        public virtual void VectorNormal(Vector normal) {
        }
    }
}
