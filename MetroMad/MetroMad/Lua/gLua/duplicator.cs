//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class duplicator {
        
        // <realm>Shared</realm>
        // <summary>"Allow this entity to be duplicated"</summary>
        // <param name="classname">An entity's classname.</param>
        public virtual void Allow(string classname) {
        }
        
        // <realm>Server</realm>
        // <summary>"Applies Bone Modifiers"</summary>
        // <param name="Player">The player whose ragdoll this is.</param>
        // <param name="Ent">The ragdoll in question.</param>
        public virtual void ApplyBoneModifiers(Player Player, Entity Ent) {
        }
        
        // <realm>Server</realm>
        // <summary>"Applies entity Modifiers"</summary>
        // <param name="Player">The player whose entity this is.</param>
        // <param name="Ent">The entity in question.</param>
        public virtual void ApplyEntityModifiers(Player Player, Entity Ent) {
        }
        
        // <realm>Server</realm>
        // <summary>Clear entity modifiers.</summary>
        // <param name="Entity">The entity the modification is stored on.</param>
        // <param name="Type">The name of the stored entity modifier.</param>
        public virtual void ClearEntityModifier(Entity Entity, string Type) {
        }
        
        // <realm>Server</realm>
        // <summary>Creates a duplication.</summary>
        // <param name="ent">The entity to duplicate. The function will automatically copy all constrained entities.</param>
        // <return>table|A table containing duplication info.</return>
        public virtual table Copy(Entity ent) {
            return new table();
        }
        
        // <realm>Server</realm>
        public virtual void CopyEnts() {
        }
        
        // <realm>Server</realm>
        public virtual void CopyEntTable() {
        }
        
        // <realm>Server</realm>
        public virtual void CreateConstraintFromTable() {
        }
        
        // <realm>Server</realm>
        // <summary>"Create an entity from a table." <br/></summary>
        // <param name="Player">The player who wants to create something.</param>
        // <param name="EntTable">The duplication data to build the entity with.</param>
        public virtual void CreateEntityFromTable(Player Player, table EntTable) {
        }
        
        // <realm>Server</realm>
        // <summary>"Restores the bone's data."<br/></summary>
        // <param name="ent">The entity to be bone manipulated.</param>
        // <param name="Bones">The bone information.</param>
        public virtual void DoBoneManipulator(Entity ent, table Bones) {
        }
        
        // <realm>Server</realm>
        // <summary>"Restores the flex data"</summary>
        // <param name="Ent">The entity to restore the flexes on.</param>
        // <param name="Flex">The flexes to restore.</param>
        // <param name="Scale">The flex scale to apply. (Flex scale is unchanged if omitted).</param>
        public virtual void DoFlex(Entity Ent, table Flex, float Scale) {
        }
        
        // <realm>Server</realm>
        // <summary>"Applies generic every-day entity stuff for ent from table data."<br/></summary>
        // <param name="ent">The entity to be applied upon.</param>
        // <param name="data">The data to be applied onto the entity.</param>
        public virtual void DoGeneric(Entity ent, table data) {
        }
        
        // <realm>Server</realm>
        // <summary>"Applies bone data, generically."<br/></summary>
        // <param name="Entity">The entity to be applied upon.</param>
        // <param name="Player">The player who owns the entity.</param>
        // <param name="data">The data to be applied onto the entity.</param>
        public virtual void DoGenericPhysics(Entity Entity, Player Player, table data) {
        }
        
        // <realm>Shared</realm>
        // <summary>"Returns an entity class factory"</summary>
        // <param name="_name_">The name of the entity class factory.</param>
        public virtual void FindEntityClass(string _name_) {
        }
        
        // <realm>Server</realm>
        // <summary>"Generic function for duplicating stuff" <br/></summary>
        // <param name="Player">The player who wants to create something.</param>
        // <param name="data">The duplication data to build the entity with.</param>
        public virtual void GenericDuplicatorFunction(Player Player, table data) {
        }
        
        // <realm>Server</realm>
        // <summary>"Returns all constrained Entities and constraints. <br/></summary>
        // <param name="ent">The entity to start from.</param>
        // <param name="EntTable">The table the entities will be stored in. (Returned by the function).</param>
        // <param name="ConstraintTable">The table the constraints will be stored in (Returned by the function).</param>
        public virtual void GetAllConstrainedEntitiesAndConstraints(Entity ent, table EntTable, table ConstraintTable) {
        }
        
        // <realm>Shared</realm>
        // <summary>"Returns true if we can copy/paste this entity"</summary>
        // <param name="classname">An entity's classname.</param>
        public virtual void IsAllowed(string classname) {
        }
        
        // <realm>Server</realm>
        // <summary>"Given entity list and constranit list, create all entities and return their tables"<br/></summary>
        // <param name="Player">The player who wants to create something.</param>
        // <param name="EntityList">A table of duplicator data to create the entities from.</param>
        // <param name="ConstraintList">A table of duplicator data to create the constraints from.</param>
        public virtual void Paste(Player Player, table EntityList, table ConstraintList) {
        }
        
        // <realm>Shared</realm>
        public virtual void RegisterBoneModifier() {
        }
        
        // <realm>Shared</realm>
        // <summary>Register a function used for creating a duplicated constraint.</summary>
        // <param name="name">The unique name of new constraint.</param>
        // <param name="callback">Function to be called when this constraint is created.</param>
        // <param name="params object[]">Arguments passed to the callback function.</param>
        public virtual void RegisterConstraint(string name, function callback, any params object[]) {
        }
        
        // <realm>Shared</realm>
        // <summary>This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.<br /></summary>
        // <param name="name">The ClassName of the entity you wish to register a factory for.</param>
        // <param name="function">The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed.</param>
        // <param name="args">A list of arguments you want passed from the duplication data table.</param>
        public virtual void RegisterEntityClass(string name, function function, @object args) {
        }
        
        // <realm>Shared</realm>
        // <summary><!-- Garry did not document this function --></summary>
        // <param name="_name_">An identifier for your modification. This is not limited, so be verbose. "Person's 'Unbreakable' mod" is far less likely to cause conflicts than "unbreakable".</param>
        // <param name="_function_">The function to be called for your modification. It should have the arguments (Player, Entity, Data), where data is what you pass to {{LibraryFunction|duplicator|StoreEntityModifier}}.</param>
        public virtual void RegisterEntityModifier(string _name_, function _function_) {
        }
        
        // <realm>Server</realm>
        // <summary>Help to remove certain map created entities before creating the saved entities</summary>
        public virtual void RemoveMapCreatedEntities() {
        }
        
        // <realm>Shared</realm>
        // <summary>"When a copy is copied it will be translated according to these.</summary>
        // <param name="v">The angle to offset all pastes from.</param>
        public virtual void SetLocalAng(Angle v) {
        }
        
        // <realm>Shared</realm>
        // <summary>"When a copy is copied it will be translated according to these.</summary>
        // <param name="v">The position to offset all pastes from.</param>
        public virtual void SetLocalPos(Vector v) {
        }
        
        // <realm>Server</realm>
        public virtual void StoreBoneModifier() {
        }
        
        // <realm>Server</realm>
        // <summary>Stores an entity modifier into an entity for saving</summary>
        // <param name="entity">The entity to store modifier in.</param>
        // <param name="name">Unique modifier name.</param>
        // <param name="data">Modifier data.</param>
        public virtual void StoreEntityModifier(Entity entity, string name, table data) {
        }
        
        // <realm>Server</realm>
        // <summary>"Work out the AABB size"</summary>
        // <param name="Ents">A table of entity duplication datums.</param>
        public virtual void WorkoutSize(table Ents) {
        }
    }
}
