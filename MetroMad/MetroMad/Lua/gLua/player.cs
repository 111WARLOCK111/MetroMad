//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class player {
        
        // <realm>Server</realm>
        // <summary>Similar to the serverside command "bot", this function creates a new Player bot with the given name. This bot will not obey to the usual "bot_*" commands, and it's the same bot base used in TF2 and CS:S.</summary>
        // <param name="botName">The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.</param>
        // <return>Player|The newly created Player bot. Returns NULL if there's no Player slots available to host it.</return>
        public virtual Player CreateNextBot(string botName) {
            return new Player();
        }
        
        // <return>table|All players currently in the server.</return>
        public virtual table () {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of all bot entities.</summary>
        // <return>table|bots</return>
        public virtual table GetBots() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the player with the specified connection ID.</summary>
        // <param name="connectionID">The connection ID to find the player by.</param>
        // <return>Player|Player is one is found, nil otherwise</return>
        public virtual Player GetByID(float connectionID) {
            return new Player();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the player with the specified uniqueID.</summary>
        // <param name="uniqueID">The uniqueID to find the player by.</param>
        // <return>Player|Player if one is found, false otherwise.</return>
        public virtual Player GetByUniqueID(string uniqueID) {
            return new Player();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of all actual players.</summary>
        // <return>table|players</return>
        public virtual table GetHumans() {
            return new table();
        }
    }
}
