//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class util {
        
        // <realm>Server</realm>
        // <summary>Precaches the string for networking. Whenever you want to create a net message, you must add the name of that message as a networked string via this function.</summary>
        // <param name="str">Adds the specified string to the string table.</param>
        public virtual void AddNetworkString(string str) {
        }
        
        // <realm>Shared</realm>
        // <summary>Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.</summary>
        // <param name="ViewAngles">View angles.</param>
        // <param name="ViewFOV">View Field of View.</param>
        // <param name="x">Mouse X position.</param>
        // <param name="y">Mouse Y position.</param>
        // <param name="scrWidth">Screen width.</param>
        // <param name="scrHeight">Screen height.</param>
        // <return>Vector|Calculated aim vector</return>
        public virtual Vector AimVector(Angle ViewAngles, float ViewFOV, float x, float y, float scrWidth, float scrHeight) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Encodes the specified string to base64.</summary>
        // <param name="str">String to encode.</param>
        // <return>string|base64encoded</return>
        public virtual string Base64Encode(string str) {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>Applies explosion damage to all entities in the specified radius.</summary>
        // <param name="inflictor">The entity that caused the damage.</param>
        // <param name="attacker">The entity that attacked.</param>
        // <param name="damageOrigin">The center of the explosion.</param>
        // <param name="damageRadius">The radius in which entities will be damaged.</param>
        // <param name="damage">The amount of damage to be applied.</param>
        public virtual void BlastDamage(Entity inflictor, Entity attacker, Vector damageOrigin, float damageRadius, float damage) {
        }
        
        // <realm>Server</realm>
        // <summary>Applies spherical damage based on damage info to all entities in the specified radius.</summary>
        // <param name="dmg">The information about the damage.</param>
        // <param name="damageOrigin">Center of the spherical damage.</param>
        // <param name="damageRadius">The radius in which entities will be damaged.</param>
        public virtual void BlastDamageInfo(CTakeDamageInfo dmg, Vector damageOrigin, float damageRadius) {
        }
        
        // <realm>Shared</realm>
        // <summary>Compresses the given string using [http://fastlz.org/ FastLZ].</summary>
        // <param name="str">String to compress.</param>
        // <return>string|The compressed string.</return>
        public virtual string Compress(string str) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Generates the hash of the specified string, up to the first null character ('\0').</summary>
        // <param name="stringToHash">The string to hash.</param>
        // <return>string|The unsigned 32 bit hash</return>
        public virtual string CRC(string stringToHash) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the current date formatted like '2012-10-31 18-00-00'</summary>
        // <return>string|date</return>
        public virtual string DateStamp() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a trace and paints a decal to the surface hit.</summary>
        // <param name="decalName">The name of the decal to paint.</param>
        // <param name="traceStart">The start of the trace.</param>
        // <param name="traceEnd">The end of the trace.</param>
        public virtual void Decal(string decalName, Vector traceStart, Vector traceEnd) {
        }
        
        // <realm>Client</realm>
        // <summary>Performs a trace and paints a decal to the surface hit.</summary>
        // <param name="material">The name of the decal to paint.</param>
        // <param name="ent">The start of the trace.</param>
        // <param name="position">The position of the decal.</param>
        // <param name="normal">The normal of the decal.</param>
        // <param name="color">The color of the decal. Uses the {{Struct|Color}}.</param>
        // <param name="w">The width of the decal.</param>
        // <param name="h">The height of the decal.</param>
        public virtual void DecalEx(IMaterial material, Entity ent, Vector position, Vector normal, table color, float w, float h) {
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the full material path by the decal name.</summary>
        // <param name="decalName">Name of the decal.</param>
        // <return>string|materialPath</return>
        public virtual string DecalMaterial(string decalName) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Decompresses the given string using [http://fastlz.org/ FastLZ].</summary>
        // <param name="compressedString">String to decompress.</param>
        // <return>string|uncompressed</return>
        public virtual string Decompress(string compressedString) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the distance between a line and a point in 3d space.</summary>
        // <param name="lineStart">Start of the line.</param>
        // <param name="lineEnd">End of the line.</param>
        // <param name="pointPos">The position of the point.</param>
        // <return>number|distance</return>
        public virtual int DistanceToLine(Vector lineStart, Vector lineEnd, Vector pointPos) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a effect with the specified data. You can find a list of default effects [http://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/indexe14a.html here].</summary>
        // <param name="effectName">The name of the effect to create.</param>
        // <param name="effectData">The effect data describing the effect.</param>
        // <param name="allowOverride">Allow override.</param>
        // <param name="ignorePredictionOrRecipientFilter">Ignore predicition or recipient filter.</param>
        public virtual void Effect(string effectName, CEffectData effectData, boolean allowOverride, float ignorePredictionOrRecipientFilter) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table containing the info about the model. It seems to be not working serverside, but still exists serverside.</summary>
        // <param name="mdl">Model path.</param>
        // <return>table|The model info</return>
        public virtual table GetModelInfo(string mdl) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets PData of offline player using his SteamID</summary>
        // <param name="steamID">SteamID of the player.</param>
        // <param name="name">Variable name to get value of.</param>
        // <param name="default">The default value in case there's nothing stored.</param>
        // <return>string|The stored value</return>
        public virtual string GetPData(string steamID, string name, string @default) {
            return "String";
        }
        
        // <realm>Client</realm>
        // <summary>Creates a new PixVis handle.</summary>
        // <return>pixelvis_handle_t|PixVis</return>
        public virtual pixelvis_handle_t GetPixelVisibleHandle() {
            return new pixelvis_handle_t();
        }
        
        // <realm>Shared</realm>
        // <summary>Utility function to quickly generate a trace table that starts at the players view position, and ends 16384 units along a specified direction</summary>
        // <param name="ply">The player the trace should be based on.</param>
        // <param name="dir">The direction of the trace.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}.</return>
        public virtual table GetPlayerTrace(Player ply, Vector dir) {
            return new table();
        }
        
        // <realm>Client</realm>
        // <summary>Gets information about the sun position and obstruction or nil if there is no sun.</summary>
        // <return>table|The sun info. See {{Struct|SunInfo}}</return>
        public virtual table GetSunInfo() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the matching surface index for the surface name.</summary>
        // <param name="surfaceName">The name of the surface.</param>
        // <return>number|surfaceIndex</return>
        public virtual int GetSurfaceIndex(string surfaceName) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a name of surfaceproperties ID.</summary>
        // <param name="id">Surface properties ID. You can get it from {{Struct|TraceResult}}.</param>
        // <return>string|The name</return>
        public virtual string GetSurfacePropName(float id) {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>Returns a table of all SteamIDs that have a usergroup.</summary>
        // <return>table|The table of users. The table consists of SteamID-Table pairs, where the table has 2 fields:</return>
        public virtual table GetUserGroups() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a ray box intersection and returns position, normal and the fraction.</summary>
        // <param name="rayStart">Any position on the ray.</param>
        // <param name="rayDirection">The direction of the ray. Note that this is not a true ray: the trace is only as long as the length.</param>
        // <param name="boxOrigin">The center of the box.</param>
        // <param name="boxAngles">The angles of the box.</param>
        // <param name="boxMins">The min position of the box.</param>
        // <param name="boxMaxs">The max position of the box.</param>
        // <return>Vector|hitPos</return>
        public virtual Vector IntersectRayWithOBB(Vector rayStart, Vector rayDirection, Vector boxOrigin, Angle boxAngles, Vector boxMins, Vector boxMaxs) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a ray plane intersection and returns the hit position or nil.</summary>
        // <param name="rayOrigin">Any position of the ray.</param>
        // <param name="rayDirection">The direction of the ray.</param>
        // <param name="planePosition">Any position on the plane.</param>
        // <param name="planeNormal">The normal vector of the plane.</param>
        // <return>number|hitPos</return>
        public virtual int IntersectRayWithPlane(Vector rayOrigin, Vector rayDirection, Vector planePosition, Vector planeNormal) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Checks if a certain position in within the world bounds.</summary>
        // <param name="position">Position to check.</param>
        // <return>boolean|isInWorld</return>
        public virtual bool IsInWorld(Vector position) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the model is loaded in the game.</summary>
        // <param name="modelName">Name/Path of the model to check.</param>
        // <return>boolean|isLoaded</return>
        public virtual bool IsModelLoaded(string modelName) {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the skybox is visibile from the point specified.</summary>
        // <param name="position">The position to check the skybox visibility from.</param>
        // <return>boolean|skyboxVisible</return>
        public virtual bool IsSkyboxVisibleFromPoint(Vector position) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the specified model is valid.</summary>
        // <param name="modelName">Name/Path of the model to check.</param>
        // <return>boolean|isValid</return>
        public virtual bool IsValidModel(string modelName) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.</summary>
        // <param name="ent">The entity.</param>
        // <param name="physobj">Number of the physics object to test.</param>
        // <return>boolean|true is valid, false otherwise</return>
        public virtual bool IsValidPhysicsObject(Entity ent, float physobj) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the specified prop is valid.</summary>
        // <param name="modelName">Name/Path of the model to check.</param>
        // <return>boolean|isValid</return>
        public virtual bool IsValidProp(string modelName) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Checks if the specified model name points to a valid ragdoll.</summary>
        // <param name="ragdollName">Name/Path of the ragdoll model to check.</param>
        // <return>boolean|isValid</return>
        public virtual bool IsValidRagdoll(string ragdollName) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a JSON string to a Lua table.</summary>
        // <param name="JSONstring">The JSON string to convert.</param>
        // <return>table|The table containing converted information. Returns nil on failure.</return>
        public virtual table JSONToTable(string JSONstring) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a KeyValue string to a Lua table.</summary>
        // <param name="KeyValuestring">The KeyValue string to convert.</param>
        // <param name="preserveKeyCase">Whether we should preserve key case or not.</param>
        // <return>table|The converted table</return>
        public virtual table KeyValuesToTable(string KeyValuestring, boolean preserveKeyCase) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Similar to {{LibraryFunction|util|KeyValuesToTable}} but it also preserves order of keys.</summary>
        // <param name="keyvals">The key value string.</param>
        // <param name="preserveKeyCase">Whether we should preserve key case or not.</param>
        // <return>table|The output table</return>
        public virtual table KeyValuesToTablePreserveOrder(string keyvals, boolean preserveKeyCase) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a vector in world coordinates based on an entity and local coordinates</summary>
        // <param name="ent">The entity lpos is local to.</param>
        // <param name="lpos">Coordinates local to the ent.</param>
        // <param name="bonenum">The bonenumber of the ent lpos is local to.</param>
        // <return>Vector|wpos</return>
        public virtual Vector LocalToWorld(Entity ent, Vector lpos, float bonenum) {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the string associated with the given id.</summary>
        // <param name="stringTableID">ID to get the associated string of.</param>
        // <return>string|network string</return>
        public virtual string NetworkIDToString(float stringTableID) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the string associated with the given id.</summary>
        // <param name="networkString">String to get the associated ID from.</param>
        // <return>number|id</return>
        public virtual int NetworkStringToID(string networkString) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Formats a float by stripping off extra 0's and .'s</summary>
        // <param name="float">The float to format.</param>
        // <return>string|Formatted float</return>
        public virtual string NiceFloat(float @float) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a tracer effect with the given parameters.</summary>
        // <param name="name">The name of the tracer effect.</param>
        // <param name="startPos">The start position of the tracer.</param>
        // <param name="endPos">The end position of the tracer.</param>
        // <param name="doWhiz">Play the hit miss(whiz) sound.</param>
        public virtual void ParticleTracer(string name, Vector startPos, Vector endPos, boolean doWhiz) {
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a tracer effect with the given parameters.</summary>
        // <param name="name">The name of the tracer effect.</param>
        // <param name="startPos">The start position of the tracer.</param>
        // <param name="endPos">The end position of the tracer.</param>
        // <param name="entityIndex">Entity index of the emitting entity.</param>
        // <param name="doWhiz">Play the hit miss(whiz) sound.</param>
        // <param name="attachmentIndex">Attachment index to be used as origin.</param>
        public virtual void ParticleTracerEx(string name, Vector startPos, Vector endPos, float entityIndex, boolean doWhiz, float attachmentIndex) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the visibility of the PixVis with the specified parameters, visibility ranges from 0-1.</summary>
        // <param name="position">The PixVis position.</param>
        // <param name="radius">The radius of the PixVis.</param>
        // <param name="PixVis">The PixVis handle.</param>
        // <return>number|visibility</return>
        public virtual int PixelVisible(Vector position, float radius, pixelvis_handle_t PixVis) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the contents of the position specified.</summary>
        // <param name="position">Position to get the contents sample from.</param>
        // <return>number|Contents, see {{Enum|CONTENTS}}</return>
        public virtual int PointContents(Vector position) {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Precaches a model for later use. Model is cached after being loaded once.</summary>
        // <param name="modelName">The model to precache.</param>
        public virtual void PrecacheModel(string modelName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Precaches a sound for later use. Sound is cached after being loaded once.</summary>
        // <param name="soundName">The sound to precache.</param>
        public virtual void PrecacheSound(string soundName) {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a trace with the given origin, direction and filter.</summary>
        // <param name="origin">The origin of the trace.</param>
        // <param name="direction">The direction of the trace.</param>
        // <param name="filter">Entity which should be ignored. Can also be a table of entities.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table QuickTrace(Vector origin, Vector direction, Entity filter) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the absolute system path the file relative to /garrysmod/.</summary>
        // <param name="file">The file to get the absolute path of.</param>
        // <return>string|absolutePath</return>
        public virtual string RelativePathToFull(string file) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Removes PData of offline player using his SteamID</summary>
        // <param name="steamID">SteamID of the player.</param>
        // <param name="name">Variable name to remove.</param>
        public virtual void RemovePData(string steamID, string name) {
        }
        
        // <realm>Shared</realm>
        // <summary>Makes the screen shake</summary>
        // <param name="pos">The origin of the effect.</param>
        // <param name="amplitude">The strength of the effect.</param>
        // <param name="frequency">The frequency of the effect in hz.</param>
        // <param name="duration">The duration of the effect in seconds.</param>
        // <param name="radius">The size of the effect in Garries.</param>
        public virtual void ScreenShake(Vector pos, float amplitude, float frequency, float duration, float radius) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets PData for offline player using his SteamID</summary>
        // <param name="steamID">SteamID of the player.</param>
        // <param name="name">Variable name to store the value in.</param>
        // <param name="value">The value to store.</param>
        public virtual void SetPData(string steamID, string name, any value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Generates a random float value that should be the same on client and server.</summary>
        // <param name="uniqueName">The seed for the random value.</param>
        // <param name="min">The minimum value of the random range.</param>
        // <param name="max">The maximum value of the random range.</param>
        // <param name="additionalSeed">The additional seed.</param>
        // <return>number|The random float value</return>
        public virtual int SharedRandom(string uniqueName, float min, float max, float additionalSeed) {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Adds a trail to the specified entity.</summary>
        // <param name="ent">Entity to attach trail to.</param>
        // <param name="attachmentID">Attachment ID of the entitiys model to attach trail to. If you are not sure, set this to 0.</param>
        // <param name="color">Color of the trail, use {{GlobalFunction|Color}}.</param>
        // <param name="additive">Should the trail be additive or not.</param>
        // <param name="startWidth">Start width of the trail.</param>
        // <param name="endWidth">End width of the trail.</param>
        // <param name="lifetime">How long it takes to transition from startWidth to endWidth.</param>
        // <param name="textureRes">The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5.</param>
        // <param name="texture">Path to the texture to use as a trail. Note that you should also include the ".vmt" or the game WILL crash!.</param>
        // <return>Entity|Entity of created trail</return>
        public virtual Entity SpriteTrail(Entity ent, float attachmentID, table color, boolean additive, float startWidth, float endWidth, float lifetime, float textureRes, string texture) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a new {{Type|Stack}} object</summary>
        // <return>Stack|A brand new stack object</return>
        public virtual Stack Stack() {
            return new Stack();
        }
        
        // <realm>Shared</realm>
        // <summary>Given a 64bit SteamID will return a STEAM_0: style Steam ID</summary>
        // <param name="id">The 64 bit Steam ID.</param>
        // <return>string|STEAM_0 style Steam ID</return>
        public virtual string SteamIDFrom64(string id) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Given a STEAM_0 style Steam ID will return a 64bit Steam ID</summary>
        // <param name="id">The STEAM_0 style id.</param>
        // <return>string|64bit Steam ID</return>
        public virtual string SteamIDTo64(string id) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Convert a string to a certain type</summary>
        // <param name="str">The string to convert.</param>
        // <param name="typename">The type to attempt to convert the string to ('vector','angle','float','bool','string'), case insensitive.</param>
        // <return>any|var</return>
        public virtual any StringToType(string str, string typename) {
            return new any();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a table to a JSON string.</summary>
        // <param name="table">Table to convert.</param>
        // <return>string|JSON</return>
        public virtual string TableToJSON(table table) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Converts the given table into a key value string.</summary>
        // <param name="table">The table to convert.</param>
        // <return>string|KeyValueString</return>
        public virtual string TableToKeyValues(table table) {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a timer object.</summary>
        // <return>table|A timer object. It has next methods:</return>
        public virtual table Timer() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the time since this function has been last called</summary>
        // <return>number|Time since this function has been last called in ms</return>
        public virtual int TimerCycle() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|You should use {{GlobalFunction|tobool}} instead.}}</summary>
        // <param name="input">A string or a number to convert.</param>
        // <return>boolean|False if the input is equal to the string or boolean "false", if the input is equal to the string or number "0", or if the input is nil. Returns true otherwise.</return>
        public virtual bool tobool(any input) {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Runs a trace using the ent's collisionmodel between two points.</summary>
        // <param name="tracedata">Trace data. See {{Struct|Trace}}.</param>
        // <param name="ent">The entity to use.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table TraceEntity(table tracedata, Entity ent) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>{{Deprecated|This function is broken and returns the same values all the time}}</summary>
        // <param name="ent1">The first entity to trace from.</param>
        // <param name="ent2">The second entity to trace to.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table TraceEntityHull(Entity ent1, Entity ent2) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a hull trace with the given trace data. This function is shared but will not give the desired results on the client; you should only use this serverside as the function utilizes certain physics mechanisms that do not exist on the client.</summary>
        // <param name="TraceData">The trace data to use. See {{Struct|HullTrace}}.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table TraceHull(table TraceData) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a trace with the given trace data.</summary>
        // <param name="TraceData">The trace data to use. See {{Struct|Trace}}.</param>
        // <return>table|Trace result. See {{Struct|TraceResult}}</return>
        public virtual table TraceLine(table TraceData) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Converts a type to a (nice, but still parsable) string</summary>
        // <param name="input">What to convert.</param>
        // <return>string|Converted string</return>
        public virtual string TypeToString(any input) {
            return "String";
        }
    }
}
