//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class system {
        
        // <realm>Shared</realm>
        // <summary>Returns the total uptime of the current application.</summary>
        // <return>number|upTime</return>
        public virtual int AppTime() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the current battery power.</summary>
        // <return>number|0-100 if not plugged in, 255 if plugged in</return>
        public virtual int BatteryPower() {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Flashes the window. Currently works only on Windows.</summary>
        public virtual void FlashWindow() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the country determined by the localisation settings of the OS.</summary>
        // <return>string|country</return>
        public virtual string GetCountry() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the whether the game window has focus.</summary>
        // <return>boolean|hasFocus</return>
        public virtual bool HasFocus() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the current OS is Linux.</summary>
        // <return>boolean|isLinux</return>
        public virtual bool IsLinux() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the current OS is OSX.</summary>
        // <return>boolean|isOSX</return>
        public virtual bool IsOSX() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whether the current OS is Windows.</summary>
        // <return>boolean|isWindows</return>
        public virtual bool IsWindows() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the synchronized steam time.</summary>
        // <return>number|steamTime</return>
        public virtual int SteamTime() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the total uptime of operating system.</summary>
        // <return>number|systemUpTime</return>
        public virtual int UpTime() {
            return 1;
        }
    }
}
