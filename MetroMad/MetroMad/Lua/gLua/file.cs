//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class file {
        
        // <realm>Shared</realm>
        // <summary>Appends a file relative to the ''data'' folder.</summary>
        // <param name="name">The file's name.</param>
        // <param name="content">The content which should be appended to the file.</param>
        public static void Append(string name, string content) {
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a directory that is relative to the ''data'' folder.</summary>
        // <param name="name">The directory's name.</param>
        public static void CreateDir(string name) {
        }
        
        // <realm>Shared</realm>
        // <summary>Deletes a file that is relative to the '''data''' folder.</summary>
        // <param name="name">The file name.</param>
        public static void Delete(string name) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a boolean of whether the file or directory exists or not.</summary>
        // <param name="name">The file or directory's name.</param>
        // <param name="path">The path of where to look for the file.</param>
        public static void Exists(string name, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of files and directories.</summary>
        // <param name="name">The directories/files to search for.</param>
        // <param name="path">The path to look for the files and directories in.</param>
        // <param name="sorting">The sorting to be used, optional.</param>
        public static void Find(string name, string path, string sorting) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the given file is a directory.</summary>
        // <param name="fileName">The file or directory's name.</param>
        // <param name="path">The path type.</param>
        public static void IsDir(string fileName, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Attempts to open a file with the given mode.</summary>
        // <param name="fileName">The files name.</param>
        // <param name="fileMode">The mode to open the file in, use [http://lua-users.org/wiki/IoLibraryTutorial this] page for reference of what modes are possible.</param>
        // <param name="path">The path type.</param>
        public static void Open(string fileName, string fileMode, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the content of a file.</summary>
        // <param name="fileName">The name of the file.</param>
        // <param name="path">The path used to look up the file.</param>
        public static void Read(string fileName, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the file's size in bytes. If the file is not found, returns -1.</summary>
        // <param name="fileName">The file's name.</param>
        // <param name="path">The path type.</param>
        public static void Size(string fileName, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns when the file was lasted modified in Unix time.</summary>
        // <param name="fileName">The name of the file.</param>
        // <param name="path">The game path to be used.</param>
        public static void Time(string fileName, string path) {
        }
        
        // <realm>Shared</realm>
        // <summary>Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use {{LibraryFunction|file|Append}}.</summary>
        // <param name="fileName">The name of the file being written into.</param>
        // <param name="content">The content that will be written into the file.</param>
        public static void Write(string fileName, string content) {
        }
    }
}
