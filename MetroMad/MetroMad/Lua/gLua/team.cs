//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class team {
        
        // <realm>Shared</realm>
        // <summary>Increases the score of the given team</summary>
        // <param name="index">Index of the team.</param>
        // <param name="increment">Amount to increase the team's score by.</param>
        public static void AddScore(float index, float increment) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED</summary>
        public static void BestAutoJoinTeam() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table consisting of information on every defined team</summary>
        public static void GetAllTeams() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the selectable classes for the given team. This can be added to with [[team/SetClass]]</summary>
        // <param name="index">Index of the team.</param>
        public static void GetClass(float index) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the team's color.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void GetColor(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the name of the team.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void GetName(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table with all player of the specified team.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void GetPlayers(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the score of the team.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void GetScore(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of valid spawnpoint classes the team can use. These are set with {{LibraryFunction|team|SetSpawnPoint}}.</summary>
        // <param name="index">Index of the team.</param>
        public static void GetSpawnPoint(float index) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of valid spawnpoint entities the team can use. These are set with  {{LibraryFunction|team|SetSpawnPoint}}.</summary>
        // <param name="index">Index of the team.</param>
        public static void GetSpawnPoints(float index) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if a team is joinable or not. This is set in {{LibraryFunction|team|SetUp}}.</summary>
        // <param name="index">The index of the team.</param>
        public static void Joinable(float index) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the amount of players in a team.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void NumPlayers(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets valid classes for use by a team. Classes can be created using {{LibraryFunction|player_manager|RegisterClass}}</summary>
        // <param name="index">Index of the team.</param>
        // <param name="classes">A class ID or table of class IDs.</param>
        public static void SetClass(float index, any classes) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the team's color.</summary>
        // <param name="teamIndex">The team index.</param>
        // <param name="color">The team's new color as a {{Struct|Color}}.</param>
        public static void SetColor(float teamIndex, table color) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the score of the given team</summary>
        // <param name="index">Index of the team.</param>
        // <param name="score">The team's new score.</param>
        public static void SetScore(float index, float score) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets valid spawnpoint classes for use by a team.</summary>
        // <param name="index">Index of the team.</param>
        // <param name="classes">A spawnpoint classname or table of spawnpoint classnames.</param>
        public static void SetSpawnPoint(float index, any classes) {
        }
        
        // <realm>Shared</realm>
        // <summary>Creates a new team.</summary>
        // <param name="teamIndex">The team index.</param>
        // <param name="teamName">The team name.</param>
        // <param name="teamColor">The team color. Uses the {{Struct|Color}}.</param>
        // <param name="teamJoinable">Whether the team is joinable or not.</param>
        public static void SetUp(float teamIndex, string teamName, table teamColor, bool teamJoinable) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the sum of deaths of all players of the team.</summary>
        // <param name="teamIndex">The team index.</param>
        public static void TotalDeaths(float teamIndex) {
        }
        
        // <realm>Shared</realm>
        // <summary>Get's the total frags in a team.</summary>
        // <param name="Entity or number">Entity or number.</param>
        public static void TotalFrags(Entity Entity or number) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns true if the given team index is valid</summary>
        // <param name="index">Index of the team.</param>
        public static void Valid(float index) {
        }
    }
}
