//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class physenv {
        
        // <realm>Shared</realm>
        // <summary>Loads the given surface properties as a string, follows the file format.</summary>
        // <param name="properties">The properties to add.</param>
        public virtual void AddSurfaceData(string properties) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the air density.</summary>
        // <return>number|airDensity</return>
        public virtual int GetAirDensity() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the global gravity.</summary>
        // <return>Vector|gravity</return>
        public virtual Vector GetGravity() {
            return new Vector();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets the current performance settings in table form.</summary>
        // <return>table|Performance settings. See {{Struct|PhysEnvPerformanceSettings}}</return>
        public virtual table GetPerformanceSettings() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the air density.</summary>
        // <param name="airDensity">The new air density.</param>
        public virtual void SetAirDensity(float airDensity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the directional gravity, does not work on players.</summary>
        // <param name="gravity">The new gravity.</param>
        public virtual void SetGravity(Vector gravity) {
        }
        
        // <realm>Shared</realm>
        // <summary>Sets the performance settings.</summary>
        // <param name="performanceSettings">The new performance settings. See {{Struct|PhysEnvPerformanceSettings}}.</param>
        public virtual void SetPerformanceSettings(table performanceSettings) {
        }
    }
}
