//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class drive {
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player.</param>
        // <param name="view">The view, see {{Struct|ViewData}}.</param>
        public static void CalcView(Player ply, table view) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="cmd">The user command.</param>
        public static void CreateMove(CUserCmd cmd) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player to affect.</param>
        public static void DestroyMethod(Player ply) {
        }
        
        // <realm>Shared</realm>
        // <summary>Player has stopped driving the entity.</summary>
        // <param name="ply">The player.</param>
        // <param name="ent">The entity.</param>
        public static void End(Player ply, Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player.</param>
        // <param name="mv">The move data.</param>
        public static void FinishMove(Player ply, CMoveData mv) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player.</param>
        public static void GetMethod(Player ply) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player.</param>
        // <param name="mv">The move data.</param>
        public static void Move(Player ply, CMoveData mv) {
        }
        
        // <realm>Shared</realm>
        // <summary>Starts driving for the player.</summary>
        // <param name="ply">The player to affect.</param>
        // <param name="ent">The entity to drive.</param>
        // <param name="mode">The driving mode.</param>
        public static void PlayerStartDriving(Player ply, Entity ent, string mode) {
        }
        
        // <realm>Shared</realm>
        // <summary>Stops the player from driving anything. ( For example a prop in sandbox )</summary>
        // <param name="ply">The player to affect.</param>
        public static void PlayerStopDriving(Player ply) {
        }
        
        // <realm>Shared</realm>
        // <summary>Registers a new entity drive.</summary>
        // <param name="name">The name of the drive.</param>
        // <param name="data">The data required to create the drive. This includes the functions used by the drive.</param>
        // <param name="base">The base of the drive.</param>
        public static void Register(string name, table data, string @base) {
        }
        
        // <realm>Shared</realm>
        // <summary>Called when the player first starts driving this entity</summary>
        // <param name="ply">The player.</param>
        // <param name="ent">The entity.</param>
        public static void Start(Player ply, Entity ent) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <param name="ply">The player.</param>
        // <param name="mv">The move data.</param>
        // <param name="cmd">The user command.</param>
        public static void StartMove(Player ply, CMoveData mv, CUserCmd cmd) {
        }
    }
}
