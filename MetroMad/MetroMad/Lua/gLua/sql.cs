//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class sql {
        
        // <realm>Shared</realm>
        // <summary>Tells the engine a set of queries is coming. Will wait until {{LibraryFunction|sql|Commit}} is called to run them.<br></summary>
        public static void Begin() {
        }
        
        // <realm>Shared</realm>
        // <summary>Tells the engine to execute a series of queries queued for execution, must be preceded by {{LibraryFunction|sql|Begin}}<br></summary>
        public static void Commit() {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the last error from a SQLite query.</summary>
        public static void LastError() {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.</summary>
        // <param name="query">The query to execute.</param>
        public static void Query(string query) {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs the query like {{LibraryFunction|sql|Query}}, but returns the first row found.<br></summary>
        // <param name="query">The input query.</param>
        // <param name="row">The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3.</param>
        public static void QueryRow(string query, float row) {
        }
        
        // <realm>Shared</realm>
        // <summary>Performs the query like {{LibraryFunction|sql|Query}}, but returns the first value found.</summary>
        // <param name="query">The input query.</param>
        public static void QueryValue(string query) {
        }
        
        // <realm>Shared</realm>
        // <summary>Escapes dangerous characters and symbols from user input used in an SQL Query.</summary>
        // <param name="string">The string to be escaped.</param>
        // <param name="bNoQuotes">Set this as true, and the function will not wrap the input string in apostrophes.</param>
        public static void SQLStr(string @string, boolean bNoQuotes) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns if the table with the specified name exists.</summary>
        // <param name="tableName">The name of the table to check.</param>
        public static void TableExists(string tableName) {
        }
    }
}
