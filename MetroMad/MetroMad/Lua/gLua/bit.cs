//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class bit {
        
        // <realm>Shared</realm>
        // <summary>Returns the arithmetically shifted value.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="shiftCount">Amounts of bits to shift.</param>
        public static void arshift(float value, float shiftCount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the bitwise and of all values specified.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="otherValues">Values bit and with. Optional.</param>
        public static void band(float value, float otherValues) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the bitwise not of the value.</summary>
        // <param name="value">The value to be inverted.</param>
        public static void bnot(float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the bitwise or of all values specified.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="otherValues">Values bit or with. Optional.</param>
        public static void bor(float value, float otherValues) {
        }
        
        // <realm>Shared</realm>
        // <summary>Swaps the byte order.</summary>
        // <param name="value">The value to be byte swapped.</param>
        public static void bswap(float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the bitwise xor of all values specified.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="otherValues">Values bit xor with. Optional.</param>
        public static void bxor(float value, float otherValues) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the left shifted value.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="shiftCount">Amounts of bits to shift left by.</param>
        public static void lshift(float value, float shiftCount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the left rotated value.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="shiftCount">Amounts of bits to rotate left by.</param>
        public static void rol(float value, float shiftCount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the right rotated value.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="shiftCount">Amounts of bits to rotate right by.</param>
        public static void ror(float value, float shiftCount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the right shifted value.</summary>
        // <param name="value">The value to be manipulated.</param>
        // <param name="shiftCount">Amounts of bits to shift right by.</param>
        public static void rshift(float value, float shiftCount) {
        }
        
        // <realm>Shared</realm>
        // <summary>Normalizes the specified value and clamps it in the range of a signed 32bit integer.</summary>
        // <param name="value">The value to be normalized.</param>
        public static void tobit(float value) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the hexadecimal representation of the number with the specified digits.</summary>
        // <param name="value">The value to be normalized.</param>
        // <param name="digits">The amount of digits. Optional.</param>
        public static void tohex(float value, float digits) {
        }
    }
}
