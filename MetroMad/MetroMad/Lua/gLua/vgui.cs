//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class vgui {
        
        // <realm>Client</realm>
        // <summary>Creates a panel by the specified classname.</summary>
        // <param name="classname">Classname of the panel to create. Valid classnames are at [[VGUI/Elements]].</param>
        // <param name="parent">Parent of the created panel.</param>
        // <param name="name">Name of the created panel.</param>
        // <return>Panel|panel</return>
        public virtual Panel Create(string classname, Panel parent, string name) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Creates a panel from table.</summary>
        // <param name="metatable">Your PANEL table.</param>
        // <param name="parent">Which panel to parent the newly created panel to.</param>
        // <param name="name">Name of your panel.</param>
        // <return>Panel|Created panel</return>
        public virtual Panel CreateFromTable(table metatable, Panel parent, string name) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Creates a engine panel.</summary>
        // <param name="class">Class of the panel to create.</param>
        // <param name="parent">If specified, parents created panel to given one.</param>
        // <param name="name">Name of the created panel.</param>
        // <return>Panel|Created panel</return>
        public virtual Panel CreateX(string @class, Panel parent, string name) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the cursor is currently active and visible.</summary>
        // <return>boolean|isCursorVisible</return>
        public virtual bool CursorVisible() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the currently focused panel has a parent.</summary>
        // <return>boolean|focusHasParent</return>
        public virtual bool FocusedHasParent() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Gets the method table of this panel. Does not return parent methods!</summary>
        // <param name="Panelname">The name of the panel.</param>
        // <return>table|methods</return>
        public virtual table GetControlTable(string Panelname) {
            return new table();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the panel the cursor is hovering above.</summary>
        // <return>Panel|hoveredPanel</return>
        public virtual Panel GetHoveredPanel() {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the panel which is currently receiving keyboard input.</summary>
        // <return>Panel|keyboardPanel</return>
        public virtual Panel GetKeyboardFocus() {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Returns the global world panel which is the parent to all others.</summary>
        // <return>Panel|The world panel</return>
        public virtual Panel GetWorldPanel() {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Returns whenever the cursor is hovering the world panel.</summary>
        // <return>boolean|isHoveringWorld</return>
        public virtual bool IsHoveringWorld() {
            return true;
        }
        
        // <realm>Client</realm>
        // <summary>Registers a panel for later creation.</summary>
        // <param name="classname">Classname of the panel to create.</param>
        // <param name="panelTable">The table containg the panel information.</param>
        // <param name="baseName">Name of the base of the panel.</param>
        // <return>Panel|panel</return>
        public virtual Panel Register(string classname, table panelTable, string baseName) {
            return new Panel();
        }
        
        // <realm>Client</realm>
        // <summary>Registers a new VGUI panel from a file.</summary>
        // <param name="file">The file to register.</param>
        // <return>table|A table containing info about the panel. Can be supplied to {{LibraryFunction|vgui|CreateFromTable}}</return>
        public virtual table RegisterFile(string file) {
            return new table();
        }
        
        // <realm>Client</realm>
        // <summary>Registers a table to use as a panel. All this function does is assigns Base key to your table and returns the table.</summary>
        // <param name="panel">The PANEL table.</param>
        // <param name="base">A base for the panel.</param>
        // <return>table|The PANEL table</return>
        public virtual table RegisterTable(table panel, string @base) {
            return new table();
        }
    }
}
