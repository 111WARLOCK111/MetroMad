//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class game {
        
        // <realm>Shared</realm>
        // <summary>Adds a new ammo type to the game.</summary>
        // <param name="ammoData">The attributes of the ammo. See the {{Struct|AmmoData}}.</param>
        public virtual void AddAmmoType(table ammoData) {
        }
        
        // <realm>Shared</realm>
        // <summary>Registers a new decal.</summary>
        // <param name="decalName">The name of the decal.</param>
        // <param name="materialName">The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.</param>
        public virtual void AddDecal(string decalName, string materialName) {
        }
        
        // <realm>Client</realm>
        // <summary>Loads a particle file.</summary>
        // <param name="particleFileName">The path of the file to add.</param>
        public virtual void AddParticles(string particleFileName) {
        }
        
        // <realm>Shared</realm>
        // <summary>{{Internal}}</summary>
        // <return>table|All ammo types registered via {{LibraryFunction|game|AddAmmoType}}, sorted by its name value.</return>
        public virtual table BuildAmmoTypes() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>If called serverside it will remove ALL entities which were not created by the map(not players or weapons held by players).</summary>
        // <param name="dontSendToClients">If set to true, don't run this functions on all clients.</param>
        // <param name="ExtraFilters">Entity classes not to reset during cleanup.</param>
        public virtual void CleanUpMap(boolean dontSendToClients, table ExtraFilters) {
        }
        
        // <realm>Server</realm>
        // <summary>Runs a console command.</summary>
        // <param name="stringCommand">String containing the command and arguments to be ran.</param>
        public virtual void ConsoleCommand(string stringCommand) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the name of the current map, without a file extension.</summary>
        // <return>string|The name of the current map, without a file extension.</return>
        public virtual string GetMap() {
            return "String";
        }
        
        // <realm>Server</realm>
        // <summary>Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.</summary>
        // <return>string|nextMap</return>
        public virtual string GetMapNext() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the VBSP version of the current map.</summary>
        // <return>number|mapVersion</return>
        public virtual int GetMapVersion() {
            return 1;
        }
        
        // <realm>Server</realm>
        // <summary>Returns the skill level of the game.</summary>
        // <return>number|The skill level, Easy( 1 ), Normal( 2 ), Hard ( 3 ).</return>
        public virtual int GetSkillLevel() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the timescale of the game</summary>
        // <return>number|timeScale</return>
        public virtual int GetTimeScale() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the worldspawn entity.</summary>
        // <return>Entity|The world</return>
        public virtual Entity GetWorld() {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the server or the server we are connected to is a dedicated server.</summary>
        // <return>boolean|isDedicated</return>
        public virtual bool IsDedicated() {
            return true;
        }
        
        // <realm>Server</realm>
        // <summary>Loads the next map according to the file that is set by the mapcyclefile convar.</summary>
        public virtual void LoadNextMap() {
        }
        
        // <realm>Server</realm>
        // <summary>Returns the map load type of the current map.</summary>
        // <return>string|The load type. Possible values are: "newgame", "loadgame", "transition", "background".</return>
        public virtual string MapLoadType() {
            return "String";
        }
        
        // <realm>Shared</realm>
        // <summary>Returns the maximum number of players for this server.</summary>
        // <return>number|maxPlayers</return>
        public virtual int MaxPlayers() {
            return 1;
        }
        
        // <realm>Shared</realm>
        // <summary>Removes all the clientside ragdolls.</summary>
        public virtual void RemoveRagdolls() {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the skill level of the game.</summary>
        // <param name="level">The skill level, Easy( 1 ), Normal( 2 ), Hard ( 3 ).</param>
        public virtual void SetSkillLevel(float level) {
        }
        
        // <realm>Server</realm>
        // <summary>Sets the time scale of the game.</summary>
        // <param name="timeScale">The new timescale.</param>
        public virtual void SetTimeScale(float timeScale) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns whenever the current session is a single player game.</summary>
        // <return>boolean|isSinglePlayer</return>
        public virtual bool SinglePlayer() {
            return true;
        }
        
        // <realm>Shared</realm>
        // <summary>Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.</summary>
        // <return>Vector|startSpot</return>
        public virtual Vector StartSpot() {
            return new Vector();
        }
    }
}
