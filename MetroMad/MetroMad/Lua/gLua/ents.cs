//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class ents {
        
        // <realm>Server</realm>
        // <summary>Starts creating an entity.</summary>
        // <param name="class">The classname of the entity to create.</param>
        // <return>Entity|The created entity</return>
        public virtual Entity Create(string @class) {
            return new Entity();
        }
        
        // <realm>Client</realm>
        // <summary>Creates a clientside only prop</summary>
        // <param name="model">The model of ent to create.</param>
        // <return>Entity|Created entity.</return>
        public virtual Entity CreateClientProp(string model) {
            return new Entity();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities with the given class, supports wildcards.</summary>
        // <param name="class">The class of the entities to find.</param>
        // <return>table|A table containing all found entities</return>
        public virtual table FindByClass(string @class) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Finds all entities that are of given class and are children of given entity.</summary>
        // <param name="class">The class of entities to search for.</param>
        // <param name="parent">Parent of entities that are being searched for.</param>
        // <return>table|A table of found entities or nil if none are found</return>
        public virtual table FindByClassAndParent(string @class, Entity parent) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities with the given model, supports wildcards.</summary>
        // <param name="model">The model of the entities to find.</param>
        // <return>table|A table of all found entities.</return>
        public virtual table FindByModel(string model) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities with the given hammer targetname</summary>
        // <param name="name">The targetname to look for.</param>
        // <return>table|A table of all found entities</return>
        public virtual table FindByName(string name) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities within the specified box.</summary>
        // <param name="boxMins">The box maximum.</param>
        // <param name="boxMaxs">The box minimum.</param>
        // <return>table|A table of all found entities</return>
        public virtual table FindInBox(Vector boxMins, Vector boxMaxs) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities within the specified cone.</summary>
        // <param name="origin">The "tip" of the cone.</param>
        // <param name="normal">Direction of the code.</param>
        // <param name="radius">Height of the cone.</param>
        // <param name="angle">The angle of the cone.</param>
        // <return>table|A table of all found entities</return>
        public virtual table FindInCone(Vector origin, Vector normal, float radius, float angle) {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Gets all entities within the specified sphere.</summary>
        // <param name="origin">Center of the sphere.</param>
        // <param name="radius">Radius of the sphere.</param>
        // <return>table|A table of all found entities</return>
        public virtual table FindInSphere(Vector origin, float radius) {
            return new table();
        }
        
        // <realm>Server</realm>
        // <summary>Fires a use event.</summary>
        // <param name="target">Name of the target entity.</param>
        // <param name="activator">Activator of the event.</param>
        // <param name="caller">Caller of the event.</param>
        // <param name="usetype">Use type. See the {{Enum|USE}}.</param>
        public virtual void FireTargets(string target, Entity activator, Entity caller, float usetype) {
        }
        
        // <realm>Shared</realm>
        // <summary>Returns a table of all existing entities.</summary>
        // <return>table|Table of all existing entities.</return>
        public virtual table GetAll() {
            return new table();
        }
        
        // <realm>Shared</realm>
        // <summary>Returns an entity by its index. Same as {{GlobalFunction|Entity}}.</summary>
        // <param name="entIdx">The index of the entity.</param>
        // <return>Entity|The entity if it exists.</return>
        public virtual Entity GetByIndex(float entIdx) {
            return new Entity();
        }
        
        // <realm>Server</realm>
        // <summary>Returns entity that has given {{ClassFunction|Entity|MapCreationID}}.</summary>
        // <param name="id">Entity's creation id.</param>
        // <return>Entity|Found entity</return>
        public virtual Entity GetMapCreatedEntity(float id) {
            return new Entity();
        }
    }
}
