//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// /*  AutoGeneratedCode.cs - This class Is autogenerated.
//
//    Copyright (C) 2014  Ali Deym (https://github.com/111WARLOCK111/).
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with this program; if not, write to the Free Software Foundation, Inc.,
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//*/
namespace MetroMad.Lua.gLua {
    using System;
    
    
    public class draw {
        
        // <realm>Client</realm>
        // <summary>Simple draw text at position, but this will expand newlines and tabs.</summary>
        // <param name="text">Text to be drawn.</param>
        // <param name="font">Name of font to draw the text in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default Fonts]] for a list of default fonts.</param>
        // <param name="x">The X Coordinate.</param>
        // <param name="y">The Y Coordinate.</param>
        // <param name="color">Color to draw the text in. Uses the {{Struct|Color}}.</param>
        // <param name="xAlign">Where to align the text horizontally. Uses the {{Enum|TEXT}}.</param>
        public virtual void DrawText(string text, string font, float x, float y, table color, float xAlign) {
        }
        
        // <realm>Client</realm>
        // <summary>Returns the height of the specified font in pixels.</summary>
        // <param name="font">Name of the font to get the height of.</param>
        // <return>number|fontHeight</return>
        public virtual int GetFontHeight(string font) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Sets drawing texture to a default white texture (vgui/white). Useful for resetting the drawing texture.</summary>
        public virtual void NoTexture() {
        }
        
        // <realm>Client</realm>
        // <summary>Draws a rounded rectangle.</summary>
        // <param name="cornerRadius">Radius of the rounded corners, works best with a multiple of 2.</param>
        // <param name="x">The x coordinate of the top left of the rectangle.</param>
        // <param name="y">The y coordinate of the top left of the rectangle.</param>
        // <param name="width">The width of the rectangle.</param>
        // <param name="height">The height of the rectangle.</param>
        // <param name="color">The color to fill the rectangle with. Uses the {{Struct|Color}}.</param>
        public virtual void RoundedBox(float cornerRadius, float x, float y, float width, float height, table color) {
        }
        
        // <realm>Client</realm>
        // <summary>Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.</summary>
        // <param name="cornerRadius">Radius of the rounded corners, works best with a power of 2 number.</param>
        // <param name="x">The x coordinate of the top left of the rectangle.</param>
        // <param name="y">The y coordinate of the top left of the rectangle.</param>
        // <param name="width">The width of the rectangle.</param>
        // <param name="height">The height of the rectangle.</param>
        // <param name="color">The color to fill the rectangle with. Uses the {{Struct|Color}}.</param>
        // <param name="roundTopLeft">Whether the top left corner should be rounded.</param>
        // <param name="roundTopRight">Whether the top right corner should be rounded.</param>
        // <param name="roundBottomLeft">Whether the bottom left corner should be rounded.</param>
        // <param name="roundBottomRight">Whether the bottom right corner should be rounded.</param>
        public virtual void RoundedBoxEx(float cornerRadius, float x, float y, float width, float height, table color, boolean roundTopLeft, boolean roundTopRight, boolean roundBottomLeft, boolean roundBottomRight) {
        }
        
        // <realm>Client</realm>
        // <summary>Draws text on the screen.</summary>
        // <param name="text">The text to be drawn.</param>
        // <param name="font">The font. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts]] for a list of default fonts.</param>
        // <param name="x">The X Coordinate.</param>
        // <param name="y">The Y Coordinate.</param>
        // <param name="color">The color of the text. Uses the {{Struct|Color}}.</param>
        // <param name="xAlign">The alignment of the X coordinate using {{Enum|TEXT}}.</param>
        // <param name="yAlign">The alignment of the Y coordinate using {{Enum|TEXT}}.</param>
        // <return>number|The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.</return>
        public virtual int SimpleText(string text, string font, float x, float y, table color, float xAlign, float yAlign) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Creates a simple line of text that is outlined.</summary>
        // <param name="Text">The text to draw.</param>
        // <param name="font">The font name to draw with. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts.</param>
        // <param name="x">The X Coordinate.</param>
        // <param name="y">The Y Coordinate.</param>
        // <param name="color">The color of the text. Uses the {{Struct|Color}}.</param>
        // <param name="xAlign">The alignment of the X Coordinate.</param>
        // <param name="yAlign">The alignment of the Y Coordinate.</param>
        // <param name="outlinewidth">Width of the outline.</param>
        // <param name="outlinecolor">Color of the outline. Uses the {{Struct|Color}}.</param>
        // <return>number|The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.</return>
        public virtual int SimpleTextOutlined(string Text, string font, float x, float y, table color, float xAlign, float yAlign, float outlinewidth, table outlinecolor) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Works like {{LibraryFunction|draw|SimpleText}} but uses a table structure instead.</summary>
        // <param name="textdata">The text properties. See the {{Struct|TextData}}.</param>
        // <return>number|Width of drawn text</return>
        public virtual int Text(table textdata) {
            return 1;
        }
        
        // <realm>Client</realm>
        // <summary>Works like [[draw/Text| draw.Text]], but draws the text as a shadow.</summary>
        // <param name="textdata">The text properties. See {{Struct|TextData}}.</param>
        // <param name="distance">How far away the shadow appears.</param>
        // <param name="alpha">How visible the shadow is (0-255).</param>
        public virtual void TextShadow(table textdata, float distance, float alpha) {
        }
        
        // <realm>Client</realm>
        // <summary>Draws a texture with a table structure.</summary>
        // <param name="texturedata">The texture properties. See {{Struct|TextureData}}.</param>
        public virtual void TexturedQuad(table texturedata) {
        }
        
        // <realm>Client</realm>
        // <summary>Draws a rounded box with text in it - ideally bordersize will be 8 or 16.</summary>
        // <param name="bordersize">Size of border, should be multiple of 2.</param>
        // <param name="x">The X Coordinate.</param>
        // <param name="y">The Y Coordinate.</param>
        // <param name="text">Text to draw.</param>
        // <param name="font">Font to draw in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts.</param>
        // <param name="boxcolor">The box color. Uses the {{Struct|Color}}.</param>
        // <param name="textcolor">The text color. Uses the {{Struct|Color}}.</param>
        // <return>number|The width of the word box.</return>
        public virtual int WordBox(float bordersize, float x, float y, string text, string font, table boxcolor, table textcolor) {
            return 1;
        }
    }
}
